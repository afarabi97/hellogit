#!/usr/bin/env python3
import os
import argparse
import re
from pathlib import Path
from typing import List


SCRIPT_DIR = os.path.dirname(os.path.realpath(__file__)) + "/"
GLOBAL_KIT_ID_PATTERN = "^(((0[0-9][0-9]|1[0-2][0-7])(0[0-2][0-9]|0[0-3][0-2]))|((12[8-9]|1[3-9][0-9]|2[0-2][0-9]|23[012456789]|24[0-9]|25[0-3])(0[0-5][0-9]|06[0-4])))$"


def validate(global_kit_id: str) -> bool:
    if re.match(GLOBAL_KIT_ID_PATTERN, global_kit_id):
        return True
    else:
        return False

def write_switch_config(global_kit_id, folder, template="Switch/switch.base.dell.xml"):
    a, b = decode(global_kit_id)
    with open(SCRIPT_DIR + template, "r") as conf:
       configuration = conf.read()
    configuration = configuration.replace("10.20.136", f"10.{a}.{b}") # Management Port
    configuration = configuration.replace("10.20.137", f"10.{a}.{b+1}") # Internal Port
    configuration = configuration.replace("10.20.138", f"10.{a}.{b+2}") # DMZ Port
    configuration = configuration.replace("10.20.139", f"10.{a}.{b+3}") # P2P Port
    configuration = configuration.replace("SW-DIP-020003", f"SW-DIP-{global_kit_id}")
    with open(SCRIPT_DIR + folder + "/switch_dell_4112.conf", "w") as conf:
        conf.write(configuration)

def write_sff_switch_config(global_kit_id, folder, template="Switch/sffv2.base.dell.xml"):
    a, b = decode(global_kit_id)
    with open(SCRIPT_DIR + template, "r") as conf:
       configuration = conf.read()
    configuration = configuration.replace("10.20.136", f"10.{a}.{b}") # Management Port
    configuration = configuration.replace("10.20.137", f"10.{a}.{b+1}") # Internal Port
    configuration = configuration.replace("10.20.138", f"10.{a}.{b+2}") # DMZ Port
    configuration = configuration.replace("10.20.139", f"10.{a}.{b+3}") # P2P Port
    configuration = configuration.replace("SW-DIP-019003", f"SW-DIP-{global_kit_id}")
    with open(SCRIPT_DIR + folder + "/switch_dell_5212.conf", "w") as conf:
        conf.write(configuration)

def write_aux_switch_config(global_kit_id, folder):
    a, b = decode(global_kit_id)
    with open(SCRIPT_DIR + "Switch/auxiliary.switch.base.dell.xml", "r") as conf:
       configuration = conf.read()
    configuration = configuration.replace("10.20.136", f"10.{a}.{b}") # Management Port
    configuration = configuration.replace("10.20.137", f"10.{a}.{b+1}") # Internal Port
    configuration = configuration.replace("10.20.139", f"10.{a}.{b+3}") # P2P Port
    configuration = configuration.replace("AUX-DIP-020003", f"SW-AUX-{global_kit_id}")
    with open(SCRIPT_DIR + folder + "/aux_dell_4112.conf", "w") as conf:
        conf.write(configuration)

def write_sff_aux_switch_config(global_kit_id, folder):
    a, b = decode(global_kit_id)
    with open(SCRIPT_DIR + "Switch/sffv2.aux.dell.xml", "r") as conf:
       configuration = conf.read()
    configuration = configuration.replace("10.19.128", f"10.{a}.{b}") # Management Port
    configuration = configuration.replace("10.19.129", f"10.{a}.{b+1}") # Internal Port
    configuration = configuration.replace("10.19.130", f"10.{a}.{b+2}") # DMZ Port
    configuration = configuration.replace("10.19.131", f"10.{a}.{b+3}") # P2P Port
    configuration = configuration.replace("SW-AUX-019001", f"SW-AUX-{global_kit_id}")
    with open(SCRIPT_DIR + folder + "/aux_dell_5212.conf", "w") as conf:
        conf.write(configuration)

def write_firewall_config(global_kit_id, domain, folder):
    a, b = decode(global_kit_id)
    with open(SCRIPT_DIR + "Firewall/firewall.basev2.xml", "r") as conf:
       configuration = conf.read()
    configuration = configuration.replace("10.20.136", f"10.{a}.{b}") # Management Port
    configuration = configuration.replace("10.20.137", f"10.{a}.{b+1}") # Internal Port
    configuration = configuration.replace("10.20.138", f"10.{a}.{b+2}") # DMZ Port
    configuration = configuration.replace("10.20.139", f"10.{a}.{b+3}") # P2P Port
    configuration = configuration.replace(".catwoman", ".{}".format(domain))
    configuration = configuration.replace("<domain>catwoman</domain>", f"<domain>{domain}</domain>")
    with open(SCRIPT_DIR + folder + "/firewall.xml", "w") as conf:
        conf.write(configuration)

def write_virtual_firewall_config(global_kit_id, domain, folder):
    a, b = decode(global_kit_id)
    with open(SCRIPT_DIR + "Firewall/firewall.base.virtual.xml", "r") as conf:
       configuration = conf.read()
    configuration = configuration.replace("10.40.192", f"10.{a}.{b}") # Management
    configuration = configuration.replace("10.40.193", f"10.{a}.{b+1}") # Internal Port
    configuration = configuration.replace("10.40.194", f"10.{a}.{b+2}") # DMZ Port
    configuration = configuration.replace(".virtual", ".{}".format(domain))
    configuration = configuration.replace("<domain>virtual</domain>", f"<domain>{domain}</domain>")
    with open(folder + "/virtual_firewall.xml", "w") as conf:
        conf.write(configuration)


def decode(global_kit_id: str):
    if not validate(global_kit_id):
       raise ValueError("Invalid Global Kit ID. Please refer to documentation for correct input.")

    a = int(global_kit_id[:3])
    b = int(global_kit_id[3:])

    if a <= 127:
        x = a
        y = b * 4 + 124
    else:
        x = a
        y = (b - 1) * 4

    return (x, y)


def prompts():
    domain = None
    kit_id = None
    config = None
    while True:
        try:
            print("   ___  _______  _____          ____     ")
            print("  / _ \/  _/ _ \/ ___/__  ___  / _(_)__ _")
            print(" / // // // ___/ /__/ _ \/ _ \/ _/ / _ \`/")
            print("/____/___/_/   \___/\___/_//_/_//_/\_, / ")
            print("1 - Create Firewall configuration")
            print("2 - Create Dell Switch configuration")
            print("3 - Create auxiliary (secondary) DELL Switch configuration")
            print("4 - Create Firewall, and Switch configuration")
            print("5 - Create Firewall, Switch and Auxiliary Switch configuration")
            print("6 - Create Virtual Firewall configuration")
            print()
            choice = int(input("Please make a selection: "))
            if choice == 1:
                config = ["firewall", "switch", "aux-switch"]
            elif choice == 2:
                config = ["switch"]
            elif choice == 3:
                config = ["aux-switch"]
            elif choice == 4:
                config = ["firewall", "switch"]
            elif choice == 5:
                config = ["firewall", "switch", "aux-switch"]
            elif choice == 6:
                config = ["virtual_firewall"]
            else:
                print("Invalid selection. Please try again.")
                continue

            print()
            domain = input("Enter the domain: ")
            gip_id = input("Enter the GIP ID: ")
            dip_id = input("Enter the DIP ID: ")

            gip_id = str(gip_id).zfill(3)
            dip_id = str(dip_id).zfill(3)
            kit_id = f"{gip_id}{dip_id}"
            second_octet, third_octet = decode(kit_id)
            print("Subnet review for CVA/H program.")
            print(f"DOMAIN: {domain}")
            print(f"Global Kit ID: {kit_id}")
            print(f"Management: 10.{second_octet}.{third_octet}.0/24")
            print(f"Internal: 10.{second_octet}.{third_octet + 1}.0/24")
            print(f"DMZ: 10.{second_octet}.{third_octet + 2}.0/24")
            print("Creating {} configuration files".format(config))
            print()
            confirm = input("Confirm the summary above is correct before continuing (y/n):: ")
            if confirm.lower() == "y":
                break
        except ValueError as e:
            print(str(e))
            continue

    return domain, kit_id, config


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--global-kit-id", type=str, help="Kit ID should be a valid selection. (EX: 020002")
    parser.add_argument("--domain", type=str)
    parser.add_argument("--config", action="append", choices=["firewall", "switch", "aux-switch"], help="You can append multiple choices using this flag (EX:--config <choice> --config <choice>)")
    args = parser.parse_args()

    domain = args.domain
    global_kit_id = args.global_kit_id
    config = args.config # type: List

    if config is None or domain is None or global_kit_id is None:
        domain, global_kit_id, config = prompts()

    try:
        folder = f"Kit_{global_kit_id}_{domain}"
        Path(folder).mkdir(parents=False, exist_ok=True)
        if "switch" in config:
            write_switch_config(global_kit_id, folder)
            write_sff_switch_config(global_kit_id, folder)
        if "aux-switch" in config:
            write_aux_switch_config(global_kit_id, folder)
            write_sff_aux_switch_config(global_kit_id, folder)
        if "firewall" in config:
            write_firewall_config(global_kit_id, domain, folder)
        if "virtual_firewall" in config:
            """
            10.40.50.0 /24 -EXT
            10.40.192.0
            10.40.193.0
            10.40.194.0
            10.40.195.0
            """
            write_virtual_firewall_config(global_kit_id, domain, folder)
    except ValueError as e:
        print(str(e))

if __name__ == "__main__":
    main()
