---

- name: Set_fact management_interface ipv4
  set_fact:
    management_interface: "{{ ansible_default_ipv4.interface }}"

- name: Delete existing files
  file:
    state: absent
    path: "{{ item }}"
  with_items:
    - "{{ dnsmasq_conf_file }}"
    - "{{ host_dir }}"

- name: Install dnsmasq
  yum:
    name:
      - dnsmasq
      - bind-utils
    state: installed

- name: create list
  set_fact:
    host_list: "{{ groups['servers'] + groups['sensors'] }}"

- name: "Create host dir"
  file:
    path: "{{ host_dir }}"
    state: directory
    owner: root
    group: root
    mode: u+rw,g+rw

- import_tasks: update_dns.yml
  tags:
    - update-dnsmasq-hosts

- name: Create dnsmasq conf
  template:
    src: templates/10-dnsmasq.conf.j2
    dest: "{{ dnsmasq_conf_file }}"

- name: Create dnsmasq_kube_hosts file
  file:
    path: "{{ kube_host_file }}"
    state: touch

- name: Configure firewalld
  firewalld:
    service: dns
    permanent: true
    state: enabled
    immediate: yes

- name: "Create dnsmasq directory for override"
  file:
    path: "/etc/systemd/system/dnsmasq.service.d"
    state: directory
    owner: root

- name: override default dnsmasq service
  copy:
    src: "files/override.conf"
    dest: "/etc/systemd/system/dnsmasq.service.d/override.conf"
    group: root
    owner: root
    mode: 0644

- block:
  - name: Override DNS if not provided
    set_fact:
      dns_ip: "{{ hostvars[groups['master_server'][0]].management_ipv4 }}"
    when: dns_ip is not defined or dns_ip is none

  - name: Kube | Get kube-dns IP
    shell: "kubectl get svc -n kube-system | grep kube-dns | awk '{print $3}'"
    register: kube_dns_ip

  - name: Verify kube_dns is valid
    fail:
      msg: "We were not able to get kubedns with kubectl get svc -n kube-system | grep kube-dns | awk '{print $3}'. Kubedns value is {{ kube_dns_ip }}. This means we couldn't update resolv.conf with kubedns which would cause a failure so we are exiting. This means that for whatever reason Kubernetes' DNS service wasn't running." # noqa 204
    when: (kube_dns_ip.stdout | ipv4) != kube_dns_ip.stdout

  - name: Insert kube-dns into dnsmasq
    lineinfile:
      path: "{{ dnsmasq_conf_file }}"
      line: 'server=/cluster.local/{{ kube_dns_ip.stdout }}'
    when: kube_dns_ip.stdout
  ignore_errors: yes

- name: Start dnsmasq and enable it
  systemd:
    name: dnsmasq
    state: restarted
    enabled: yes
    daemon-reload: yes
  tags: update-dnsmasq-hosts

- name: Check if dnsmasq is running # noqa 303
  command: systemctl status dnsmasq
  ignore_errors: yes
  changed_when: false
  register: service_dnsmasq_status
  tags: update-dnsmasq-hosts

- name: Confirm dnsmasq is running
  fail:
    msg: "dnsmasq is not running for some reason. Log into {{ inventory_hostname }} and check status with 'systemctl status dnsmasq'"
  when: service_dnsmasq_status is failed
  tags: update-dnsmasq-hosts

...
