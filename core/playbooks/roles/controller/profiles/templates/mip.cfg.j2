#version=RHEL8
# System authorization information

# Use CDROM installation media
url --url=http://{{ server_ip }}/offlinerepo/tfplenum

# Don't use graphical install
text

# Run the Setup Agent on first boot
firstboot --disable

# Keyboard layouts
keyboard --vckeymap=us

# System language
lang en_US.UTF-8
eula --agreed

# Network information
{% if node_index is defined %}
network --device={{ hostvars[node_index].mac | lower }} --bootproto=static --ip={{ hostvars[node_index].management_ipv4 }} --netmask={{ netmask }} --gateway={{ gateway }} --nameserver={{ dns }} --noipv6 --activate --onboot=yes
network  --hostname={{ node_index }}
{% else %}
network  --bootproto=dhcp --device=eth0 --noipv6 --activate --onboot=yes
network  --hostname=localhost.localdomain
{% endif %}

# Root password  #
rootpw --iscrypted {{ mip_rootpw.stdout }}

# System services
services --disabled=abrtd,bluetooth,atd,avahi-daemon,rhnsd,ntpd,ModemManager,kdump,mcelog

# System timezone
timezone America/Chicago

# X Window System configuration information
xconfig  --startxonboot

# Secure boot disable
zipl --no-secure-boot

%pre
LUKS_PASSWORD=$(echo '{{ luks_password }}')
{% if node_index is defined and hostvars[node_index].deployment_type != "Virtual" %}
curl -XPOST -k -H 'Authorization: Bearer {{ node_state_api_key }}' -H 'Content-Type: application/json' https://{{ server_ip }}/api/kit/node/{{ node_index }}/status -d '{ "name": "provision", "inprogress": true, "error": false, "message": "" }'
{% endif %}

# look for possible boot drives: /dev/sda, /dev/nvme0n1 (can expand to all /dev/sd* and all /dev/nvme* if we need to)
boot_drive=
root_partition=
if [ -b /dev/nvme0n1 ] ; then
        boot_drive=nvme0n1
elif [ -b /dev/sda ] ; then
        boot_drive=sda
fi
# Set root_partition based on drive type... nvme drives have an extra p before the partition number...
if [ $boot_drive = nvme0n1 ] ; then
    root_partition=p3
else
    root_partition=3
fi

# save boot variables for other pre/post scripts...
cat <<EOF > /tmp/bootvars.sh
#!/bin/bash
boot_drive=$boot_drive
root_partition=$root_partition
EOF

cat <<EOF > /tmp/partition_layout

# System bootloader configuration

bootloader --location=mbr --boot-drive=${boot_drive} --password=default --append='modprobe.blacklist=nouveau'

# Partition clearing information
zerombr
clearpart --all --initlabel --drives=${boot_drive}

# Disk partitioning information
part /boot/efi --fstype="vfat" --ondisk=${boot_drive} --size=200
part /boot --fstype="xfs" --ondisk=${boot_drive} --size=1024
part pv.238 --fstype="lvmpv" --ondisk=${boot_drive} --size=100 --grow --encrypted --passphrase=$LUKS_PASSWORD
volgroup rhel --pesize=4096 pv.238
logvol /  --fstype="xfs" --size=1 --name=root --vgname=rhel --grow
EOF
%end

%include /tmp/partition_layout

%packages --ignoremissing
@workstation
# for pidgin
@workstation-product --optional
@internet-applications --optional
@base
# @compat-libraries
@core
@desktop-debugging
@dial-up
# @directory-client
@fonts
@gnome-apps
@gnome-desktop
@guest-desktop-agents
@input-methods
@internet-browser
@java-platform
@multimedia
@network-file-system-client
@networkmanager-submodules
@office-suite
@print-client
@security-tools
@smart-card

elfutils-libelf-devel
libglvnd-devel
rasdaemon
# For NVIDIA Drivers to work with Vulkan:
vulkan-loader
vulkan-tools
vulkan-headers
mesa-vulkan-drivers
@Development Tools
# @x11
{% if node_index is defined and hostvars[node_index].deployment_type == "Virtual" %}
open-vm-tools
perl
{% endif %}
%end

%addon com_redhat_kdump --disable

%end

%post --nochroot --log=/mnt/sysimage/var/log/ks-post-nochroot-1.log

# move bootvars.sh into production tmp folder...
mv /tmp/bootvars.sh /mnt/sysimage/tmp/bootvars.sh

%end

%post --log=/tmp/kick.log

#import boot variables
source /tmp/bootvars.sh

# Add controller public key
mkdir /root/.ssh
echo "{{ controller_public_key }}" > /root/.ssh/authorized_keys
chmod 0600 /root/.ssh/authorized_keys
restorecon -R /root/.ssh/

# create a temp password file for LUKS
echo -n "blah" > /etc/mypasswdfile

# Make LUKs use the password file for passphrase
sed -i -e 's:none:/etc/mypasswdfile:' /etc/crypttab

# add my password file as a valid key for the luks device
echo '{{ luks_password }}' | cryptsetup luksAddKey /dev/${boot_drive}${root_partition} /etc/mypasswdfile

# configure dracut to add the following 2 items to the initramfs (so accessible at boot)
echo 'install_items="/etc/mypasswdfile /etc/crypttab"' > /etc/dracut.conf.d/99-mypwfile.conf

# Default boot to graphical runlevel
systemctl set-default graphical.target

# instruct dracut to apply the configuration
dracut -f --regenerate-all

#disable wayland
sed -i 's/#WaylandEnable=false/WaylandEnable=false/' /etc/gdm/custom.conf

check_nvidia=false
if `lspci | grep -q -E 'VGA.*NVIDIA'`; then
    check_nvidia=true
fi

check_amd=false
if `lspci | grep -q -E 'VGA.*AMD'`; then
    check_amd=true
fi

#install NVIDIA
if $check_nvidia; then
    DRIVER=NVIDIA-Linux-x86_64-525.85.05.run
    curl -o /tmp/$DRIVER http://{{ server_ip }}/MIP/$DRIVER
    bash /tmp/$DRIVER --accept-license --silent -k $(rpm -qa | grep -i kernel-4 | cut -f 2,3 -d "-")
fi

#install AMD
if $check_amd; then
    curl -o /tmp/amdgpu-pro-20.10-1101037-rhel-8.1.tar.xz http://{{ server_ip }}/MIP/amdgpu-pro-20.10-1101037-rhel-8.1.tar.xz
    tar -xvzf /tmp/amdgpu-pro-20.10-1101037-rhel-8.1.tar.xz -C /tmp
    /tmp/amdgpu-pro-20.10-1101037-rhel-8.1/amdgpu-install -y

fi

# instruct dracut to apply the configuration (Ensure GFX driver is also loaded)
dracut -f --regenerate-all
%end

%anaconda
pwpolicy root --minlen=14 --minquality=1 --strict --nochanges --notempty
pwpolicy user --minlen=14 --minquality=1 --strict --nochanges --notempty
pwpolicy luks --minlen=14 --minquality=1 --strict --nochanges --notempty

%end

reboot
