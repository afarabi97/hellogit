#version=DEVEL
# System authorization information
auth --enableshadow --passalgo=sha512

url --url http://{{ server_ip }}/offlinerepo/ltac
repo --name="HighAvailability" --baseurl="http://{{ server_ip }}/offlinerepo/ltac/addons/HighAvailability"
repo --name="ResilientStorage" --baseurl="http://{{ server_ip }}/offlinerepo/ltac/addons/ResilientStorage"
repo --name="Base" --baseurl="http://{{ server_ip }}/offlinerepo/ltac"
repo --name="Local" --baseurl="http://{{ server_ip }}/offlinerepo/ltac/SIMP/x86_64"

authconfig --enableshadow --passalgo=sha512
# network --activate --bootproto=dhcp --hostname=ltac.dev.local --device=link --onboot=true
# TODO template this
network --device={{ hostvars[node_index].mac | lower }} --bootproto=static --ip={{ hostvars[node_index].management_ipv4 }} --netmask={{ netmask }} --gateway={{ gateway }} --nameserver={{ dns }} --noipv6 --activate
network --hostname={{ node_index }}
rootpw --iscrypted {{ rootpw.stdout }}
bootloader --iscrypted --password=grub.pbkdf2.sha512.10000.77A6E5E88363F4502EE3EF1486F7F51852FE085809069DCBD9A351DB9B78FE0B9012F3C5376E774C6DB3B4CE7121173257C59A0763F12F0AF090C565BB3333EA.94779147BCFE75D5D1CFCCDFE3CE17DDA3E72651FF3F26C78C871953B2D3C8D78CA6B0EBCF64F13033CF33205142D9361A5063EA3FC42039753AE64D63B6CAF7
zerombr
firewall --enabled --ssh
firstboot --disable
logging --level=info
selinux --enforcing
timezone --utc GMT --ntpservers=controller.nav100
keyboard --xlayouts=us
lang en_US

%include /tmp/part-include
text
reboot

%packages
acl
audit
bind
bzip2
crontabs
dhclient
fipscheck
iptables
iptables-ipv6
irqbalance
libaio
libutempter
logrotate
mdadm
openssh-clients
openssh-server
python3
redhat-lsb
rpm
smartmontools
sudo
unzip
usbutils
vim-enhanced
wget
which
zip

# Security Related
# dracut
dracut-fips
anacron
cryptsetup-luks
gnupg
microcode_ctl
netlabel_tools
quota
stunnel
tcp_wrappers
tmpwatch
vlock

# Puppet stuff
git
rsync

# Puppet Server Complete Load
# Make sure open source puppetserver is installed
simp-adapter
puppetserver
simp
pupmod-simp-nfs
autofs
elinks
mkisofs
syslinux-tftpboot
yum-utils

# In case of broken repo, these should be installed.
hdparm
kbd
libhugetlbfs
policycoreutils
rootfiles
selinux-policy-targeted
setserial
sysfsutils
udftools

# Don't install these
-rhn-check
-rhn-setup
-rhnsd
-sendmail
-subscription-manager
-sysklogd
-yum-rhn-plugin
%end

%pre

cat << EOF > /tmp/part-include
clearpart --all --initlabel --drives=sda
part /boot     --fstype=ext4 --size=1024 --ondisk sda --asprimary --fsoptions=nosuid,nodev
part /boot/efi --fstype=efi  --size=400  --ondisk sda --asprimary
part pv.01 --size=1 --grow --ondisk sda
volgroup VolGroup00 pv.01
logvol /                 --fstype=ext4 --name=RootVol        --vgname=VolGroup00 --size=10240 --grow --maxsize=30720 --fsoptions=iversion
logvol /var              --fstype=ext4 --name=VarVol         --vgname=VolGroup00 --size=1024  --grow
logvol /var/log          --fstype=ext4 --name=VarLogVol      --vgname=VolGroup00 --size=8192  --fsoptions=nosuid,noexec,nodev
logvol /var/log/audit    --fstype=ext4 --name=VarLogAuditVol --vgname=VolGroup00 --size=1024  --fsoptions=nosuid,noexec,nodev
EOF

%end

%post --nochroot --log=/mnt/sysimage/var/log/post-nochroot.log
(
timeout 5 chvt 3
# SOURCE is the DVD; SYSIMAGE is the chroot'd root dir
SOURCE="/mnt/source"
SYSIMAGE="/mnt/sysimage"

mkdir -p $SOURCE
echo "Copying ISO"
wget -q http://{{ server_ip }}/offlinerepo/{{ iso_ltac_server_name }} -P $SYSIMAGE
mount -o loop $SYSIMAGE/{{ iso_ltac_server_name }} $SOURCE

echo "Copying template files onto installed system..."
rsync -r $SOURCE/files/ $SYSIMAGE/

mkdir $SYSIMAGE/root/.ssh
echo "{{ controller_public_key }}" > $SYSIMAGE/root/.ssh/authorized_keys
chmod 0600 $SYSIMAGE/root/.ssh/authorized_keys
restorecon -R $SYSIMAGE/root/.ssh/

mkdir $SYSIMAGE/etc/ssh/local_keys
echo "{{ controller_public_key }}" > $SYSIMAGE/etc/ssh/local_keys/root
chmod 0600 $SYSIMAGE/etc/ssh/local_keys/root

# If we dropped a LUKS key-file, we need to copy it into place.
if [ -f /boot/disk_creds ]; then
  echo "Configuring disk encryption..."
  cp /boot/disk_creds $SYSIMAGE/etc/.cryptcreds
  chown root:root $SYSIMAGE/etc/.cryptcreds
  chmod 400 $SYSIMAGE/etc/.cryptcreds

  crypt_disk=`cat /boot/crypt_disk`
  for x in /dev/$crypt_disk*; do
    if `cryptsetup isLuks $x`; then
      crypt_partition="$x"
      break
    fi
  done

  if [ -z "$crypt_partition" ]; then
    echo "Error: Could not find the encrypted partition"
    exit 1
  fi

  echo "Updating the LUKS keys, this may take some time...."

  # We need to make sure our keyfile lands in slot 0 and EL6 doesn't have the
  # luksChangeKey command
  cryptsetup luksAddKey --key-slot 1 --key-file /boot/disk_creds $crypt_partition /boot/disk_creds
  cryptsetup luksKillSlot --key-file /boot/disk_creds $crypt_partition 0

  cryptsetup luksAddKey --key-slot 0 --key-file /boot/disk_creds $crypt_partition /boot/disk_creds
  cryptsetup luksKillSlot --key-file /boot/disk_creds $crypt_partition 1

  # Modify the crypttab file
  crypt_uuid=`cryptsetup luksDump ${crypt_partition} | grep UUID | sed 's/[[:space:]]\+/ /g' | cut -f2 -d' '`

  # If we got here, and this is blank, fail hard!
  if [ -z "$crypt_uuid" ]; then
    echo "Error: Could not find crypt_uuid"
    exit 1
  fi

  echo "luks-${crypt_uuid} UUID=${crypt_uuid} /etc/.cryptcreds luks" > $SYSIMAGE/etc/crypttab
fi

# Some nonsense to try and re-mount the DVD
# if [ -b /dev/cdrom ]; then
#   echo "Remounting source image..."
#   if [ ! -d "$SOURCE" ]; then
#     mkdir "$SOURCE";
#   fi
#   if [ ! -d "$SOURCE/Packages" ]; then
#     mount -t iso9660 -o ro /dev/cdrom $SOURCE;
#   fi
# fi

if [ -f "${SYSIMAGE}/opt/puppetlabs/puppet/bin/facter" ]; then
  facter="chroot ${SYSIMAGE} /opt/puppetlabs/puppet/bin/facter"
else
  facter="chroot ${SYSIMAGE} facter"
fi

# Added for bdp
# NOTE: All instances of the string "{{ bdp_version }}" in this file are replaced with the current version of the BDP by the iso build script
echo "Copying BDP files..."
cp -r ${SOURCE}/{{ bdp_version }} ${SYSIMAGE}/var/www/yum
mv ${SYSIMAGE}/var/www/yum/{{ bdp_version }}/container-images ${SYSIMAGE}/var/lib/

# Get the Linux distribution
ostype=`$facter operatingsystem`
rhversion=`$facter operatingsystemrelease`
majrhversion=`$facter operatingsystemmajrelease`
htype=`$facter architecture`

UMASKSAVE=`umask`
umask 0002
pushd .
mkdir -p ${SYSIMAGE}/var/www/yum/$ostype/$rhversion/$htype
cd ${SOURCE}
if [ $? -ne 0 ]; then
  echo "There was a problem changing directory to ${SOURCE}, the DVD will not be copied to disk." | tee ${SYSIMAGE}/root/postinstall.err
  echo "Run the following commands once the install has completed:" | tee -a ${SYSIMAGE}/root/postinstall.err
  echo -e "\tmount /dev/dvd /media" | tee -a ${SYSIMAGE}/root/postinstall.err
  echo -e "\tcp -a /media/* /media/.discinfo /media/.treeinfo /var/www/yum/$ostype/$rhversion/$htype" | tee -a ${SYSIMAGE}/root/postinstall.err
  echo -e "\tcp -a /var/www/yum/$ostype/$rhversion/$htype/SIMP /var/www/yum" | tee -a ${SYSIMAGE}/root/postinstall.err
  echo -e "\tcp -a /var/www/yum/$ostype/$rhversion/$htype/ks /var/www" | tee -a ${SYSIMAGE}/root/postinstall.err
  echo -e "\trm -rf /var/www/yum/$ostype/$rhversion/$htype/SIMP" | tee -a ${SYSIMAGE}/root/postinstall.err
  echo -e "\trm -rf /var/www/yum/$ostype/$rhversion/$htype/ks" | tee -a ${SYSIMAGE}/root/postinstall.err
  echo -e "\trm -rf /var/www/yum/$ostype/$rhversion/$htype/Config" | tee -a ${SYSIMAGE}/root/postinstall.err
  echo -e "\trm -rf /var/www/yum/$ostype/$rhversion/$htype/*simp_pkglist.txt" | tee -a ${SYSIMAGE}/root/postinstall.err
  if [ -e RPM-GPG-KEY-SIMP-Dev ]; then
    echo -e "\tmkdir -p ${SYSIMAGE}/var/www/yum/SIMP-Dev/GPGKEYS" | tee -a ${SYSIMAGE}/root/postinstall.err
    echo -e "\tmv ${SYSIMAGE}/var/www/yum/$ostype/$rhversion/$htype/RPM-GPG-KEY-SIMP-Dev ${SYSIMAGE}/var/www/yum/SIMP-Dev/GPGKEYS" | tee -a ${SYSIMAGE}/root/postinstall.err
  fi

  echo -e "\tcd /var/www/yum/SIMP/x86_64; for file in ../noarch/*.rpm do; ln -s $file; done;" | tee -a ${SYSIMAGE}/root/postinstall.err
  echo -e "\tcd createrepo .;" | tee -a ${SYSIMAGE}/root/postinstall.err
  echo -e "\tcd /var/www/yum/SIMP/i386; for file in ../noarch/*.rpm do; ln -s $file; done;" | tee -a ${SYSIMAGE}/root/postinstall.err
  echo -e "\tcd createrepo .;" | tee -a ${SYSIMAGE}/root/postinstall.err
else
  echo "Copying documentation..."
  cp -a ${SOURCE}/bdp-docs-{{ bdp_version }} ${SYSIMAGE}/var/www/html/bdp-docs
  echo "Copying kickstart files..."
  cp -a * .discinfo .treeinfo ${SYSIMAGE}/var/www/yum/$ostype/$rhversion/$htype
  cp -a ${SYSIMAGE}/var/www/yum/$ostype/$rhversion/$htype/SIMP ${SYSIMAGE}/var/www/yum
  cp -a ${SYSIMAGE}/var/www/yum/$ostype/$rhversion/$htype/ks ${SYSIMAGE}/var/www
  rm -rf ${SYSIMAGE}/var/www/yum/$ostype/$rhversion/$htype/SIMP
  rm -rf ${SYSIMAGE}/var/www/yum/$ostype/$rhversion/$htype/ks
  rm -rf ${SYSIMAGE}/var/www/yum/$ostype/$rhversion/$htype/Config
  rm -rf ${SYSIMAGE}/var/www/yum/$ostype/$rhversion/$htype/*simp_pkglist.txt
  # added for BDP
  rm -rf ${SYSIMAGE}/var/www/yum/$ostype/$rhversion/$htype/{{ bdp_version }}

  if [ -e RPM-GPG-KEY-SIMP-Dev ]; then
    mkdir -p ${SYSIMAGE}/var/www/yum/SIMP-Dev/GPGKEYS
    mv ${SYSIMAGE}/var/www/yum/$ostype/$rhversion/$htype/RPM-GPG-KEY-SIMP-Dev ${SYSIMAGE}/var/www/yum/SIMP-Dev/GPGKEYS
  fi

  rm -rf ${SYSIMAGE}/var/www/yum/$ostype/$rhversion/$htype/bdp-docs-{{ bdp_version }}
fi

if [ ! -d "${SYSIMAGE}/var/www/yum/${ostype}/${majrhversion}" ]; then
  cd "${SYSIMAGE}/var/www/yum/${ostype}";
  ln -sf $rhversion $majrhversion;
  cd -;
fi

popd
umask $UMASKSAVE
umount "${SOURCE}"

echo "Setting permissions on /var/www"
chown -R root.48 ${SYSIMAGE}/var/www;
chmod -R u=rwX,g=rX,o-rwx ${SYSIMAGE}/var/www;

# Don't care if this fails.
# eject /tmp/cdrom || true
timeout 5 chvt 6
) 2>&1 | tee /dev/pts/0 | tee /dev/tty3
%end

%post --log=/var/log/post-chroot.log
(
timeout 5 chvt 3
# For the new binaries if they exist
export PATH=/opt/puppetlabs/bin:$PATH

# ln -s /opt/snowball-client/* /opt/snowball-client/current

# FIPS
use_fips=`awk -F "fips=" '{print $2}' /proc/cmdline | cut -f1 -d' '`

if [ "$use_fips" != "0" ]; then
  echo "Setting up grub for FIPS..."
  BOOTDEV=`findmnt -no uuid /boot`

  # In case you need a working fallback
  DEFAULT_KERNEL_INFO=`/sbin/grubby --default-kernel`
  DEFAULT_INITRD=`/sbin/grubby --info=${DEFAULT_KERNEL_INFO} | grep initrd | cut -f2 -d'='`
  DEFAULT_KERNEL_TITLE=`/sbin/grubby --info=${DEFAULT_KERNEL_INFO} | grep -m1 title | cut -f2 -d'='`
  /sbin/grubby --copy-default --make-default --args="boot=UUID=${BOOTDEV} fips=1" --add-kernel=`/sbin/grubby --default-kernel` --initrd=${DEFAULT_INITRD} --title="FIPS ${DEFAULT_KERNEL_TITLE}"
fi

# For the disk crypto
if [ -f "/etc/.cryptcreds" ]; then
  echo "Telling dracut to use encrypted disk..."
  echo 'install_items+="/etc/.cryptcreds"' >> /etc/dracut.conf
fi

depmod -a
for x in `ls -d /lib/modules/*`; do
  installed_kernel=`basename $x`
  dracut --add-drivers "nvme ena" -f "/boot/initramfs-${installed_kernel}.img" $installed_kernel
done

if [ -f /boot/grub2/grub.cfg ]; then
  sed -i 's/--class os/--class os --unrestricted/g' /boot/grub2/grub.cfg
fi

if [ -f /boot/efi/EFI/redhat/grub.cfg ]; then
  sed -i 's/--class os/--class os --unrestricted/g' /boot/efi/EFI/redhat/grub.cfg
fi

ostype=`facter operatingsystem`
rhversion=`facter operatingsystemrelease`
majrhversion=`facter operatingsystemmajrelease`
htype=`facter architecture`

# Define simp_filesystem.repo
frhbase_gpg_file=''
case "$ostype" in
  RedHat) frhbase_gpg_file='file:///var/www/yum/SIMP/GPGKEYS/RPM-GPG-KEY-redhat-release'
    ;;
  CentOS) frhbase_gpg_file="file:///var/www/yum/SIMP/GPGKEYS/RPM-GPG-KEY-CentOS-$majrhversion"
    ;;
  *) echo "No '[frhbase]' GPG Keys are known for ostype '${ostype}'."
    exit 1
    ;;
esac


if [ -d /var/www/yum/SIMP/$htype ]; then
  cd /var/www/yum/SIMP/$htype

  for file in ../noarch/*.rpm; do
    ln -s $file;
  done

  echo "Updating SIMP repo..."
  createrepo . >& /dev/null

  # some repos are specific to the environment
  flocal_gpg_files=()

  if [ -n "$frhbase_gpg_file" ]; then
    flocal_gpg_files+=("$frhbase_gpg_file")
  fi

  if [ -e /var/www/yum/SIMP-Dev/GPGKEYS/RPM-GPG-KEY-SIMP-Dev ]; then
    flocal_gpg_files+=('file:///var/www/yum/SIMP-Dev/GPGKEYS/RPM-GPG-KEY-SIMP-Dev')
  fi

  flocal_gpg_file_lines="$(IFS=$'\n'; echo "${flocal_gpg_files[*]}" | sed -e 's/^\([a-z]\)/    \1/g' -e '/^[[:space:]]*$/d')"

  cat << EOF >> /etc/yum.repos.d/simp_filesystem.repo
[flocal-$htype]
name=Local within the filesystem
baseurl=file:///var/www/yum/SIMP/$htype
enabled=1
gpgcheck=1
gpgkey=file:///var/www/yum/SIMP/GPGKEYS/RPM-GPG-KEY-puppet
    file:///var/www/yum/SIMP/GPGKEYS/RPM-GPG-KEY-puppetlabs
    file:///var/www/yum/SIMP/GPGKEYS/RPM-GPG-KEY-SIMP-6
    file:///var/www/yum/SIMP/GPGKEYS/RPM-GPG-KEY-SIMP
    file:///var/www/yum/SIMP/GPGKEYS/RPM-GPG-KEY-PGDG-96
    file:///var/www/yum/SIMP/GPGKEYS/RPM-GPG-KEY-EPEL-$majrhversion
$flocal_gpg_file_lines

EOF
fi

  cat << EOF >> /etc/yum.repos.d/simp_filesystem.repo
[frhbase]
name=$ostype $rhversion base repo
baseurl=file:///var/www/yum/$ostype/$rhversion/$htype
enabled=1
gpgcheck=1
gpgkey=${frhbase_gpg_file}
EOF

if [ "$ostype" == "CentOS" ]; then
  sed -i '/enabled=/d' /etc/yum.repos.d/CentOS-Base.repo;
  sed -i '/\[.*\]/ a\
enabled=0' /etc/yum.repos.d/CentOS-Base.repo;
fi

echo "Installing local repos..."
yum clean all;
yum -y --enablerepo=flocal-$htype --enablerepo=frhbase update;

# Install GPG keys packaged with the ISO
echo "Installing BDP rpm keys..."
rpm --import /var/www/yum/SIMP/GPGKEYS/RPM-GPG-KEY-puppet
rpm --import /var/www/yum/SIMP/GPGKEYS/RPM-GPG-KEY-puppetlabs
rpm --import /var/www/yum/SIMP/GPGKEYS/RPM-GPG-KEY-SIMP-6
rpm --import /var/www/yum/SIMP/GPGKEYS/RPM-GPG-KEY-SIMP
rpm --import /var/www/yum/SIMP/GPGKEYS/RPM-GPG-KEY-PGDG-96
rpm --import /var/www/yum/SIMP/GPGKEYS/RPM-GPG-KEY-EPEL-$majrhversion

if [ -n "$frhbase_gpg_file" ]; then
  rpm --import `echo $frhbase_gpg_file | sed 's/file:\/\///'`
fi

if [ -e /var/www/yum/SIMP-Dev/GPGKEYS/RPM-GPG-KEY-SIMP-Dev ]; then
  rpm --import /var/www/yum/SIMP-Dev/GPGKEYS/RPM-GPG-KEY-SIMP-Dev
fi

# Create 'simp' user
echo "Creating simp user and configuring security settings..."
pass_hash='$6$5SnplwrFxmHy4j/v$WgcZV1.W6/wQq1SJh/gnV7E5Tr1iIuJgdCFmhdlzHnCdWR927Q/Q4eKZXtFAVOY7eNRb3e30ezM5xbmP8G7t50'

groupadd -g 1777 simp >& /dev/null;
useradd -d /var/local/simp -g simp -m -p $pass_hash -s /bin/bash -u 1777 -K PASS_MAX_DAYS=90 -K PASS_MIN_DAYS=1 -K PASS_WARN_AGE=7 simp >& /dev/null;
usermod -aG wheel simp;

pam_mod="password     requisite     pam_pwquality.so try_first_pass retry=3 reject_username enforce_for_root\n"
for auth_file in password system; do
  # A double check to make sure we're not running this on a managed system...
  if [ -f /etc/pam.d/${auth_file}-auth ] && [ -z `grep 'Puppet' /etc/pam.d/${auth_file}-auth` ]; then
    # Remove the items that will double prompt us out of the box
    sed -i "/pam_\(pwquality\|cracklib\).so/d" /etc/pam.d/${auth_file}-auth
    # Add our cracklib line
    sed -i "s/\(password.*pam_unix.so.*\)/${pam_mod}\1/" /etc/pam.d/${auth_file}-auth
  fi
done

if [ ! -f /etc/security/pwquality.conf ]  || [[ -f /etc/security/pwquality.conf  &&  -z `grep  'Puppet' /etc/security/pwquality.conf` ]]; then
  cat <<EOF > /etc/security/pwquality.conf
difok = 4
minlen = 15
dcredit = -1
ucredit = -1
lcredit = -1
ocredit = -1
minclass = 3
maxrepeat = 2
maxclassrepeat = 3
maxsequence = 4
gecoscheck = 1
EOF
fi

chmod 0644 /etc/security/pwquality.conf

simp_opt=`awk -F "simp_opt=" '{print $2}' /proc/cmdline | cut -f1 -d' '`

#Runs a script on startup to retrieve openstack user-data and place it in whatever you specify $udlocation to be
if [ "$simp_opt" == "openstack" ]; then
  cat << EOF >> /etc/init.d/user-data
#!/bin/sh
udlocation="/var/simp/user-data"
udaddress="169.254.169.254"

case \$1 in
   start)
      echo "Retrieving user-data"
      mkdir -p '/var/simp'
      curl -k "https://\$udaddress/latest/user-data" > \$udlocation
      chmod 700 \$udlocation
      ;;
   restart)
      echo "Retrieving user-data"
      curl -k "https://\$udaddress/latest/user-data" > \$udlocation
      chmod 700 \$udlocation
      ;;
   status)
      if [ -f \$udlocation ]; then
        echo "\${udlocation} exists!"
      else
        echo "\${udlocation} does not exist..."
      fi
      ;;
  stop)
      echo "Nothing to do..."
      ;;
esac
EOF
   chmod 755 /etc/init.d/user-data
   ln -s /etc/init.d/user-data /etc/rc.d/rc3.d/S92user-data
   ln -s /etc/init.d/user-data /etc/rc.d/rc3.d/K92user-data
fi

# Added for bdp
echo "Installing BDP rpms..."
/bin/rpm -Uvh /var/www/yum/{{ bdp_version }}/rpms/bdp/bdp-lib*
/bin/rpm -Uvh /var/www/yum/{{ bdp_version }}/rpms/bdp/bdp-ansible*
/bin/rpm -Uvh /var/www/yum/{{ bdp_version }}/rpms/bdp/bdp-config*
/bin/rpm -Uvh /var/www/yum/{{ bdp_version }}/rpms/bdp/bdp-scripts*
/bin/rpm -Uvh /var/www/yum/{{ bdp_version }}/rpms/bdp/bdp-release*
/bin/yum install -y /var/www/yum/{{ bdp_version }}/rpms/ltac/*.rpm
/bin/rpm -Uvh /var/www/yum/{{ bdp_version }}/rpms/software/citadel-support-cli*
/bin/rpm -Uvh /var/www/yum/$ostype/$rhversion/$htype/Packages/tcl-8*
/bin/rpm -ivh /var/www/yum/$ostype/$rhversion/$htype/Packages/python-ldap*
/bin/rpm -Uvh /var/www/yum/$ostype/$rhversion/$htype/Packages/python-six*
/bin/rpm -Uvh /var/www/yum/$ostype/$rhversion/$htype/Packages/libpcap*
/bin/rpm -Uvh /var/www/yum/$ostype/$rhversion/$htype/Packages/nmap-ncat*
/bin/rpm -Uvh /var/www/yum/$ostype/$rhversion/$htype/Packages/PyYAML*
/bin/rpm -Uvh /var/www/yum/$ostype/$rhversion/$htype/Packages/python-ply*
/bin/rpm -Uvh /var/www/yum/$ostype/$rhversion/$htype/Packages/python-pycparser*
/bin/rpm -Uvh /var/www/yum/$ostype/$rhversion/$htype/Packages/python-cffi*
/bin/rpm -Uvh /var/www/yum/$ostype/$rhversion/$htype/Packages/python-enum34*
/bin/rpm -Uvh /var/www/yum/$ostype/$rhversion/$htype/Packages/python-idna*
/bin/rpm -Uvh /var/www/yum/$ostype/$rhversion/$htype/Packages/python-ipaddress*
/bin/rpm -Uvh /var/www/yum/$ostype/$rhversion/$htype/Packages/python2-pyasn1*
/bin/rpm -Uvh /var/www/yum/$ostype/$rhversion/$htype/Packages/python-backports*
/bin/rpm -Uvh /var/www/yum/$ostype/$rhversion/$htype/Packages/python-setuptools*
/bin/rpm -Uvh /var/www/yum/$ostype/$rhversion/$htype/Packages/python2-cryptography*
/bin/rpm -Uvh /var/www/yum/$ostype/$rhversion/$htype/Packages/python-babel*
/bin/rpm -Uvh /var/www/yum/{{ bdp_version }}/rpms/thirdparty/python-markupsafe*
/bin/rpm -Uvh /var/www/yum/$ostype/$rhversion/$htype/Packages/python-jinja2*
/bin/rpm -Uvh /var/www/yum/$ostype/$rhversion/$htype/Packages/python-httplib2*
/bin/rpm -Uvh /var/www/yum/{{ bdp_version }}/rpms/epel/python2-jmespath*
/bin/rpm -Uvh /var/www/yum/{{ bdp_version }}/rpms/thirdparty/python-paramiko*
/bin/rpm -Uvh /var/www/yum/{{ bdp_version }}/rpms/thirdparty/python-passlib*
/bin/rpm -Uvh /var/www/yum/{{ bdp_version }}/rpms/thirdparty/python-requests*
/bin/rpm -Uvh /var/www/yum/{{ bdp_version }}/rpms/thirdparty/python-ruamel.yaml*
/bin/rpm -Uvh /var/www/yum/{{ bdp_version }}/rpms/thirdparty/python3*
/bin/rpm -Uvh /var/www/yum/$ostype/$rhversion/$htype/Packages/sshpass*
/bin/rpm -Uvh /var/www/yum/$ostype/$rhversion/$htype/Packages/ansible*
/bin/rpm -Uvh /var/www/yum/$ostype/$rhversion/$htype/Packages/expect*
/bin/rpm -Uvh /var/www/yum/$ostype/$rhversion/$htype/Packages/pexpect*
echo "Importing BDP rpm keys..."
/bin/rpm --import /var/www/yum/{{ bdp_version }}/RDK-GPG-KEY.public
/bin/rpm --import /var/www/yum/SIMP/GPGKEYS/RPM-GPG-KEY-EPEL-7
/bin/rpm --import /var/www/yum/SIMP/GPGKEYS/RPM-GPG-KEY-EPEL
/bin/rpm --import /var/www/yum/SIMP/GPGKEYS/RPM-GPG-KEY-SIMP
/bin/rpm --import /var/www/yum/SIMP/GPGKEYS/RPM-GPG-KEY-SIMP-6
/bin/rpm --import /var/www/yum/SIMP/GPGKEYS/RPM-GPG-KEY-puppetlabs
/bin/rpm --import /var/www/yum/SIMP/GPGKEYS/RPM-GPG-KEY-redhat-release
/bin/rpm --import /var/www/yum/SIMP/GPGKEYS/RPM-GPG-KEY-redhat-legacy-release
/bin/rpm -Uvh /var/www/yum/SIMP/x86_64/rubygem-highline-1.6.11-5.el7.rpm
/bin/rpm -Uvh /var/www/yum/SIMP/x86_64/ruby-ldap-0.9.16-1.el7.rpm

# Added for bdp - setting permissions on the bdp repo
echo "Updating permissions on BDP repo..."
cd /var/www/yum && ln -s {{ bdp_version }} bdp
chown -R root.apache /var/www/yum/bdp
chmod -R g+rX /var/www/yum/bdp

# Added for bdp - setting permissions on the bdp-docs folder
echo "Updating permissions on BDP documentation..."
chown -R root.apache /var/www/html/bdp-docs
chmod -R u=rwX,g=rX /var/www/html/bdp-docs

# Added for bdp - correct named-chroot error
echo "Configuring services..."
mkdir -p /etc/systemd/system/named-chroot.service.d
cat << EOF >> /etc/systemd/system/named-chroot.service.d/exec-start-pre.conf
[Service]
ExecStartPre=
ExecStartPre=/usr/sbin/named-checkconf -t /var/named/chroot -z /etc/named.conf
EOF

# Added for bdp - Remove runpuppet systemd service timeout
mkdir -p /etc/systemd/system/runpuppet.service.d/
cat << EOF >> /etc/systemd/system/runpuppet.service.d/disable-timeout.conf
[Service]
Type=oneshot
TimeoutSec=0
EOF

grep nocloudinit /proc/cmdline > /dev/null
if [[ $? -ne 0 ]]; then
  echo "Enabling cloud-init"
else
  echo "Disabling cloud-init"
  /bin/systemctl disable --no-reload cloud-init.service
  /bin/systemctl disable --no-reload cloud-init-local.service
  /bin/systemctl disable --no-reload cloud-config.service
  /bin/systemctl disable --no-reload cloud-final.service
fi

# Added for bdp - adding git repos for tracking changes
echo "Initialising git repos..."
for i in /etc/bdp /var/bdp
do
  cd $i
  /usr/bin/git init
  /usr/bin/git add .
  /usr/bin/git commit -m "initial commit"
done

# create marker file that indicates a SIMP ISO install
mkdir -p /etc/simp
echo "Kickstarted from SIMP ISO" > /etc/simp/.iso_install
echo "All done."
sleep 5
timeout 5 chvt 6
) 2>&1 | tee /dev/pts/0 | tee /dev/tty3
%end

