# Determine what drives to use based on inventory file

#version=DEVEL
# System authorization information
auth --enableshadow --passalgo=sha512
# Use CDROM installation media
cdrom
repo --name="Extras" --baseurl=file:///mnt/install/repo/Extras
repo --name="AppStream" --baseurl=file:///run/install/repo/AppStream
#repo --name="BaseOS" --baseurl=file:///run/install/repo/BaseOS
text
# Run the Setup Agent on first boot
firstboot --disable
# Keyboard layouts
keyboard --vckeymap=us --xlayouts='us'
# System language
lang en_US.UTF-8
# Disable Firewalld
firewall --enabled
eula --agreed
#Reboot when its all over
reboot

%include /tmp/network.ks

# Root password
rootpw --iscrypted $6$2E5QeQvtoRNARowh$WtJh9TZXPA/IY19Fjefe1KwVapprVfwMMSucfo8vgRnT7vvt339YyCXmTR4aYB5E4Jba6wFbAdR5Z9okCOew3.
# Assessor User/Password
user --name=assessor --groups=wheel --iscrypted --password=$6$2E5QeQvtoRNARowh$WtJh9TZXPA/IY19Fjefe1KwVapprVfwMMSucfo8vgRnT7vvt339YyCXmTR4aYB5E4Jba6wFbAdR5Z9okCOew3. --uid=1100 --gid=1100 --shell=/usr/bin/bash
# System services
services --disabled="chronyd"
# System timezone
timezone UTC --isUtc --ntpservers={{ ansible_controller_hostname }}

%pre --interpreter=/usr/bin/bash
exec < /dev/tty6 > /dev/tty6 2> /dev/tty6
chvt 6
while true; do
  clear
  echo "=========================="
  echo "DIP Sensor Configurator"
  echo "=========================="
  echo ""
  echo "=========================="
  read -p 'Enter sensor hostname: ' hostnamevar
  echo ""
  echo "=========================="
  echo "Select management interface:"
  echo "=========================="
  ip addr | grep -i broadcast | awk '{ print $2 }' > /tmp/interfaces
  sed -i 's/:/\ /g' /tmp/interfaces
  select interface in $(</tmp/interfaces);
  do test -n "$interface" && break;
    echo ">>>> Invalid Selection";
  done
  echo ""
  echo "=========================="
  read -p 'Enter sensor MPNet ip address: ' ipaddr
  echo ""
  echo "=========================="
  read -p 'Enter netmask address (ie: 255.255.255.0): ' netmask
  echo ""
  echo "=========================="
  read -p 'Enter MPNet gateway address: ' gateway
  echo ""
  echo "=========================="
  read -p 'Enter controller ip address: ' controller_ip
  echo ""
  echo "=========================="
  echo "         Summary          "
  echo "=========================="
  echo "Hostname:      $hostnamevar"
  echo "Ip Address:    $ipaddr"
  echo "Netmask:       $netmask"
  echo "Gateway:       $gateway"
  echo "Controller Ip: $controller_ip"
  echo ""
  read -p "Confirm the summary above is correct before continuing (Y/N): " confirm
  if [[ $confirm =~ ^[Yy]$ ]]; then
    break
  fi
done

sed -i "/$interface/d" /tmp/interfaces
echo $interface > /tmp/interface
echo "network --bootproto static --device $interface --ip $ipaddr --netmask $netmask --gateway $gateway --nameserver=$controller_ip --noipv6" >/tmp/network.ks

# Set FQDN
if [[ "$hostnamevar" == *.{{ kit_domain }} ]]; then
    fqdn="$hostnamevar"
else
    fqdn="$hostnamevar.{{ kit_domain }}"
fi
echo "network --hostname=$fqdn" >>/tmp/network.ks

if [ -d /sys/firmware/efi ] ; then
cat <<EOF > /tmp/boot_layout
part /boot/efi --fstype=efi --grow --maxsize=200 --size=20 --ondrive=sda
EOF
else
cat <<EOF > /tmp/boot_layout
part biosboot --fstype=biosboot --size=1 --ondisk=sda
EOF
fi

cat <<EOF > /tmp/partition_layout
# Partition clearing information
zerombr
# Partitioning scheme
bootloader --append="rhgb quiet crashkernel=auto" --location=mbr --boot-drive=sda --iscrypted --password=grub.pbkdf2.sha512.10000.23C682D3DE1136612AC0B3C369A9B975A5D46A002BC3F450AB728722925654073EE29078AE1D72449343DDA75D39987090B6D1738E71B9C331D8FF6AD35C75A0.436922F8BF0EC820FA8A788C5BF3D5FBF6D694142E7DFD8637CBD519D91B250CBF9464FF998010941E7996CE8744C86BBDA7DCB9435A534ADC45A8A530FAC697
clearpart --all
part /boot --fstype="xfs" --size=500 --ondrive=sda
part pv.01 --fstype="lvmpv" --size=1 --grow --ondisk=sda
volgroup vg_root pv.01
logvol / --fstype="xfs" --name=root --vgname=vg_root --grow --percent=20
logvol /tmp --fstype="xfs" --name=tmp --vgname=vg_root --grow --percent=5
logvol /home --fstype="xfs" --name=home --vgname=vg_root --grow --percent=10
logvol /var --fstype="xfs" --name=var --vgname=vg_root --grow --percent=35
logvol /var/log --fstype="xfs" --name=log --vgname=vg_root --grow --percent=20
logvol /var/log/audit --fstype="xfs" --name=audit --vgname=vg_root --grow --percent=3

part pv.02 --fstype="lvmpv" --size=1 --grow --ondisk=sdb
volgroup vg_data pv.02
logvol /data --fstype="xfs" --size=1 --name=data --vgname=vg_data --grow

EOF

chvt 1
exec < /dev/tty1 > /dev/tty1 2> /dev/tty1

%end

%include /tmp/boot_layout
%include /tmp/partition_layout

%packages --ignoremissing
@^minimal-environment
chrony
network-scripts
openvpn
bash-completion
%end

%post --log=/root/ks-post.log
/usr/sbin/grubby --update-kernel=ALL --args=console=ttyS0

ip addr | grep -i broadcast | awk '{ print $2 }' > /tmp/interfaces
sed -i 's/:/\ /g' /tmp/interfaces
interfaces=`cat /tmp/interfaces`

for i in $interfaces;
do
ip=`ip addr show $i | grep "inet\b"`

if [ -z "$ip" ]; then
echo "$i is monitoring interface"
cat <<EOF > /etc/sysconfig/network-scripts/ifcfg-$i
TYPE=Ethernet
PROXY_METHOD=none
BROWSER_ONLY=no
BOOTPROTO=none
DEFROUTE=yes
IPV4_FAILURE_FATAL=no
IPV6INIT=no
IPV6_AUTOCONF=yes
IPV6_DEFROUTE=yes
IPV6_FAILURE_FATAL=no
IPV6_ADDR_GEN_MODE=stable-privacy
NAME=$i
DEVICE=$i
ONBOOT=yes
PEERDNS=yes
PEERROUTES=yes
USERS=root
NM_CONTROLLED=no
ETHTOOL_OPTS="-G ${DEVICE} rx 4096; -K ${DEVICE} rx off; -K ${DEVICE} tx off; -K ${DEVICE} sg off; -K ${DEVICE} tso off; -K ${DEVICE} ufo off; -K ${DEVICE} gso off; -K ${DEVICE} gro off; -K ${DEVICE} lro off"
EOF
else
# Add DNS search domain
echo "DOMAIN={{ kit_domain }}" >> /etc/sysconfig/network-scripts/ifcfg-$i
fi
done

# SELinux for data dir
chcon -R -t container_file_t /data

# Disable SSHD DNS lookups
echo "UseDNS no" >> /etc/ssh/sshd_config

systemctl enable chronyd
sed -i 's/^pool.*/server {{ ansible_controller_hostname }} iburst/g' /etc/chrony.conf
mkdir /root/.ssh
echo "{{ controller_public_key }}" > /root/.ssh/authorized_keys
chmod 0600 /root/.ssh/authorized_keys
restorecon -R /root/.ssh/

cat <<EOF > /etc/yum.repos.d/offline.repo
[tfplenum-BaseOS-offline-repo]
baseurl=http://{{ ansible_controller_hostname }}/offlinerepo/tfplenum/BaseOS
enabled=1
gpgcheck=0
name=tfplenum-baseos-offline-repo

[tfplenum-AppStream-offline-repo]
baseurl=http://{{ ansible_controller_hostname }}/offlinerepo/tfplenum/AppStream
enabled=1
gpgcheck=0
name=tfplenum-appstream-offline-repo

[tfplenum-Extras-offline-repo]
baseurl=http://{{ ansible_controller_hostname }}/offlinerepo/tfplenum/Extras
enabled=1
gpgcheck=0
name=tfplenum-extras-offline-repo
EOF
echo "{{ openvpn_service }}" > /usr/lib/systemd/system/openvpn-client.service
echo "{{ vpnsetup }}" > /root/vpnsetup.sh
echo "{{ vpndisable }}" > /root/vpndisable.sh
chmod 755 /root/vpnsetup.sh /root/vpndisable.sh
%end
