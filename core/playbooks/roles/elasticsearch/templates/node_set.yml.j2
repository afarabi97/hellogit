{% macro node_type(is_master, is_data, is_ingest, is_ml) %}
node.master: {{ is_master | string }}
node.data: {{ is_data | string }}
node.ingest: {{ is_ingest | string }}
node.ml: {{ is_ml | string }}
{%- endmacro %}

{% macro containers(memory, cpu, java_memory) -%}
containers:
- name: elasticsearch
  # specify resource limits and requests
  resources:
    requests:
      memory: {{ memory | string }}Gi
      cpu: {{ cpu | string }}
  env:
  - name: ES_JAVA_OPTS
    value: "-Xms{{ java_memory | string }}g -Xmx{{ java_memory | string }}g"
  - name: NODE_NAME
    valueFrom:
      fieldRef:
        fieldPath: spec.nodeName
{%- endmacro %}

{% macro volumes_empty_dir() %}
volumes:
- name: elasticsearch-data
  emptyDir: {}
{% endmacro %}

{% macro volumes_host_path(path) %}
volumes:
- name: elasticsearch-data
  hostPath:
    path: {{ path }}
    type: DirectoryOrCreate
{% endmacro %}

{% macro volume_claim_templates() %}
volumeClaimTemplates:
- metadata:
    name: elasticsearch-data
  spec:
    accessModes:
    - ReadWriteOnce
    storageClassName: elastic-disks
    resources:
      requests:
        storage: 1Gi
{% endmacro %}

{% macro node_set(name, count, config, spec, elasticsearch_plugins, enable_ml, storage) %}
- name: {{ name }}
  count: {{ count | string }}
  config:
{{ config | indent(width=4,first=True) }}
    node.max_local_storage_nodes: "25"
    xpack.monitoring.collection.enabled: "true"
    node.attr.node_name: ${NODE_NAME}
    cluster.routing.allocation.awareness.attributes: node_name
    script.cache.max_size: "500"
    script.max_compilations_rate: "256/1m"
    xpack.ml.enabled: {{ enable_ml | string }}
{% if storage %}{{ storage | indent(width=2,first=True) }}{% endif %}
  podTemplate:
    metadata:
      labels:
        # additional labels for pods
        component: elasticsearch
    spec:
      initContainers:
      - name: sysctl
        securityContext:
          privileged: true
        command: ['sh', '-c', 'sysctl -w vm.max_map_count=262144']
      - name: install-plugins
        command:
        - sh
        - -c
        - |
          set -o pipefail
          TEMPORARY_FILE=$(mktemp)
          bin/elasticsearch-plugin install --batch {{ ' '.join(elasticsearch_plugins) }} 2>&1 | tee $TEMPORARY_FILE
          RETURN_CODE=$?
          grep -q "already exists" $TEMPORARY_FILE
          ALREADY_EXISTS=$?
          if [[ $RETURN_CODE -eq 0 || $ALREADY_EXISTS -eq 0 ]]; then
            echo "Success: RC: $RETURN_CODE"
            exit 0
          else
            echo "Failure: RC: $RETURN_CODE"
            exit 1
          fi
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
      - name: elastic-internal-init-keystore
        imagePullPolicy: IfNotPresent
        securityContext:
          privileged: false
        command:
        - /usr/bin/env
        - bash
        - -c
        - "#!/usr/bin/env bash\n\nset -eux\n\necho \"Initializing keystore.\"\n\n# create
          a keystore in the default data path\necho N | /usr/share/elasticsearch/bin/elasticsearch-keystore
          create\n\n# add all existing secret entries into it\nfor filename in  /mnt/elastic-internal/secure-settings/*;
          do\n\t[[ -e \"$filename\" ]] || continue # glob does not match\n\tkey=$(basename
          \"$filename\")\n\techo \"Adding \"$key\" to the keystore.\"\n\techo y | /usr/share/elasticsearch/bin/elasticsearch-keystore
          add-file \"$key\" \"$filename\"\ndone\n\necho \"Keystore initialization successful.\"\n"
        volumeMounts:
        - mountPath: /mnt/elastic-internal/secure-settings
          name: elastic-internal-secure-settings
          readOnly: true
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: role
                operator: In
                values:
                - server
{{ spec | indent(width=6,first=True) }}
{% endmacro %}

{% set config = None %}
{% set spec = None %}
{% set storage = None %}

{% macro master(mdi, count, memory, cpu, java_memory, elasticsearch_plugins, enable_ml) %}
  {% if mdi %}
    {% set config = node_type(true, true, true, false) %}
  {% else %}
    {% set config = node_type(true, false, false, false) %}
  {% endif %}
    {% set storage = volume_claim_templates() %}
    {% set spec = containers(memory, cpu, java_memory) %}
{{ node_set('master', count, config, spec, elasticsearch_plugins, enable_ml, storage) }}
{% endmacro %}

{% macro data(count, memory, cpu, java_memory, elasticsearch_plugins, enable_ml) %}
  {% set config = node_type(false, true, true, false) %}
  {% set storage = volume_claim_templates() %}
  {% set spec = containers(memory, cpu, java_memory) %}
{{ node_set('data', count, config, spec, elasticsearch_plugins, enable_ml, storage) }}
{% endmacro %}

{% macro coordinating(count, memory, cpu, java_memory, elasticsearch_plugins, enable_ml) %}
  {% set config = node_type(false, false, true, false) %}
  {% set spec = volumes_empty_dir() + containers(memory, cpu, java_memory) %}
{{ node_set('coordinating', count, config, spec, elasticsearch_plugins, enable_ml, storage) }}
{% endmacro %}

{% macro ml(count, memory, cpu, java_memory, elasticsearch_plugins, enable_ml) %}
  {% set config = node_type(false, false, false, true) %}
  {% set spec = volumes_empty_dir() + containers(memory, cpu, java_memory) %}
{{ node_set('ml', count, config, spec, elasticsearch_plugins, enable_ml, storage) }}
{% endmacro %}
