{% set data_node = false %}

{% macro node_type(is_master, is_data, is_ingest, is_ml) %}
node.roles:
{% if is_master %}
  - master
{% endif %}
{% if is_data %}
  - data
{% endif %}
{% if is_ingest %}
  - ingest
{% endif %}
{% if is_ml %}
  - ml
{% endif %}
{% if not is_master and not is_data and not is_ingest and not is_ml %}
  []
{% endif %}
{%- endmacro %}

{% macro containers(memory, cpu, java_memory) -%}
containers:
- name: elasticsearch
  # specify resource limits and requests
  resources:
    requests:
      memory: {{ memory | string }}Gi
      cpu: {{ cpu | string }}
  env:
  - name: ES_JAVA_OPTS
    value: "-Xms{{ java_memory | string }}g -Xmx{{ java_memory | string }}g"
  - name: NODE_NAME
    valueFrom:
      fieldRef:
        fieldPath: spec.nodeName
  volumeMounts:
  - name: kibana-saml
    mountPath: /usr/share/elasticsearch/config/kibana-saml-certs/
  - name: sso-idp-metadata
    mountPath: /usr/share/elasticsearch/config/sso-idp-metadata
{% endmacro %}

{% macro elastic_empty_dir() %}
- name: elasticsearch-data
  emptyDir: {}
{% endmacro %}

{% macro volumes_host_path(path) %}
- name: elasticsearch-data
  hostPath:
    path: {{ path }}
    type: DirectoryOrCreate
{% endmacro %}

{% macro volume_claim_templates() %}
volumeClaimTemplates:
- metadata:
    name: elasticsearch-data
  spec:
    accessModes:
    - ReadWriteOnce
    storageClassName: elastic-disks
    resources:
      requests:
        storage: 1Gi
{% endmacro %}

{% macro saml_volumes() %}
- name: kibana-saml
  secret:
    secretName: kibana-saml
    defaultMode: 0444
- name: sso-idp-metadata
  secret:
    secretName: sso-idp-metadata
    defaultMode: 0444
{% endmacro %}

{% macro base_volumes() %}
volumes:
- name: elastic-plugins
  hostPath:
    path: /data/elastic_plugins
    type: DirectoryOrCreate
{% endmacro %}


{% macro node_set(name, kit_domain, count, config, spec, elasticsearch_plugins, enable_ml, storage, ansible_controller_hostname, data_node) %}
- name: {{ name }}
  count: {{ count | string }}
  config:
{{ config | indent(width=4,first=True) }}
    node.max_local_storage_nodes: "25"
    xpack.monitoring.collection.enabled: "true"
    xpack.monitoring.collection.interval: 30s
    node.attr.node_name: ${NODE_NAME}
{% if data_node %}
    node.attr.molochtype: "hot"
{% endif %}
    cluster.routing.allocation.awareness.attributes: node_name
    script.cache.max_size: "500"
    script.max_compilations_rate: "1024/1m"
    thread_pool.write.queue_size: 1000
    xpack.ml.enabled: {{ enable_ml | string }}
    xpack.security.authc.token.enabled: true
    xpack.security.authc.realms.saml.saml1.order: 2
    xpack.security.authc.realms.saml.saml1.attributes.principal: "uid"
    xpack.security.authc.realms.saml.saml1.attributes.name: "displayName"
    xpack.security.authc.realms.saml.saml1.attributes.mail: "email"
    xpack.security.authc.realms.saml.saml1.attributes.groups: "roles"
    xpack.security.authc.realms.saml.saml1.idp.metadata.path: "/usr/share/elasticsearch/config/sso-idp-metadata/idp.metadata.xml"
    xpack.security.authc.realms.saml.saml1.ssl.verification_mode: none
    xpack.security.authc.realms.saml.saml1.idp.use_single_logout: true
    xpack.security.authc.realms.saml.saml1.idp.entity_id: "https://{{ ansible_controller_hostname }}/auth/realms/CVAH-SSO"
    xpack.security.authc.realms.saml.saml1.sp.entity_id: "https://kibana.{{ kit_domain }}/"
    xpack.security.authc.realms.saml.saml1.sp.acs: "https://kibana.{{ kit_domain }}/api/security/v1/saml"
    xpack.security.authc.realms.saml.saml1.sp.logout: "https://kibana.{{ kit_domain }}/logout"
    xpack.security.authc.realms.saml.saml1.signing.certificate: /usr/share/elasticsearch/config/kibana-saml-certs/tls.crt
    xpack.security.authc.realms.saml.saml1.signing.key: /usr/share/elasticsearch/config/kibana-saml-certs/tls.key
    xpack.security.authc.realms.saml.saml1.encryption.certificate: /usr/share/elasticsearch/config/kibana-saml-certs/tls.crt
    xpack.security.authc.realms.saml.saml1.encryption.key: /usr/share/elasticsearch/config/kibana-saml-certs/tls.key
    xpack.security.authc.realms.saml.saml1.signing.saml_messages: "*"
{% if storage %}{{ storage | indent(width=2,first=True) }}{% endif %}
  podTemplate:
    metadata:
      labels:
        # additional labels for pods
        component: elasticsearch
    spec:
      initContainers:
      - name: sysctl
        securityContext:
          privileged: true
        command: ['sh', '-c', 'sysctl -w vm.max_map_count=262144']
      - name: install-plugins
        command:
        - sh
        - -c
        - |
          set -o pipefail
          TEMPORARY_FILE=$(mktemp)
          bin/elasticsearch-plugin install --batch {{ ' '.join(elasticsearch_plugins) }} 2>&1 | tee $TEMPORARY_FILE
          RETURN_CODE=$?
          grep -q "already exists" $TEMPORARY_FILE
          ALREADY_EXISTS=$?
          if [[ $RETURN_CODE -eq 0 || $ALREADY_EXISTS -eq 0 ]]; then
            echo "Success: RC: $RETURN_CODE"
            exit 0
          else
            echo "Failure: RC: $RETURN_CODE"
            exit 1
          fi
        volumeMounts:
        - mountPath: /tmp/plugins
          name: elastic-plugins
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: role
                operator: In
                values:
                - server
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: ScheduleAnyway
          labelSelector:
            matchLabels:
              elasticsearch.k8s.elastic.co/statefulset-name: "tfplenum-es-{{ name }}"
{{ spec | indent(width=6,first=True) }}
{% endmacro %}

{% set config = None %}
{% set spec = None %}
{% set storage = None %}

{% macro master(kit_domain, count, memory, cpu, java_memory, elasticsearch_plugins, enable_ml, ansible_controller_hostname) %}
  {% set config = node_type(true, false, false, false) %}
  {% set storage = volume_claim_templates() %}
  {% set spec = containers(memory, cpu, java_memory) + base_volumes() + saml_volumes() + elastic_empty_dir() %}
{{ node_set('master', kit_domain, count, config, spec, elasticsearch_plugins, enable_ml, storage, ansible_controller_hostname, data_node) }}
{% endmacro %}

{% macro data(kit_domain, count, memory, cpu, java_memory, elasticsearch_plugins, enable_ml, ansible_controller_hostname, kit_size) %}
  {% if kit_size == 4 %}
  {% set config = node_type(false, true, false, false) %}
  {% else %}
  {% set config = node_type(false, true, true, false) %}
  {% endif %}
  {% set storage = volume_claim_templates() %}
  {% set spec = containers(memory, cpu, java_memory) + base_volumes() + saml_volumes() %}
  {% set data_node = true %}
{{ node_set('data', kit_domain, count, config, spec, elasticsearch_plugins, enable_ml, storage, ansible_controller_hostname, data_node) }}
{% endmacro %}

{% macro ingest(kit_domain, count, memory, cpu, java_memory, elasticsearch_plugins, enable_ml, ansible_controller_hostname) %}
  {% set config = node_type(false, false, true, false) %}
  {% set spec =  containers(memory, cpu, java_memory) + base_volumes() + saml_volumes() %}
{{ node_set('ingest', kit_domain, count, config, spec, elasticsearch_plugins, enable_ml, storage, ansible_controller_hostname, data_node) }}
{% endmacro %}

{% macro coordinating(kit_domain, count, memory, cpu, java_memory, elasticsearch_plugins, enable_ml, ansible_controller_hostname) %}
  {% set config = node_type(false, false, false, false) %}
  {% set spec =  containers(memory, cpu, java_memory) + base_volumes() + saml_volumes() + elastic_empty_dir() %}
{{ node_set('coordinating', kit_domain, count, config, spec, elasticsearch_plugins, enable_ml, storage, ansible_controller_hostname, data_node) }}
{% endmacro %}

{% macro ml(kit_domain, count, memory, cpu, java_memory, elasticsearch_plugins, enable_ml, ansible_controller_hostname) %}
  {% set config = node_type(false, false, false, true) %}
  {% set spec =  containers(memory, cpu, java_memory) + base_volumes() + saml_volumes() + elastic_empty_dir() %}
{{ node_set('ml', kit_domain, count, config, spec, elasticsearch_plugins, enable_ml, storage, ansible_controller_hostname, data_node) }}
{% endmacro %}

{% macro gip_coordinating(kit_domain, count, memory, cpu, java_memory, elasticsearch_plugins, ansible_controller_hostname) %}
  {%- set config = gip_node_type(false, false, false, false) %}
  {%- set spec = containers(memory, cpu, java_memory) + base_volumes() + saml_volumes() + elastic_empty_dir() -%}
  {{- node_set('coordinating', kit_domain, count, config, spec, elasticsearch_plugins, ansible_controller_hostname, data_node) }}
{% endmacro %}

{% macro gip_ml(kit_domain, count, memory, cpu, java_memory, elasticsearch_plugins, ansible_controller_hostname) %}
  {%- set config = gip_node_type(false, false, false, true) + gip_machine_learning(true) %}
  {%- set spec = containers(memory, cpu, java_memory) + base_volumes() + saml_volumes() + elastic_empty_dir() -%}
  {{- node_set('ml', kit_domain, count, config, spec, elasticsearch_plugins, ansible_controller_hostname, data_node) }}
{% endmacro %}
