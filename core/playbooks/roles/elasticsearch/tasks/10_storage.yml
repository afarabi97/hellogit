######################################################
########## Setup Elasticsearch Storage ###############
######################################################
---

- name: Wait for ES Data Pods to terminate
  shell: |
    while [ $(kubectl get pods | grep es-data | awk '{ print $1 }' | wc -l) != '0' ]; do
      echo -n .;
      sleep 1;
    done;
    sleep 5;
  when: inventory_hostname in groups['master-server']

- name: Install lsof
  yum:
    name: lsof
    state: present

- name: Check if {{ es_data_path }}
  stat:
    path: "{{ es_data_path }}"
  register: es_data_dir

- name: Get all processes using {{ es_data_path }}
  shell: |
    /usr/sbin/lsof +D {{ es_data_path }} | awk '{ print $2 }' | grep -v PID | tr '\n' ' '
  register: process_list
  ignore_errors: yes
  when: es_data_dir.stat.exists

- name: Kill processes using {{ es_data_path }}
  shell: |
    kill -9 {{ process_list.stdout }}
  when: es_data_dir.stat.exists and process_list is defined and process_list.stdout != ''

- name: Unmount the drive if it was already mounted
  mount:
    path: "{{ es_data_path }}"
    src: "/dev/mapper/{{ vg_name }}-{{ elasticsearch_lvm }}"
    fstype: xfs
    state: "unmounted"

- name: Remove LVMs
  lvol:
    vg: "{{ vg_name }}"
    lv: "{{ elasticsearch_lvm }}"
    state: "absent"
    force: yes

- name: Remove Data Volume Group
  lvg:
    vg: "{{ vg_name }}"
    pvs: "{{ es_data_drive_list }}"
    state: "absent"
    force: yes

- name: Wipe data drive
  shell: |
    /usr/sbin/wipefs -a {{ item }}
  with_items:
    - "{{ es_data_drive_list }}"

- name: Create data volume group volume
  lvg:
    vg: "{{ vg_name }}"
    pvs: "{{ es_data_drive_list }}"

- name: Create lvm
  lvol:
    vg: "{{ vg_name }}"
    lv: "{{ elasticsearch_lvm }}"
    size: 100%FREE

- name: Check if {{ es_data_path }} again
  stat:
    path: "{{ es_data_path }}"
  register: es_data_dir

- name: Check if {{ es_data_path }} is mounted
  shell: |
    /usr/bin/mountpoint -q {{ es_data_path }}
  register: is_mounted
  ignore_errors: yes
  changed_when: "is_mounted.rc == 0"
  when: es_data_dir.stat.exists

# Make sure systemd doesnt remount the filesystem before formatting
- name: Unmount the drive if it was already mounted
  mount:
    path: "{{ es_data_path }}"
    src: "/dev/mapper/{{ vg_name }}-{{ elasticsearch_lvm }}"
    fstype: xfs
    state: "unmounted"
  when: es_data_dir.stat.exists and is_mounted is defined and is_mounted.changed

- name: Format Data Drive
  filesystem:
    fstype: xfs
    dev: "/dev/mapper/{{ vg_name }}-{{ elasticsearch_lvm }}"
    force: yes

- name: Mount data lvm
  mount:
    name: "{{ es_data_path }}"
    src: /dev/mapper/{{ vg_name }}-{{ elasticsearch_lvm }}
    fstype: xfs
    state: mounted

...
