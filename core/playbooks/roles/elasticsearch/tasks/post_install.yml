---

- name: Wait for Elasticsearch to be ready
  import_role:
    name: kubernetes/common
    tasks_from: kube_wait
  vars:
    type: "elasticsearch"
    namespace: "default"
    resource_name: "tfplenum"
    label: ""

- name: Get ES Password
  shell: |
    set -o pipefail
    kubectl get secret tfplenum-es-elastic-user -o=jsonpath='{.data.elastic}' | base64 --decode
  register: es_password
  changed_when: es_password.rc == 0
  tags:
    - load-ml

- name: Check Elasticsearch endpoint is ready
  uri:
    url: "{{ elastic_url }}"
    return_content: yes
    validate_certs: no
    user: "{{ default_elastic_user }}"
    password: "{{ es_password.stdout }}"
    force_basic_auth: yes
  register: results_elastic
  until: (results_elastic.status == 200)
  retries: 60
  delay: 5

- name: Check ES License
  uri:
    url: "{{ elastic_url }}/_license"
    return_content: yes
    validate_certs: no
    user: "{{ default_elastic_user }}"
    password: "{{ es_password.stdout }}"
    force_basic_auth: yes
  register: results
  until: results.status == 200 and results.json.license.status == 'active'
  retries: 60
  delay: 5
  tags:
    - load-ml

- name: Create roles # noqa no-jinja-nesting
  uri:
    method: POST
    url: "{{ elastic_url }}/_security/role/{{ item }}"
    validate_certs: no
    user: "{{ default_elastic_user }}"
    password: "{{ es_password.stdout }}"
    force_basic_auth: yes
    body_format: json
    body: "{{ lookup('file', 'files/roles/{{ item }}.json') }}"
    status_code: 200, 201
  with_items:
    - logstash_writer
    - logstash_monitor_writer
    - read_only

- name: Set Logstash User Password
  set_fact:
    logstash_password: "{{ lookup('password', '/dev/null chars=ascii_letters,digits') }}"

- name: Set Logstash Monitor User Password
  set_fact:
    logstash_monitor_password: "{{ lookup('password', '/dev/null chars=ascii_letters,digits') }}"

- name: Debug - Logstash Password
  debug:
    msg: "{{ logstash_password }}"

- name: Debug - Logstash Monitor Password
  debug:
    msg: "{{ logstash_monitor_password }}"

- name: Create logstash user secret
  shell: |
    kubectl create secret generic {{ item.secret }} --from-literal=username={{ item.user }} --from-literal=password={{ item.password }}
  register: results
  changed_when: results.rc == 0
  with_items:
    - { secret: tfplenum-logstash-user, user: "logstash_internal", password: "{{ logstash_password }}" }
    - { secret: tfplenum-logstash-monitor-user, user: "logstash_monitor", password: "{{ logstash_monitor_password }}" }

- name: Create users # noqa no-jinja-nesting
  uri:
    method: POST
    url: "{{ elastic_url }}/_security/user/{{ item }}"
    validate_certs: no
    user: "{{ default_elastic_user }}"
    password: "{{ es_password.stdout }}"
    force_basic_auth: yes
    body_format: json
    body: "{{ lookup('template', 'templates/users/{{ item }}.json.j2') }}"
    status_code: 200, 201
  with_items:
    - logstash_internal
    - logstash_monitor

- name: Load Index Policies
  uri:
    url: "{{ elastic_url }}/_ilm/policy/{{ item }}"
    method: PUT
    validate_certs: no
    user: "{{ default_elastic_user }}"
    password: "{{ es_password.stdout }}"
    force_basic_auth: yes
    body_format: json
    body: "{{ lookup('template', 'templates/policies/default.json.j2') }}"
    status_code: 200, 201
  with_items:
    - filebeat-suricata
    - filebeat-misp
    - filebeat-zeek
    - filebeat-netflow
  register: policy_results
  until: policy_results.status == 200
  retries: 10
  delay: 5

- name: Load Deploy into controller mongo
  uri:
    method: GET
    url: "https://{{ ansible_controller_hostname }}/api/tools/elastic/deploy?override=1"
    validate_certs: no
    status_code: 200, 201
    headers:
      Authorization: "Bearer {{ hostvars['localhost']['admin_api_key'] }}"

- name: Load SAML Role Mappings # noqa no-jinja-nesting
  uri:
    url: "{{ elastic_url }}/_security/role_mapping/saml1-{{ item }}"
    method: PUT
    validate_certs: no
    user: "{{ default_elastic_user }}"
    password: "{{ es_password.stdout }}"
    force_basic_auth: yes
    body_format: json
    body: "{{ lookup('file', 'files/role-mappings/{{ item }}.json') }}"
    status_code: 200, 201
  with_items:
    - super_user
    - read_only
    - kibana_admin

...
