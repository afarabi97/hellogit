---

- name: Create install directory
  file:
    mode: u+rw,g+rw
    path: "{{ elastic_dir }}"
    state: directory

- name: Copy License
  copy:
    src: "files/license.yml"
    dest: "{{ elastic_dir }}/license.yml"
    mode: u+rw,g+rw

- name: Create plugin list
  set_fact:
    plugin_list: "{{ elasticsearch_plugins | map('regex_replace', '(^)', '\\1file:///tmp/plugins/') | list }}"

- import_tasks: build_all_in_one.yml

- name: Create empty node set list
  set_fact:
    node_sets: []

- name: Append master node to node sets
  set_fact:
    node_sets: "{{ node_sets + [node_set] }}"
  vars:
    node_set:
      name: master
      count: "{{ master_count }}"
      node_roles: ["master", "data", "ingest", "ml"]
      es_java_opts: "-Xms{{ master_java_memory }}g -Xmx{{ master_java_memory }}g"
      min_memory: "{{ master_memory }}"
      min_cpu: "{{ master_num_procs  }}"
  when: mdil

- name: Append master node to node sets
  set_fact:
    node_sets: "{{ node_sets + [node_set] }}"
  vars:
    node_set:
      name: master
      count: "{{ master_count }}"
      node_roles: ["master"]
      es_java_opts: "-Xms{{ master_java_memory }}g -Xmx{{ master_java_memory }}g"
      min_memory: "{{ master_memory }}"
      min_cpu: "{{ master_num_procs  }}"
  when: not mdil

- name: Append data node to node sets
  set_fact:
    node_sets: "{{ node_sets + [node_set] }}"
  vars:
    node_set:
      name: data
      count: "{{ data_count }}"
      node_roles: ["data", "ingest"]
      es_java_opts: "-Xms{{ data_java_memory }}g -Xmx{{ data_java_memory }}g"
      min_memory: "{{ data_memory }}"
      min_cpu: "{{ data_num_procs  }}"
  when: not mdil and kit_size != 4

- name: Append data node to node sets
  set_fact:
    node_sets: "{{ node_sets + [node_set] }}"
  vars:
    node_set:
      name: data
      count: "{{ data_count }}"
      node_roles: ["data"]
      es_java_opts: "-Xms{{ data_java_memory }}g -Xmx{{ data_java_memory }}g"
      min_memory: "{{ data_memory }}"
      min_cpu: "{{ data_num_procs  }}"
  when: not mdil and kit_size == 4

- name: Append ingest node to node sets
  set_fact:
    node_sets: "{{ node_sets + [node_set] }}"
  vars:
    node_set:
      name: ingest
      count: "{{ ingest_count }}"
      node_roles: ["ingest"]
      es_java_opts: "-Xms{{ ingest_java_memory }}g -Xmx{{ ingest_java_memory }}g"
      min_memory: "{{ ingest_memory }}"
      min_cpu: "{{ ingest_num_procs  }}"
  when: not mdil and kit_size == 4

- name: Append ml node to node sets
  set_fact:
    node_sets: "{{ node_sets + [node_set] }}"
  vars:
    node_set:
      name: ml
      count: "{{ ml_count }}"
      node_roles: ["ml"]
      es_java_opts: "-Xms{{ ml_java_memory }}g -Xmx{{ ml_java_memory }}g"
      min_memory: "{{ ml_memory }}"
      min_cpu: "{{ ml_num_procs  }}"
  when: not mdil

- name: Copy deploy template
  template:
    src: "templates/deploy.yml.j2"
    dest: "{{ elastic_dir }}/deploy.yml"
    mode: u+rw,g+rw

- name: Copy Templates
  template:
    src: "templates/{{ item }}.j2"
    dest: "{{ elastic_dir }}/{{ item }}"
    mode: u+rw,g+rw
  with_items:
    - operator.yml
    - certificate.yml

- name: Install Elasticsearch Certificate
  shell: |
    kubectl apply -f {{ elastic_dir }}/certificate.yml
  register: results
  changed_when: results.rc == 0

- name: Delete S3 repository secrets.
  shell: |
    kubectl delete secret {{ item.name }} --ignore-not-found=true
  ignore_errors: yes
  changed_when: results.rc == 0
  loop:
    - { name: "s3-access-key" }
    - { name: "s3-secret-key" }

- name: Create S3 repository secrets.
  shell: |
    kubectl create secret generic {{ item.name }} --from-literal={{ item.key }}={{ item.value }}
  register: results
  changed_when: results.rc == 0
  loop:
    - { name: "s3-access-key", key: "s3.client.default.access_key", value: "minioadmin"}
    - { name: "s3-secret-key", key: "s3.client.default.secret_key", value: "minioadmin"}

- name: Install ECK Operator
  shell: |
    kubectl apply -f {{ elastic_dir }}/operator.yml
  register: results
  changed_when: results.rc == 0

- name: Wait for Elasticsearch operator to be ready
  import_role:
    name: kubernetes/common
    tasks_from: kube_wait
  vars:
    type: "statefulset"
    namespace: "elastic-system"
    resource_name: "elastic-operator"
    label: ""

- name: Install Elasticsearch
  shell: |
    kubectl apply -f {{ elastic_dir }}/deploy.yml
  register: results
  changed_when: results.rc == 0

- name: Add Elastic License
  shell: |
    kubectl apply -f {{ elastic_dir }}/license.yml
  register: results
  changed_when: results.rc == 0

...
