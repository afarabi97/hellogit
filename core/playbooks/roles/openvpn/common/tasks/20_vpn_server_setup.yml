---

- name: Check for existing dh.pem
  stat:
    path: "{{ ovpn_dir }}/pki/dh.pem"
  register: existing_dh

- name: Create client-script dir
  file:
    path: /etc/openvpn/server/client-scripts
    state: directory

- name: Generate Diffie Helman parameters on the server (this may take some time, give it up to 5 minutes)
  shell: |
    ./easyrsa --batch gen-dh
  args:
    chdir: "{{ ovpn_dir }}"
  when: not existing_dh.stat.exists
  environment:
    EASYRSA_REQ_CN: "{{ inventory_hostname }}"
  register: results
  changed_when: results.rc == 0

- name: Generate CRL
  shell: |
    ./easyrsa gen-crl
  args:
    chdir: "{{ ovpn_dir }}"
  ignore_errors: yes
  register: results
  changed_when: results.rc == 0

- name: Deploy proper config files to server
  template:
    src: templates/server.conf.j2
    dest: "{{ ovpn_dir }}/server/server.conf"

- name: Deploy OpenVPN server service to server
  copy:
    src: "files/server-service"
    dest: "/usr/lib/systemd/system/openvpn-server.service"

- name: Set management interface var
  set_fact:
    management_interface: "{{ ansible_default_ipv4.interface }}"

- name: Set management interface var
  set_fact:
    management_interface: "{{ ansible_br0.interfaces[idx] }}"
  when: management_interface == "br0" and ansible_br0.interfaces[idx] != "tap0"
  loop: "{{ ansible_br0.interfaces }}"
  loop_control:
    index_var: idx

- name: Deploy companion script to server
  template:
    src: "templates/server-bridge.sh.j2"
    dest: "/etc/openvpn/server/server-bridge.sh"
    mode: 0755

- name: Reload systemd
  systemd:
    daemon_reload: yes

- name: Initialize OpenVPN service on server
  systemd:
    name: openvpn-server.service
    state: started
    enabled: yes

- name: Configure iptables rule on the server for tap
  iptables:
    action: append
    chain: INPUT
    in_interface: tap0
    jump: ACCEPT
