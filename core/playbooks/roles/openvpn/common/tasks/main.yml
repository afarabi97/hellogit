---

- name: Check for server ca
  stat:
    path: /etc/openvpn/pki/ca.crt
  register: existing_ca
  when: inventory_hostname in groups['master_server']

- name: Deploy easy vpn setup script
  template:
    src: templates/vpnsetup.sh
    dest: /root/vpnsetup.sh
  when: inventory_hostname in groups['remote_sensors']

- name: Install net-tools
  yum:
    name: net-tools
    state: present

- name: Copy easy-rsa executable to /etc/openvpn
  shell: "cp -r /usr/share/easy-rsa/3/* /etc/openvpn/"

- name: Initialize PKI for the server
  shell: ./easyrsa --batch init-pki
  args:
    chdir: /etc/openvpn/
  when:
    - inventory_hostname in groups['master_server']
    - existing_ca.stat.exists == False
  environment:
    EASYRSA_REQ_CN: "{{ inventory_hostname }}"

- name: Create a certificate authority
  shell: ./easyrsa --batch build-ca nopass
  args:
    chdir: /etc/openvpn/
  when:
    - inventory_hostname in groups['master_server']
    - existing_ca.stat.exists == False
  environment:
    EASYRSA_REQ_CN: "{{ inventory_hostname }}"

- name: Pull CA cert to local directory
  fetch:
    src: /etc/openvpn/pki/ca.crt
    dest: /tmp/
    flat: yes
  when: inventory_hostname in groups['master_server']

- name: Check for existing pki
  stat:
    path: /etc/openvpn/pki/private
  register: existing_pki
  when: inventory_hostname in groups['remote_sensors']

- debug:
    msg: "{{ existing_pki }}"
  when: inventory_hostname in groups['remote_sensors']

- name: Generate certs on all remote sensors
  shell: ./easyrsa --batch init-pki
  args:
    chdir: /etc/openvpn/
  when:
    - inventory_hostname in groups['remote_sensors']
    - existing_pki.stat.exists == False
  environment:
    EASYRSA_REQ_CN: "{{ inventory_hostname }}"

- name: Copy the CA cert to all remote sensors
  copy:
    src: /tmp/ca.crt
    dest: /etc/openvpn/pki/
  when: inventory_hostname in groups['remote_sensors']

- name: Generate a PKI request on all remote sensors
  shell: "./easyrsa --batch gen-req {{ inventory_hostname }} nopass"
  args:
    chdir: /etc/openvpn/
  when:
    - inventory_hostname in groups['remote_sensors']
    - existing_pki.stat.exists == False
  environment:
    EASYRSA_REQ_CN: "{{ inventory_hostname }}"

- name: Pull PKI requests to local directory
  fetch:
    src: "/etc/openvpn/pki/reqs/{{ inventory_hostname }}.req"
    dest: /tmp/
    flat: yes
  when: inventory_hostname in groups['remote_sensors']

- name: Copy PKI request from all remote sensors to the server
  copy:
    src: "{{ item }}"
    dest: /tmp/
  with_fileglob:
    - "/tmp/*.req"
  when: inventory_hostname in groups['master_server']

#needs polish
- name: Import pki requests from all remote sensors
  shell: '[ -f /etc/openvpn/pki/reqs/{{item.split("/tmp/")[1] }}.req ] || ./easyrsa --batch import-req {{ item }} $(echo {{ item }} | rev | cut -d "/" -f 1 | rev)'
  args:
    chdir: /etc/openvpn/
  with_fileglob:
    - "/tmp/*req"
  when: inventory_hostname in groups['master_server']
  environment:
    EASYRSA_REQ_CN: "{{ inventory_hostname }}"

- name: Sign all pki requests from all remote sensors
  shell: 'grep {{ item.split("/tmp/")[1].split(".req")[0] }} /etc/openvpn/pki/index.txt || ./easyrsa --batch sign-req client $(echo {{ item }} | rev | cut -d "/" -f 1 | rev)'
  args:
    chdir: /etc/openvpn/
  with_fileglob:
    - "/tmp/*req"
  when: inventory_hostname in groups['master_server']
  environment:
    EASYRSA_REQ_CN: "{{ inventory_hostname }}"

- name: Get list of pki .crt files to pull
  find:
    paths: /etc/openvpn/pki/issued/
  register: issuedCertList
  when: inventory_hostname in groups['master_server']

- name: Pull client certs to local directory
  fetch:
    src: "{{ item.path }}"
    dest: /tmp/
    flat: yes
  with_items:
    - "{{ issuedCertList.files }}"
  when: inventory_hostname in groups['master_server']

#make this specific next
- name: Copy the client certs to each remote sensor
  copy:
    src: "{{ item }}"
    dest: /etc/openvpn/
  with_fileglob:
    - "/tmp/*.crt"
  when: inventory_hostname in groups['remote_sensors']

- name: Check for existing dh.pem
  stat:
    path: /etc/openvpn/pki/dh.pem
  register: existing_dh
  when: inventory_hostname in groups['master_server']

- name: Generate Diffie Helman parameters on the server (this may take some time, give it up to 5 minutes)
  shell: "./easyrsa --batch gen-dh"
  args:
    chdir: /etc/openvpn
  when:
    - inventory_hostname in groups['master_server']
    - existing_dh.stat.exists == False
  environment:
    EASYRSA_REQ_CN: "{{ inventory_hostname }}"

- name: Create client config directory
  file:
    path: /etc/openvpn/server/ccd/
    state: directory
  when: inventory_hostname in groups['master_server']

- name: Create client config file for each remote sensor
  template:
    src: "templates/ccdtemplate.j2"
    dest: "/etc/openvpn/server/ccd/{{ item }}"
  with_items:
    - "{{ groups['remote_sensors'] }}"
  when: inventory_hostname in groups['master_server']

- name: Deploy proper config file to remote sensors
  template:
    src: templates/client.conf.j2
    dest: /etc/openvpn/client/client.conf
  when: inventory_hostname in groups['remote_sensors']

- name: Deploy proper config files to server
  template:
    src: templates/server.conf.j2
    dest: /etc/openvpn/server/server.conf
  when: inventory_hostname in groups['master_server']

#In this line I use a nifty hack, wrapping the o in [] ensures that the regular
#expression used by grep finds o followed by openvpn but also ensures that the
#regular expression does not match itself! Excluding the grep in the ps grepped search results!
- name: Obtain process entry for OpenVPN
  shell: ps -aux | grep [o]penvpn | awk '{print $2}'
  register: openvpn_server_processes
  when: inventory_hostname in groups['master_server']

- name: Obtain process entry for OpenVPN
  shell: ps -aux | grep [o]penvpn | awk '{print $2}'
  register: openvpn_client_processes
  when: inventory_hostname in groups['remote_sensors']

- name: Deploy OpenVPN server service to server
  template:
    src: "templates/server-service.j2"
    dest: "/usr/lib/systemd/system/openvpn-server.service"
  when: inventory_hostname in groups['master_server']

- set_fact:
     management_interface: "{{ ansible_default_ipv4.interface }}"

- set_fact:
     management_interface: "{{ ansible_br0.interfaces[0] }}"
  when: management_interface == "br0"

- name: Deploy companion script to server
  template:
    src: "templates/server-bridge.sh.j2"
    dest: "/etc/openvpn/server/server-bridge.sh"
    mode: 0755
  when: inventory_hostname in groups['master_server']

- name: Initialize OpenVPN service on server
  shell: "systemctl enable -f openvpn-server.service"
  when: inventory_hostname in groups['master_server']

- name: Start OpenVPN service on server
  shell: "systemctl start openvpn-server.service"
  when: inventory_hostname in groups['master_server']

- name: Configure iptables rule on the server for tap
  iptables:
    action: append
    chain: INPUT
    in_interface: tap0
    jump: ACCEPT
  when: inventory_hostname in groups['master_server']

- name: Configure iptables rule on the server for br0
  iptables:
    chain: INPUT
    in_interface: br0
    jump: ACCEPT
  when: inventory_hostname in groups['master_server']

- name: Configure iptables rule on the server for br0 forwarding
  iptables:
    chain: FORWARD
    in_interface: br0
    jump: ACCEPT
  when: inventory_hostname in groups['master_server']

- name: Update dnsmasq conf file on the server to use the new bridge interface
  replace:
    path: /etc/dnsmasq.conf
    regexp: '^interface=.*'
    replace: 'interface=br0'
  when: inventory_hostname in groups['master_server']

- name: Restart dnsmasq because we just killed it
  systemd:
    name: dnsmasq
    state: restarted
  when: inventory_hostname in groups['master_server']

- name: Deploy OpenVPN client service to clients
  template:
    src: "templates/client-service.j2"
    dest: "/usr/lib/systemd/system/openvpn-client.service"
  when: inventory_hostname in groups['remote_sensors']

- name: Deploy companion script to clients
  template:
    src: "templates/client-bridge.sh.j2"
    dest: "/etc/openvpn/client/client-bridge.sh"
    mode: 0755
  when: inventory_hostname in groups['remote_sensors']

- name: Turn off network manager resolv.conf modifications
  shell: "if ! grep -q dns=none /etc/NetworkManager/NetworkManager.conf ; then sed -i '/\\[main\\]/s/.*/\\[main\\]\\ndns=none/' /etc/NetworkManager/NetworkManager.conf ; fi"
  when: inventory_hostname in groups['remote_sensors']

- name: Turn off dhclient script resolv.conf modifications
  shell: "sed -i '/change_resolv_conf/s/.*/#Removed to override DNS changes/' /usr/sbin/dhclient-script"
  when: inventory_hostname in groups['remote_sensors']

- name: Restart network manager on clients
  shell: "systemctl restart NetworkManager"
  when: inventory_hostname in groups['remote_sensors']

- name: Initialize OpenVPN service on clients
  shell: "systemctl enable -f openvpn-client.service"
  when: inventory_hostname in groups['remote_sensors']

...
