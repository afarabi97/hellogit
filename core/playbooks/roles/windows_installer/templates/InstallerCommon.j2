if ( -not ([Security.Principal.WindowsPrincipal] `
            [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole( `
            [Security.Principal.WindowsBuiltInRole] "Administrator") ) {
 Write-Error "Must have administrator privileges to run this script."
 exit -1
}

enum OutputErrorValue {
    no_error    = 0x00
{% if install_sysmon| upper == 'TRUE' %}
    sysmon      = 0x01
{% endif %}
{% if install_winlogbeat | upper == 'TRUE' %}
    winlogbeat  = 0x02
{% endif %}
{% if install_endgame | upper == 'TRUE' %}
    endgame     = 0x04 
{% endif %}
}

#Silence is golden
$return_value = 0x00

{% if install_winlogbeat | upper == 'TRUE' %}
function UninstallWinlogbeat {
  Try {
    $Private:wlb_path = '{{ target_dir | regex_replace('["\']', '') }}\Winlogbeat'
    if(-Not (Test-Path -Path $Private:wlb_path) ) {
      echo "Winlogbeat is not installed on this system moving on."
      return
    }

    & $Private:wlb_path\uninstall-service-winlogbeat.ps1
    function getWlbSvc {
      return Get-Service -Name "winlogbeat" 2> $null
    }
    
    $Private:wlb = getWlbSvc
    Write-Host -NoNewLine "Waiting for winlogbeat service to stop..."
    while ( $Private:wlb ) {
      $Private:wlb = getWlbSvc
      Write-Host -NoNewLine "."
      sleep 1
    }
    "done"
    
    Do  {
        Remove-Item -Path $Private:wlb_path -recurse -ErrorAction SilentlyContinue
        sleep 1
    } Until ( -not ( Test-Path $Private:wlb_path ) )
  }
  Catch {
    Write-Host "Caught exception uninstalling Winlogbeat", $_.Exception
    $Script:return_value = $return_value -bor [OutputErrorValue]::winlogbeat
  }
}
{% endif %}

{% if install_sysmon | upper == 'TRUE' %}
function UninstallSysmon {
  Try {
    $Private:path_name = "{{ target_dir | regex_replace('["\']', '') }}" + "\Sysmon"
    if(Test-Path -Path $Private:path_name ) {
        & $Private:path_name\{{ sysmon_service_name }}.exe -u 2> $null
        Remove-Item -Path $Private:path_name -recurse
    } else {
        $sysmon_service = Get-Service -Name {{ sysmon_service_name }} -ErrorAction SilentlyContinue
        if($sysmon_service) {
          $sysmon_service.delete()
        }
    }
  }
  Catch {
    Write-Host "Caught exception uninstalling Sysmon", $_.Exception
    $Script:return_value = $return_value -bor [OutputErrorValue]::sysmon
  }
}
{% endif %}