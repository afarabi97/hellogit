# Name: remove-node
# Description: This playbook will unschedule and remove a node from the kubernetes cluster. BE CAREFUL!
# Requirement: Add node to nodes_to_remove group in inventory.yml
# Usage: ansible-playbook remove-node.yml -u <user>
# Example: ansible-playbook -i inventory/misc/inventory.yml remove-node.yml -u root

---
- name: Set controller variables on hosts
  hosts:
    - localhost
    - servers
    - sensors
  tags: always
  tasks:
    - name: Set controller ip var
      set_fact:
        ansible_controller_ip: "{{ hostvars.localhost.ansible_controller_ip }}"

    - name: Create master server group
      add_host:
        hostname: "{{ item }}"
        groups: master_server
      when: hostvars[item].is_master | default(false)
      with_items: "{{ groups['all'] }}"

    - name: Create nodes to remove group
      add_host:
        hostname: "{{ node }}"
        groups: nodes_to_remove
      when: node is defined

- name: Preflight before removing node from k8s cluster
  hosts: master_server
  tasks:
    - name: Check nodes to remove
      fail:
        msg: "Missing group nodes_to_remove from inventory."
      when: "'nodes_to_remove' not in groups"

    - name: Check if nodes to remove group is empty
      fail:
        msg: "Error: No hosts in nodes_to_remove group.  nodes_to_remove must contain at least one host."
      when: groups['nodes_to_remove'] | length == 0

    - name: Check if nodes to remove group is empty
      fail:
        msg: "nodes_to_remove group cannot contain a master_server node"
      when: item in  groups['master_server']
      with_items: "{{ groups['nodes_to_remove'] }}"

    - name: Get current node list
      shell: |
        set -o pipefail
        kubectl get nodes --no-headers=true | awk '{ print $1 }'
      register: node_list
      changed_when: False

    - name: Check if nodes in nodes to remove is in node_list
      fail:
        msg: "{{ item }} node is not joined to k8s cluster. Remove {{ item }} from nodes_to_remove group in inventory file."
      when: item not in node_list.stdout
      with_items: "{{ groups['nodes_to_remove'] }}"

- name: Remove node from cluster
  hosts: master_server
  tasks:
    - name: remove-node | Drain node except daemonsets resource
      shell: |
        kubectl drain --force --ignore-daemonsets --grace-period 300 --timeout 360s --delete-local-data {{ item }}
      failed_when: false
      ignore_errors: yes
      with_items: "{{ groups['nodes_to_remove'] }}"
      register: results
      changed_when: results.rc == 0

- name: Delete node from k8s
  hosts: master_server
  tasks:
    - name: Delete nodes from k8s cluster
      shell: |
        kubectl delete node {{ item }}
      with_items: "{{ groups['nodes_to_remove'] }}"
      register: results
      changed_when: results.rc == 0

- name: Clean up node
  hosts: nodes_to_remove
  roles:
    - { role: kubernetes/reset }
  tasks:
    - name: Reboot system # noqa 301
      command: "/sbin/shutdown -r +1 --no-wall"
      async: 0
      poll: 0
      ignore_errors: yes

- name: Update DNS
  hosts:
    - master_server
  tasks:
    - name: Update hosts in dnsmasq
      import_role:
        name: dnsmasq
        tasks_from: update_dns

    - name: Clean up remote sensor files
      file:
        path: "/etc/openvpn/server/client-scripts/{{ hostvars[item].inventory_hostname_short }}"
        state: absent
      with_items: "{{ groups['nodes_to_remove'] }}"

    - name: Revoke remote sensor certificate
      shell: |
        ./easyrsa --batch revoke {{ hostvars[item].inventory_hostname_short }}
      args:
        chdir: /etc/openvpn/
      with_items: "{{ groups['nodes_to_remove'] }}"
      register: results
      changed_when: results.rc == 0
      ignore_errors: yes

    - name: Generate CRL
      shell: |
        ./easyrsa gen-crl
      args:
        chdir: /etc/openvpn/
      register: results
      changed_when: results.rc == 0
      ignore_errors: yes
