# site.yml is the overall playbook, but all it does is include the other playbooks that are part of the site. For more
# information about the structure see:
# http://docs.ansible.com/ansible/latest/playbooks_best_practices.html
# http://docs.ansible.com/ansible/latest/intro_inventory.html
# We follow the guidance to include naming conventions there.

---
- name: Set System Name
  hosts: all
  tags: always
  gather_facts: no
  tasks:
    - set_fact:
        system_name: "{{ lookup('ini', 'system_name section=tfplenum file=/etc/tfplenum.ini') }}"
        cacheable: yes

- name: Set controller variables
  hosts: localhost
  tags: always
  gather_facts: yes
  tasks:
    - set_fact:
        ansible_controller_hostname: "{{ hostvars.localhost.ansible_nodename }}"
        ansible_controller_ip: "{{ hostvars.localhost.ansible_default_ipv4.address }}"
    - debug:
        msg: "{{ ansible_controller_ip }}"
    - debug:
        msg: "{{ ansible_controller_hostname }}"

- name: Set controller variables on hosts
  hosts:
    - servers
    - sensors
  tags: always
  tasks:
    - set_fact:
        host_list: "{{ groups['servers'] + groups['sensors'] }}"
        ansible_controller_hostname: "{{ hostvars.localhost.ansible_controller_hostname }}"
        ansible_controller_ip: "{{ hostvars.localhost.ansible_controller_ip }}"

- name: Tag master server
  hosts: all
  tags: always
  tasks:
    - add_host:
        hostname: "{{ item }}"
        groups: master_server
      when: hostvars[item].is_master | default(false)
      with_items: "{{ groups['all'] }}"

- name: Tag remote sensors
  hosts: all
  tags: always
  tasks:
    - add_host:
        hostname: "{{ item }}"
        groups: remote_sensors
      when: hostvars[item].is_remote | default(false)
      with_items: "{{ groups['all'] }}"

- name: Set Kit Size
  hosts: master_server
  tags: always
  gather_facts: no
  any_errors_fatal: true
  pre_tasks:
    - setup:
  tasks:
    - name: Set Kit Size
      set_fact:
        kit_size: >-
          {% if system_name == "GIP" %}{% if ansible_processor_vcpus >= 55 and (ansible_memtotal_mb/1024)|round|int >= 95 %}100{% else %}99{% endif %}{% else %}{% if (groups['servers']|length) >= 2 %}{% if ansible_processor_vcpus >= 45 and (ansible_memtotal_mb/1024)|round|int >= 500 %}2{% elif ansible_processor_vcpus >= 30 and (ansible_memtotal_mb/1024)|round|int >= 500 %}1{% elif ansible_processor_vcpus >= 30 and (ansible_memtotal_mb/1024)|round|int >= 60 %}0{% endif %}{% endif %}{% endif %}
        cacheable: yes

- name: Setup Repos
  hosts:
    - servers
    - sensors
  gather_facts: yes
  any_errors_fatal: true
  pre_tasks:
    - setup:
  roles:
    - repos
  tags: repos

- name: Install Controller Dependencies
  hosts:
    - servers
    - sensors
  tasks:
    - name: Install NetworkManager packages
      yum:
        name: "NetworkManager-glib"
        state: installed
      register: network_manager_result
    - name: "Bump the NetworkManager service in case of https://access.redhat.com/solutions/3416301"
      systemd:
        name: NetworkManager
        state: restarted
      when: network_manager_result.changed
  tags:
    - dnsmasq
    - update-networkmanager

- name: Verify Ansible meets version requirements
  hosts: localhost
  any_errors_fatal: true
  tasks:
    - fail:
        msg: "You must update Ansible to at least 2.5.0 to use this code. Verify you have the EPEL repository enabled and then update Ansible."
      when: "ansible_version.full is version('2.5', '<=')"
  tags: preflight

- name: dnsmasq
  hosts:
    - all
  gather_facts: yes
  any_errors_fatal: true
  pre_tasks:
    - setup:
    - name: Disable possible existing OpenVPN
      systemd:
        name: openvpn-client.service
        enabled: no
        state: stopped
      when: inventory_hostname in groups['remote_sensors']
      ignore_errors: yes
  roles:
    - dnsmasq
  tags: dnsmasq

- name: Update controller interface dns
  hosts:
    - localhost
  gather_facts: yes
  any_errors_fatal: true
  pre_tasks:
    - setup:
  tasks:
    - import_role:
        name: dnsmasq
        tasks_from: 11_set_controller_dns
  tags: update_ctrl_dns

- name: Remove existing SSH keys
  hosts:
    - localhost
    - servers
    - sensors
  connection: ssh
  any_errors_fatal: true
  tasks:
    - import_tasks: remove_ssh_info.yml
  tags: genkeys

- name: Generate SSH keys
  hosts:
    - localhost
    - servers
    - sensors
  connection: ssh
  any_errors_fatal: true
  vars:
    ssh_known_hosts: "{{ groups['servers'] + groups['sensors'] }}"

    # This takes each group list, which is every host (do not use groups['all'] this will pick up nodes in nodes_to_remove group which will break stuff),
    # feeds it into map, which then
    # performs a regex_replace on each element. The regex_replace replaces .lan in each
    # element to nothing or ''. Finally, we feed that back into list because Ansible
    # expects the final product to be a list.
    ssh_short_known_hosts: "{{ ssh_known_hosts | map('regex_replace','(\\.lan$)','' ) | list }}"
  tasks:
    - import_tasks: generate_ssh_keys.yml
  tags: genkeys

- name: Perform preflight checks
  any_errors_fatal: true
  hosts:
    - servers
    - sensors
  roles:
    - preflight_checks
  tags: preflight

- name: Common Setup
  hosts:
    - servers
    - sensors
  gather_facts: no
  any_errors_fatal: true
  pre_tasks:
    - setup:
  roles:
    - common
    - chrony
  tags:
    - common

- name: Setup chrony on ctrl
  hosts:
    - localhost
  gather_facts: no
  any_errors_fatal: true
  pre_tasks:
    - setup:
  roles:
    - chrony
  tags:
    - common

- name: OpenVPN
  hosts:
    - master_server
    - remote_sensors
  gather_facts: yes
  any_errors_fatal: true
  pre_tasks:
    - setup:
  tasks:
    - import_role:
        name: openvpn/common
      when: system_name == "DIP"
  tags:
    - openvpn

- name: Setup CRI-O
  hosts:
    - servers
    - sensors
  gather_facts: no
  any_errors_fatal: true
  pre_tasks:
    - setup:
  roles:
    - crio
  tags:
    - crio

- name: Configure kube master
  hosts: master_server
  gather_facts: no
  any_errors_fatal: true
  pre_tasks:
    - setup:
  roles:
    - kubernetes/master
  tags:
    - kube-master

- name: Configure kube nodes
  hosts:
    - "!master_server"
    - servers
    - sensors
  gather_facts: no
  any_errors_fatal: true
  pre_tasks:
    - setup:
  roles:
    - kubernetes/node
  tags:
    - kube-node

- name: helm
  any_errors_fatal: true
  hosts:
    - all
  roles:
    - helm
  tags: helm

- name: chartmuseum
  any_errors_fatal: true
  hosts:
    - master_server
    - localhost
  roles:
    - chartmuseum
  tags: chartmuseum

- name: Deploy Elasticsearch
  hosts: master_server
  gather_facts: no
  any_errors_fatal: true
  pre_tasks:
    - setup:
  roles:
    - elasticsearch
  tags:
    - elasticsearch

- name: Deploy kibana
  hosts: master_server
  gather_facts: no
  any_errors_fatal: true
  pre_tasks:
    - setup:
  roles:
    - kibana
  tags:
    - kibana

- name: Deploy Auditbeat
  hosts:
    - localhost
    - servers
    - sensors
  gather_facts: no
  any_errors_fatal: true
  pre_tasks:
    - setup:
  roles:
    - audit
  tags:
    - audit

- name: Deploy metric services
  hosts: master_server
  gather_facts: no
  any_errors_fatal: true
  pre_tasks:
    - setup:
  roles:
    - metrics
  tags:
    - metrics

- name: Deploy Moloch
  hosts:
    - master_server
  gather_facts: no
  any_errors_fatal: true
  pre_tasks:
    - setup:
  roles:
    - moloch
  tags:
    - moloch

- name: Setup Log Management
  hosts:
    - sensors
  gather_facts: no
  any_errors_fatal: true
  pre_tasks:
    - setup:
  roles:
    - logs
  tags:
    - logs

- name: Schedule a cron job to gather health metrics.
  hosts:
    - servers
    - sensors
  gather_facts: no
  any_errors_fatal: true
  roles:
    - node-health
  tags:
    - node-health

- name: Run Filebeat Setup
  hosts: master_server
  gather_facts: no
  any_errors_fatal: true
  tasks:
    - import_role:
        name: elasticsearch
        tasks_from: filebeat_setup
  tags:
    - run-filebeat-setup
