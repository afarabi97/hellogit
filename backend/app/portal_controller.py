"""
Main module that controls the REST calls for the portal page.
"""
from app import (app, conn_mng)
from app.common import OK_RESPONSE, ERROR_RESPONSE
from fabric.runners import Result
from flask import jsonify, Response
from shared.connection_mngs import FabricConnectionWrapper
from shared.constants import PORTAL_ID


DEFAULT_NAMES = ("grr-frontend.lan", "kafka-manager.lan", "kibana.lan", "moloch-viewer.lan",
                 "kubernetes-dashboard.lan", "monitoring-grafana.lan")

DISCLUDES = ("elasticsearch.lan", "mysql.lan", "mumble-server.lan")


def _get_defaults():
    """
    Gets the defaults for portal links in the event that we cannot 
    connect to kubernetes master server.
    
    :return:
    """    
    portal_links = []
    for default_dns in DEFAULT_NAMES:
        portal_links.append({'ip': '', 'dns': default_dns})
    return portal_links

def _isDiscluded(dns: str) -> bool:
    """
    Checks to see if the link should be discluded or included.

    :param dns: The dns name we are checking against the DISCLUDES list.
    :return:
    """
    for item in DISCLUDES:
        if dns == item:
            return True
    return False

@app.route('/api/get_portal_links', methods=['GET'])
def get_portal_links() -> Response:
    """
    Gets the portal links that were generated by the a fabric cron job.

    :return:
    """
    try:
        with FabricConnectionWrapper(conn_mng) as ssh_conn:
            portal_links = []
            ret_val = ssh_conn.run('cat /etc/dnsmasq_kube_hosts', hide=True)  # type: Result
            for line in ret_val.stdout.split('\n'):
                try:
                    ip, dns = line.split(' ')
                    if _isDiscluded(dns):
                        continue

                    if dns == "grr-frontend.lan":
                        portal_links.append({'ip': 'https://' + ip, 'dns': dns, 'logins': 'admin/password'})
                    elif dns == "moloch-viewer.lan":
                        portal_links.append({'ip': 'http://' + ip, 'dns': dns, 'logins': 'assessor/password'})
                    elif dns == "kubernetes-dashboard.lan":
                        portal_links.append({'ip': 'https://' + ip, 'dns': dns, 'logins': ''})
                    else:
                        portal_links.append({'ip': 'http://' + ip, 'dns': dns, 'logins': ''})
                except ValueError as e:
                    pass
            return jsonify(portal_links)
    except Exception as e:
        return jsonify(_get_defaults())
    
    return ERROR_RESPONSE
