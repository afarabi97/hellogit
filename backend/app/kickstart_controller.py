"""
Main module for handling all of the Kickstart Configuration REST calls.
"""
import json

from app import (app, logger, conn_mng)
from app.archive_controller import archive_form
from app.inventory_generator import KickstartInventoryGenerator
from app.job_manager import spawn_job, shell
from app.socket_service import log_to_console
from app.common import OK_RESPONSE, ERROR_RESPONSE
from flask import request, jsonify, Response
from pymongo import ReturnDocument
from pymongo.results import InsertOneResult
from shared.constants import KICKSTART_ID
from shared.utils import netmask_to_cidr, filter_ip, encode_password, decode_password
from typing import Dict


def _is_valid_ip(ip_address: str) -> bool:
    """
    Ensures that the IP passed in is valid.

    :param ip_address: Some ip address (IE: 192.168.1.1).

    :return:
    """
    command = "nmap -v -sn -n %s/32 -oG - | awk '/Status: Down/{print $2}'" % ip_address
    stdout_str, stderr_str = shell(command, use_shell=True)
    if stdout_str != b'':
        available_ip_addresses = stdout_str.decode("utf-8").split('\n')
        if len(available_ip_addresses) > 0:            
            return True        
    return False


def save_kickstart_to_mongo(kickstart_form: Dict) -> None:
    """
    Saves Kickstart to mongo database.

    :param kickstart_form: Dictionary for the Kickstart form
    """
    current_config = conn_mng.mongo_kickstart.find_one({"_id": KICKSTART_ID})
    if current_config:
        archive_form(current_config['form'], True, conn_mng.mongo_kickstart_archive)

    kickstart_form["re_password"] = encode_password(kickstart_form["re_password"])
    kickstart_form["root_password"] = encode_password(kickstart_form["root_password"])
    conn_mng.mongo_kickstart.find_one_and_replace({"_id": KICKSTART_ID},
                                                  {"_id": KICKSTART_ID, "form": kickstart_form},
                                                  upsert=True)  # type: InsertOneResult


@app.route('/api/generate_kickstart_inventory', methods=['POST'])
def generate_kickstart_inventory() -> Response:
    """
    Generates the Kickstart inventory file from a JSON object that was posted from the
    Angular frontend component.

    :return:
    """
    kickstart_form = request.get_json()
    if not kickstart_form['continue']:
        invalid_ips = []
        for node in kickstart_form["nodes"]:
            if not _is_valid_ip(node["ip_address"]):
                invalid_ips.append(node["ip_address"])

        invalid_ips_len = len(invalid_ips)
        if invalid_ips_len > 0:
            if invalid_ips_len == 1:
                return jsonify(error_message="The IP {} is already being used on this network. Please use a different IP address."
                                            .format(', '.join(invalid_ips)))
            else:
                return jsonify(error_message="The IPs {} are already being used on this network. Please use different IP addresses."
                                            .format(', '.join(invalid_ips)))

    #logger.debug(json.dumps(kickstart_form, indent=4, sort_keys=True))
    save_kickstart_to_mongo(kickstart_form)
    kickstart_generator = KickstartInventoryGenerator(kickstart_form)
    kickstart_generator.generate()

    spawn_job("Kickstart",
              "make",
              ["kickstart"],
              log_to_console,
              working_directory="/opt/tfplenum-deployer/playbooks")
    return OK_RESPONSE


@app.route('/api/update_kickstart_ctrl_ip/<new_ctrl_ip>', methods=['PUT'])
def update_kickstart_ctrl_ip(new_ctrl_ip: str) -> Response:
    """
    Updates the Kickstart controller IP address in the mongo form.

    :return:
    """
    ret_val = conn_mng.mongo_kickstart.find_one_and_update({"_id": KICKSTART_ID}, 
                                                           {'$set': {'form.controller_interface': [new_ctrl_ip]}}, 
                                                            return_document=ReturnDocument.AFTER,
                                                            upsert=False
                                                          )
    if ret_val:
        return jsonify(ret_val["form"])
    return jsonify(error_message='Failed to update IP {} on Kickstart configuration page.')


@app.route('/api/get_kickstart_form', methods=['GET'])
def get_kickstart_form() -> Response:
    """
    Gets the Kickstart form that was generated by the user on the Kickstart
    configuration page.

    :return:
    """
    mongo_document = conn_mng.mongo_kickstart.find_one({"_id": KICKSTART_ID})
    if mongo_document is None:
        return OK_RESPONSE

    mongo_document['_id'] = str(mongo_document['_id'])
    mongo_document["form"]["re_password"] = decode_password(mongo_document["form"]["re_password"])
    mongo_document["form"]["root_password"] = decode_password(mongo_document["form"]["root_password"])
    return jsonify(mongo_document["form"])


@app.route('/api/get_unused_ip_addrs', methods=['POST'])
def get_unused_ip_addrs() -> Response:
    """
    Gets unused IP Addresses from a given network.
    :return:
    """
    payload = request.get_json()    
    cidr = netmask_to_cidr(payload['netmask'])    
    if cidr <= 24:
        command = "nmap -v -sn -n %s/24 -oG - | awk '/Status: Down/{print $2}'" % payload['mng_ip']
    else:
        command = "nmap -v -sn -n %s/%d -oG - | awk '/Status: Down/{print $2}'" % (payload['mng_ip'], cidr) 
    
    stdout_str, stderr_str = shell(command, use_shell=True)
    available_ip_addresses = stdout_str.decode("utf-8").split('\n')
    available_ip_addresses = [x for x in available_ip_addresses if not filter_ip(x)]
    return jsonify(available_ip_addresses)
