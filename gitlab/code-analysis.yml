test playbooks:
  tags:
    - docker-runner
  stage: code-analysis
  image: docker.nexus.sil.lab/quay.io/ansible/toolset:3.4.0
  only:
    changes:
      - testing/playbooks/*.yml
      - testing/playbooks/**/*.yml
  except:
    - tags
    - schedules
  script: |
    echo "IP of runner is $(hostname -I | cut -d " " -f1)"
    echo "Current working directory is $(pwd)"
    ansible-lint testing/playbooks/site.yml
  allow_failure: false


bootstrap playbooks:
  tags:
    - docker-runner
  stage: code-analysis
  image: docker.nexus.sil.lab/quay.io/ansible/toolset:3.4.0
  only:
    changes:
      - bootstrap/playbooks/*.yml
      - bootstrap/playbooks/**/*.yml
  except:
    - tags
    - schedules
  script: |
    echo "IP of runner is $(hostname -I | cut -d " " -f1)"
    echo "Current working directory is $(pwd)"
    ansible-lint bootstrap/playbooks/site.yml
  allow_failure: false


core playbooks:
  tags:
    - docker-runner
  stage: code-analysis
  image: docker.nexus.sil.lab/quay.io/ansible/toolset:3.4.0
  only:
    changes:
      - core/playbooks/site.yml
      - core/playbooks/roles/system_info/**/*.yml
      - core/playbooks/roles/reset/**/*.yml
      - core/playbooks/roles/common/**/*.yml
      - core/playbooks/roles/chrony/**/*.yml
      - core/playbooks/roles/certificate_authority/common/**/*.yml
      - core/playbooks/roles/crio/**/*.yml
      - core/playbooks/roles/kubernetes/node/**/*.yml
      - core/playbooks/roles/storage/**/*.yml
      - core/playbooks/roles/elasticsearch/**/*.yml
      - core/playbooks/roles/kibana/**/*.yml
      - core/playbooks/roles/audit/**/*.yml
      - core/playbooks/roles/metrics/**/*.yml
      - core/playbooks/roles/logs/**/*.yml
      - core/playbooks/roles/node-health/**/*.yml
  except:
    - tags
    - schedules
  script: |
    echo "IP of runner is $(hostname -I | cut -d " " -f1)"
    echo "Current working directory is $(pwd)"
    ansible-lint core/playbooks/site.yml
  allow_failure: false


remove node playbooks:
  tags:
    - docker-runner
  stage: code-analysis
  image: docker.nexus.sil.lab/quay.io/ansible/toolset:3.4.0
  only:
    changes:
      - core/playbooks/remove_node.yml
  except:
    - tags
    - schedules
  script: |
    echo "IP of runner is $(hostname -I | cut -d " " -f1)"
    echo "Current working directory is $(pwd)"
    ansible-lint core/playbooks/remove_node.yml
  allow_failure: false


virtual node playbooks:
  tags:
    - docker-runner
  stage: code-analysis
  image: docker.nexus.sil.lab/quay.io/ansible/toolset:3.4.0
  only:
    changes:
      - core/playbooks/virtual_node_playbook.yml
      - core/playbooks/roles/system_info/**/*.yml
      - core/playbooks/roles/virtual-nodes/**/*.yml
  except:
    - tags
    - schedules
  script: |
    echo "IP of runner is $(hostname -I | cut -d " " -f1)"
    echo "Current working directory is $(pwd)"
    ansible-lint core/playbooks/virtual_node_playbook.yml
  allow_failure: false


kickstart profiles playbooks:
  tags:
    - docker-runner
  stage: code-analysis
  image: docker.nexus.sil.lab/quay.io/ansible/toolset:3.4.0
  only:
    changes:
      - core/playbooks/kickstart_profiles.yml
      - core/playbooks/roles/system_info/**/*.yml
      - core/playbooks/roles/controller/profiles/**/*.yml
  except:
    - tags
    - schedules
  script: |
    echo "IP of runner is $(hostname -I | cut -d " " -f1)"
    echo "Current working directory is $(pwd)"
    ansible-lint core/playbooks/kickstart_profiles.yml
  allow_failure: false


controller playbooks:
  tags:
    - docker-runner
  stage: code-analysis
  image: docker.nexus.sil.lab/quay.io/ansible/toolset:3.4.0
  only:
    changes:
      - core/playbooks/controller_playbook.yml
      - core/playbooks/roles/system_info/**/*.yml
      - core/playbooks/roles/controller/setup/**/*.yml
      - core/playbooks/roles/controller/kickstart/**/*.yml
      - core/playbooks/roles/controller/dnsmasq/**/*.yml
      - core/playbooks/roles/chrony/**/*.yml
      - core/playbooks/roles/openvpn/server/**/*.yml
      - core/playbooks/roles/controller/isos/**/*.yml
      - core/playbooks/roles/certificate_authority/localhost/**/*.yml
      - core/playbooks/roles/certificate_authority/common/**/*.yml
      - core/playbooks/generate_ssh_keys.yml
      - core/playbooks/controller_dns_playbook.yml
  except:
    - tags
    - schedules
  script: |
    echo "IP of runner is $(hostname -I | cut -d " " -f1)"
    echo "Current working directory is $(pwd)"
    ansible-lint core/playbooks/controller_playbook.yml
  allow_failure: false


control plane playbooks:
  tags:
    - docker-runner
  stage: code-analysis
  image: docker.nexus.sil.lab/quay.io/ansible/toolset:3.4.0
  only:
    changes:
      - core/playbooks/control_plane_playbook.yml
      - core/playbooks/roles/system_info/**/*.yml
      - core/playbooks/roles/common/**/*.yml
      - core/playbooks/roles/chrony/**/*.yml
      - core/playbooks/roles/certificate_authority/common/**/*.yml
      - core/playbooks/roles/crio/**/*.yml
      - core/playbooks/roles/kubernetes/primary/**/*.yml
      - core/playbooks/roles/sso/**/*.yml
      - core/playbooks/roles/node-health/**/*.yml
      - core/playbooks/roles/storage-provisioner/**/*.yml
      - rhel8-stigs/rhel8-playbook-stig.yml
      - rhel8-stigs/**/*.yml
  except:
    - tags
    - schedules
  script: |
    echo "IP of runner is $(hostname -I | cut -d " " -f1)"
    echo "Current working directory is $(pwd)"
    ansible-lint core/playbooks/control_plane_playbook.yml
  allow_failure: false


stigs playbooks:
  tags:
    - docker-runner
  stage: code-analysis
  image: docker.nexus.sil.lab/quay.io/ansible/toolset:3.4.0
  only:
    changes:
      - rhel8-stigs/*.yml
      - rhel8-stigs/**/*.yml
  except:
    - tags
    - schedules
  script: |
    echo "IP of runner is $(hostname -I | cut -d " " -f1)"
    echo "Current working directory is $(pwd)"
    ansible-lint rhel8-stigs/site.yml
  allow_failure: false


mip playbooks:
  tags:
    - docker-runner
  stage: code-analysis
  image: docker.nexus.sil.lab/quay.io/ansible/toolset:3.4.0
  only:
    changes:
      - mip/*.yml
      - mip/**/*.yml
  except:
    - tags
    - schedules
  script: |
    echo "IP of runner is $(hostname -I | cut -d " " -f1)"
    echo "Current working directory is $(pwd)"
    ansible-lint mip/site.yml
  allow_failure: false


sonar-scan testing pipeline:
  tags:
    - tfplenum-buildv2
  stage: code-analysis
  only:
    changes:
      - testing/pipeline/*
      - testing/pipeline/**/*
  except:
    - tags
    - schedules
  dependencies:
    - pipeline pylint
  script: |
    echo "IP of runner is $(hostname -I | cut -d " " -f1)"
    echo "Current working directory is $(pwd)"
    PATH_PWD=$(pwd)
    echo "TASK [sonar-scanner: pipeline ingestion] ************************************************"
    sonar-scanner \
      -Dsonar.qualitygate.wait=true \
      -Dsonar.python.pylint.reportPath=$PATH_PWD/testing/pipeline/pylint-pipeline.txt \
      -Dsonar.projectKey=tfplenum-test \
      -Dsonar.sources=testing/pipeline/
  allow_failure: false

sonar-scan back-end code base:
  tags:
    - tfplenum-buildv2
  stage: code-analysis
  only:
    changes:
      - web/backend/*
      - web/backend/**/*
  except:
    - tags
    - schedules
  dependencies:
    - back-end pylint and pytest
  script: |
    echo "IP of runner is $(hostname -I | cut -d " " -f1)"
    echo "Current working directory is $(pwd)"
    echo "CI_PIPELINE_SOURCE: $CI_PIPELINE_SOURCE"
    PATH_PWD=$(pwd)
    echo "TASK [sonar-scanner: back-end code-base ingestion] **************************************"
    sed -i "s%<source>/builds/tfplenum/tfplenum/web/backend/app</source>%<source>$PATH_PWD/web/backend/app</source>%g" web/backend/pytest-coverage-report.xml
    sed -i "s%/builds/tfplenum/tfplenum/web/backend%$PATH_PWD/web/backend%g" web/backend/pylint-backend.txt
    sonar-scanner \
      -Dsonar.qualitygate.wait=true \
      -Dsonar.python.pylint.reportPath=web/backend/pylint-backend.txt \
      -Dsonar.python.coveragePlugin=cobertura \
      -Dsonar.python.coverage.reportPaths=web/backend/pytest-coverage-report.xml \
      -Dsonar.projectKey=tfplenum-backend \
      -Dsonar.sources=web/backend/
  allow_failure: false

sonar-scan front-end code base:
  tags:
    - tfplenum-buildv2
  stage: code-analysis
  only:
    changes:
      - web/frontend/*
      - web/frontend/**/*
  except:
    - tags
    - schedules
  dependencies:
    - front-end eslint and unit test
  script: |
    echo "IP of runner is $(hostname -I | cut -d " " -f1)"
    echo "Current working directory is $(pwd)"
    PATH_PWD=$(pwd)
    echo "TASK [sonar-scanner: front-end code-base ingestion] *************************************"
    sonar-scanner \
      -Dsonar.qualitygate.wait=true \
      -Dsonar.eslint.reportPaths=$PATH_PWD/web/frontend/eslint-report.json \
      -Dsonar.javascript.lcov.reportPaths=$PATH_PWD/web/frontend/test-coverage/lcov.info \
      -Dsonar.typescript.tsconfigPath=$PATH_PWD/web/frontend/src/tsconfig.app.json \
      -Dsonar.projectKey=tfplenum-frontend \
      -Dsonar.sources=$PATH_PWD/web/frontend/src/app/
  allow_failure: false
