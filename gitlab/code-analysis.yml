Commit Lint:
  stage: commit-lint
  image:
    name: docker.nexus.sil.lab/tfplenum/vommit:0.1
    entrypoint: [""]
  tags:
    - docker-runner
  extends: .before-commit-lint
  script: |
    echo "IP of runner is $(hostname -I | cut -d " " -f1)"
    echo "(script) Current working directory is $(pwd)"
    exit_code=0
    gitlint --extra-path /root/rules -vv --commit "$CI_COMMIT_SHA" || exit_code=$?; if [ $exit_code -ne 0 ]; then echo -e "\nThe Total Errors: $exit_code\n"; exit 1; else echo -e "GITLINT PASSED\n"; fi;

test playbooks:
  tags:
    - docker-runner
  stage: code-analysis
  image: docker.nexus.sil.lab/quay.io/ansible/toolset:3.4.0
  script: |
    echo "IP of runner is $(hostname -I | cut -d " " -f1)"
    echo "Current working directory is $(pwd)"
    ansible-lint testing/playbooks/site.yml
  allow_failure: true
  extends: .code-checks

bootstrap playbooks:
  tags:
    - docker-runner
  stage: code-analysis
  image: docker.nexus.sil.lab/quay.io/ansible/toolset:3.4.0
  script: |
    echo "IP of runner is $(hostname -I | cut -d " " -f1)"
    echo "Current working directory is $(pwd)"
    ansible-lint bootstrap/playbooks/site.yml
  allow_failure: true
  extends: .code-checks

core playbooks:
  tags:
    - docker-runner
  stage: code-analysis
  image: docker.nexus.sil.lab/quay.io/ansible/toolset:3.4.0
  script: |
    echo "IP of runner is $(hostname -I | cut -d " " -f1)"
    echo "Current working directory is $(pwd)"
    ansible-lint core/playbooks/site.yml
  allow_failure: true
  extends: .code-checks

remove node playbooks:
  tags:
    - docker-runner
  stage: code-analysis
  image: docker.nexus.sil.lab/quay.io/ansible/toolset:3.4.0
  script: |
    echo "IP of runner is $(hostname -I | cut -d " " -f1)"
    echo "Current working directory is $(pwd)"
    ansible-lint core/playbooks/remove_node.yml
  allow_failure: true
  extends: .code-checks

virtual node playbooks:
  tags:
    - docker-runner
  stage: code-analysis
  image: docker.nexus.sil.lab/quay.io/ansible/toolset:3.4.0
  script: |
    echo "IP of runner is $(hostname -I | cut -d " " -f1)"
    echo "Current working directory is $(pwd)"
    ansible-lint core/playbooks/virtual_node_playbook.yml
  allow_failure: true
  extends: .code-checks

kickstart profiles playbooks:
  tags:
    - docker-runner
  stage: code-analysis
  image: docker.nexus.sil.lab/quay.io/ansible/toolset:3.4.0
  script: |
    echo "IP of runner is $(hostname -I | cut -d " " -f1)"
    echo "Current working directory is $(pwd)"
    ansible-lint core/playbooks/kickstart_profiles.yml
  allow_failure: true
  extends: .code-checks

controller playbooks:
  tags:
    - docker-runner
  stage: code-analysis
  image: docker.nexus.sil.lab/quay.io/ansible/toolset:3.4.0
  script: |
    echo "IP of runner is $(hostname -I | cut -d " " -f1)"
    echo "Current working directory is $(pwd)"
    ansible-lint core/playbooks/controller_playbook.yml
  allow_failure: true
  extends: .code-checks

control plane playbooks:
  tags:
    - docker-runner
  stage: code-analysis
  image: docker.nexus.sil.lab/quay.io/ansible/toolset:3.4.0
  script: |
    echo "IP of runner is $(hostname -I | cut -d " " -f1)"
    echo "Current working directory is $(pwd)"
    ansible-lint core/playbooks/control_plane_playbook.yml
  allow_failure: true
  extends: .code-checks

stigs playbooks:
  tags:
    - docker-runner
  stage: code-analysis
  image: docker.nexus.sil.lab/quay.io/ansible/toolset:3.4.0
  script: |
    echo "IP of runner is $(hostname -I | cut -d " " -f1)"
    echo "Current working directory is $(pwd)"
    ansible-lint rhel8-stigs/site.yml
  allow_failure: true
  extends: .code-checks

mip playbooks:
  tags:
    - docker-runner
  stage: code-analysis
  image: docker.nexus.sil.lab/quay.io/ansible/toolset:3.4.0
  script: |
    echo "IP of runner is $(hostname -I | cut -d " " -f1)"
    echo "Current working directory is $(pwd)"
    ansible-lint mip/site.yml
  allow_failure: true
  extends: .code-checks

sonar-scan testing pipeline:
  tags:
    - tfplenum-buildv2
  stage: code-analysis
  only:
    changes:
      - testing/pipeline/*
      - testing/pipeline/**/*
  except:
    - tags
    - schedules
  script: |
    echo "IP of runner is $(hostname -I | cut -d " " -f1)"
    echo "Current working directory is $(pwd)"
    PATH_PWD=$(pwd)
    echo "TASK [pylint: pipeline] ********************************************************"
    docker run -e PATH_PWD=$PATH_PWD --rm --mount type=bind,source="$(pwd)",target=$PATH_PWD $LATEST_CODE_CHECKER_IMAGE $PATH_PWD/testing/pipeline/pylint_pipeline.sh
    echo "TASK [sonar-scanner: pipeline ingestion] ***************************************"
    sonar-scanner \
      -Dsonar.qualitygate.wait=true \
      -Dsonar.python.pylint.reportPath=$PATH_PWD/testing/pipeline/pylint-pipeline.txt \
      -Dsonar.projectKey=tfplenum-test \
      -Dsonar.sources=testing/pipeline/> >(tee $PATH_PWD/testing/pipeline/sonar-report.txt) 2> >(tee $PATH_PWD/testing/pipeline/sonar-report.txt >&2)
    cat $PATH_PWD/testing/pipeline/sonar-report.txt | grep QUALITY >> $PATH_PWD/testing/pipeline/testing-sonarlink.txt
    cat $PATH_PWD/testing/pipeline/sonar-report.txt | grep -i "total time" >> $PATH_PWD/testing/pipeline/testing-scantime.txt
  artifacts:
    paths:
      - testing/pipeline/testing-sonarlink.txt
      - testing/pipeline/testing-scantime.txt
      - testing/pipeline/*.png
  allow_failure: false

sonar-scan back-end code base:
  tags:
    - tfplenum-buildv2
  stage: code-analysis
  only:
    changes:
      - web/backend/*
      - web/backend/**/*
  except:
    - tags
    - schedules
  dependencies:
    - back-end pylint and pytest
  script: |
    echo "IP of runner is $(hostname -I | cut -d " " -f1)"
    echo "Current working directory is $(pwd)"
    echo "CI_PIPELINE_SOURCE: $CI_PIPELINE_SOURCE"
    PATH_PWD=$(pwd)
    echo "TASK [sonar-scanner: back-end code-base ingestion] **************************************"
    sed -i "s%<source>/builds/tfplenum/tfplenum/web/backend/app</source>%<source>$PATH_PWD/web/backend/app</source>%g" web/backend/pytest-coverage-report.xml
    sed -i "s%/builds/tfplenum/tfplenum/web/backend%$PATH_PWD/web/backend%g" web/backend/pylint-backend.txt
    sonar-scanner \
      -Dsonar.qualitygate.wait=true \
      -Dsonar.python.pylint.reportPath=web/backend/pylint-backend.txt \
      -Dsonar.python.coveragePlugin=cobertura \
      -Dsonar.python.coverage.reportPaths=web/backend/pytest-coverage-report.xml \
      -Dsonar.projectKey=tfplenum-backend \
      -Dsonar.sources=web/backend/> >(tee web/backend/sonar-report.txt) 2> >(tee web/backend/sonar-report.txt >&2)
    cat web/backend/sonar-report.txt | grep QUALITY >> web/backend/backend-sonarlink.txt
    cat web/backend/sonar-report.txt | grep -i "total time" >> web/backend/backend-scantime.txt
  artifacts:
    paths:
      - web/backend/backend-sonarlink.txt
      - web/backend/backend-scantime.txt
  allow_failure: false

sonar-scan front-end code base:
  tags:
    - tfplenum-buildv2
  stage: code-analysis
  only:
    changes:
      - web/frontend/*
      - web/frontend/**/*
  except:
    - tags
    - schedules
  script: |
    echo "IP of runner is $(hostname -I | cut -d " " -f1)"
    echo "Current working directory is $(pwd)"
    PATH_PWD=$(pwd)
    echo "TASK [setup: front-end] ********************************************************"
    docker run --rm -v $(pwd):/opt/tfplenum $LATEST_CODE_CHECKER_IMAGE /opt/tfplenum/web/setup/setup_frontend.sh
    echo "TASK [unit-test / coverage: front-end] *****************************************"
    docker run --rm --mount type=bind,source="$(pwd)",target=$PATH_PWD $LATEST_CODE_CHECKER_IMAGE $PATH_PWD/web/setup/eslint_test_coverage_frontend.sh
    echo "TASK [sonar-scanner: front-end code-base ingestion] **************************************"
    sonar-scanner \
      -Dsonar.qualitygate.wait=true \
      -Dsonar.eslint.reportPaths=$PATH_PWD/web/frontend/report.json \
      -Dsonar.javascript.lcov.reportPaths=$PATH_PWD/web/frontend/test-coverage/lcov.info \
      -Dsonar.typescript.tsconfigPath=$PATH_PWD/web/frontend/src/tsconfig.app.json \
      -Dsonar.projectKey=tfplenum-frontend \
      -Dsonar.sources=$PATH_PWD/web/frontend/src/app/> >(tee $PATH_PWD/web/frontend/sonar-report.txt) 2> >(tee $PATH_PWD/web/frontend/sonar-report.txt >&2)
    cat $PATH_PWD/web/frontend/sonar-report.txt | grep QUALITY >> $PATH_PWD/web/frontend/frontend-sonarlink.txt
    cat $PATH_PWD/web/frontend/sonar-report.txt | grep -i "total time" >> $PATH_PWD/web/frontend/frontend-scantime.txt
  artifacts:
    paths:
      - web/frontend/frontend-sonarlink.txt
      - web/frontend/frontend-scantime.txt
  allow_failure: false
