analyze ansible test playbooks:
  tags:
    - tfplenum-buildv2
  stage: code-analysis
  script: |
    echo "IP of runner is $(hostname -I | cut -d " " -f1)"
    echo "Current working directory is $(pwd)"
    ansible-lint testing/playbooks/site.yml
  allow_failure: true
  only:
    variables:
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-dip"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "static_analysis_only"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-all"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-dip-mip"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-mip"

analyze ansible bootstrap playbooks:
  tags:
    - tfplenum-buildv2
  stage: code-analysis
  script: |
    echo "IP of runner is $(hostname -I | cut -d " " -f1)"
    echo "Current working directory is $(pwd)"
    ansible-lint bootstrap/playbooks/site.yml
  allow_failure: true
  only:
    variables:
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-dip"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "static_analysis_only"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-all"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-dip-mip"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-mip"

analyze ansible core playbooks:
  tags:
    - tfplenum-buildv2
  stage: code-analysis
  script: |
    echo "IP of runner is $(hostname -I | cut -d " " -f1)"
    echo "Current working directory is $(pwd)"
    ansible-lint core/playbooks/site.yml
    ansible-lint core/playbooks/remove-node.yml
  allow_failure: true
  only:
    variables:
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-dip"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "static_analysis_only"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-all"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-dip-mip"

analyze ansible deployer playbooks:
  tags:
    - tfplenum-buildv2
  stage: code-analysis
  script: |
    echo "IP of runner is $(hostname -I | cut -d " " -f1)"
    echo "Current working directory is $(pwd)"
    ansible-lint deployer/playbooks/site.yml
  allow_failure: true
  only:
    variables:
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-dip"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "static_analysis_only"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-all"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-dip-mip"

analyze ansible stigs playbooks:
  tags:
    - tfplenum-buildv2
  stage: code-analysis
  script: |
    echo "IP of runner is $(hostname -I | cut -d " " -f1)"
    echo "Current working directory is $(pwd)"
    ansible-lint stigs/playbooks/site.yml
  allow_failure: true
  only:
    variables:
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-dip"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "static_analysis_only"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-all"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-dip-mip"

analyze ansible mip playbooks:
  tags:
    - tfplenum-buildv2
  stage: code-analysis
  script: |
    echo "IP of runner is $(hostname -I | cut -d " " -f1)"
    echo "Current working directory is $(pwd)"
    ansible-lint mip/mip-core/site.yml
    ansible-lint mip/mip-deployer/site.yml
  allow_failure: true
  only:
    variables:
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "static_analysis_only"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-mip"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-all"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-dip-mip"

compile front-end:
  tags:
    - tfplenum-buildv2
  stage: code-analysis
  script: |
    echo "IP of runner is $(hostname -I | cut -d " " -f1)"
    echo "Current working directory is $(pwd)"
    docker run --rm -v $(pwd):/opt/tfplenum tfplenum/code-checker:1.1 /opt/tfplenum/web/setup/compile_frontend.sh
  only:
    variables:
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "static_analysis_only"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-dip"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-mip"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-all"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-dip-mip"

environment setup backend:
  tags:
    - tfplenum-buildv2
  stage: code-analysis
  script: |
    echo "IP of runner is $(hostname -I | cut -d " " -f1)"
    echo "Current working directory is $(pwd)"
    docker run --rm -v $(pwd):/opt/tfplenum tfplenum/code-checker:1.1 /opt/tfplenum/web/setup/setup_backend.sh
  only:
    variables:
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "static_analysis_only"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-dip"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-mip"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-all"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-dip-mip"

sonarqube front-end code base:
  tags:
    - tfplenum-buildv2
  stage: code-analysis
  script: |
    echo "IP of runner is $(hostname -I | cut -d " " -f1)"
    echo "Current working directory is $(pwd)"
    PATH_PWD=$(pwd)
    echo "TASK [setup: front-end] ********************************************************"
    ./web/setup/setup_frontend.sh
    echo "TASK [unit-test / coverage: front-end] *****************************************"
    docker run --rm --mount type=bind,source="$(pwd)",target=$PATH_PWD tfplenum/code-checker:1.1 $PATH_PWD/web/setup/test_coverage_frontend.sh
    echo "TASK [sonar-scanner: code-base ingestion] **************************************"
    sonar-scanner\
      -Dsonar.qualitygate.wait=true\
      -Dsonar.javascript.lcov.reportPaths=$PATH_PWD/web/frontend/test-coverage/lcov.info\
      -Dsonar.typescript.tsconfigPath=$PATH_PWD/web/frontend/src/tsconfig.app.json\
      -Dsonar.projectKey=tfplenum-frontend\
      -Dsonar.sources=web/frontend/src/app/> >(tee $PATH_PWD/web/frontend/sonar-report.txt) 2> >(tee $PATH_PWD/web/frontend/sonar-report.txt >&2)
    echo "TASK [sonar-scanner: Exporting results to Confluence] **************************"
    cat $PATH_PWD/web/frontend/sonar-report.txt | grep QUALITY >> $PATH_PWD/web/frontend/sonarlink.txt
    cat $PATH_PWD/web/frontend/sonar-report.txt | grep -i "total time" >> $PATH_PWD/web/frontend/scantime.txt
    export TFPLENUM_FRONTEND_SCAN_LINK="$(cut -d' ' -f10 $PATH_PWD/web/frontend/sonarlink.txt)"
    export TFPLENUM_FRONTEND_QUALITY_GATE_STATUS="$(cut -d' ' -f5 $PATH_PWD/web/frontend/sonarlink.txt)"
    export TFPLENUM_FRONTEND_TOTAL_SCAN_TIME="$(cut -d' ' -f5 $PATH_PWD/web/frontend/scantime.txt)"
    python3 $PATH_PWD/testing/confluence-update-scripts/sonar-confluence.py -u $CONFLUENCE_USERNAME \
    -pw $CONFLUENCE_PASSWORD -b $CI_COMMIT_REF_NAME -l $TFPLENUM_FRONTEND_SCAN_LINK -gs $TFPLENUM_FRONTEND_QUALITY_GATE_STATUS \
    -tt $TFPLENUM_FRONTEND_TOTAL_SCAN_TIME -pk "tfplenum-frontend"
  only:
    variables:
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "static_analysis_only"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-dip"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-mip"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-all"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-dip-mip"

sonarqube back-end code base:
  tags:
    - tfplenum-buildv2
  stage: code-analysis
  script: |
    echo "IP of runner is $(hostname -I | cut -d " " -f1)"
    echo "Current working directory is $(pwd)"
    PATH_PWD=$(pwd)
    echo "TASK [pylint / pytest-cov: back-end] *******************************************"
    docker run -e PATH_PWD=$PATH_PWD --rm --mount type=bind,source="$(pwd)",target=$PATH_PWD tfplenum/code-checker:1.1 $PATH_PWD/web/setup/pylint_pytest_backend.sh
    echo "TASK [sonar-scanner: code-base ingestion] **************************************"
    sonar-scanner\
      -Dsonar.qualitygate.wait=true\
      -Dsonar.python.pylint.reportPath=$PATH_PWD/web/backend/pylint-backend.txt\
      -Dsonar.projectKey=tfplenum-backend\
      -Dsonar.sources=web/backend/> >(tee $PATH_PWD/web/backend/sonar-report.txt) 2> >(tee $PATH_PWD/web/backend/sonar-report.txt >&2)
    echo "TASK [sonar-scanner: Exporting results to Confluence] **************************"
    cat $PATH_PWD/web/backend/sonar-report.txt | grep QUALITY >> $PATH_PWD/web/backend/sonarlink.txt
    cat $PATH_PWD/web/backend/sonar-report.txt | grep -i "total time" >> $PATH_PWD/web/backend/scantime.txt
    export TFPLENUM_BACKEND_SONAR_SCAN_LINK="$(cut -d' ' -f10 $PATH_PWD/web/backend/sonarlink.txt)"
    export TFPLENUM_BACKEND_QUALITY_GATE_STATUS="$(cut -d' ' -f5 $PATH_PWD/web/backend/sonarlink.txt)"
    export TFPLENUM_BACKEND_TOTAL_SCAN_TIME="$(cut -d' ' -f5 $PATH_PWD/web/backend/scantime.txt)"
    python3 $PATH_PWD/testing/confluence-update-scripts/sonar-confluence.py -u $CONFLUENCE_USERNAME \
    -pw $CONFLUENCE_PASSWORD -b $CI_COMMIT_REF_NAME -l $TFPLENUM_BACKEND_SONAR_SCAN_LINK -gs $TFPLENUM_BACKEND_QUALITY_GATE_STATUS \
    -tt $TFPLENUM_BACKEND_TOTAL_SCAN_TIME -pk "tfplenum-backend"
  only:
    variables:
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "static_analysis_only"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-dip"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-mip"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-all"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-dip-mip"

sonarqube testing pipeline:
  tags:
    - tfplenum-buildv2
  stage: code-analysis
  script: |
    echo "IP of runner is $(hostname -I | cut -d " " -f1)"
    echo "Current working directory is $(pwd)"
    PATH_PWD=$(pwd)
    echo "TASK [pylint: pipeline] ********************************************************"
    docker run -e PATH_PWD=$PATH_PWD --rm --mount type=bind,source="$(pwd)",target=$PATH_PWD tfplenum/code-checker:1.1 $PATH_PWD/testing/pipeline/pylint_pipeline.sh
    echo "TASK [sonar-scanner: pipeline ingestion] ***************************************"
    sonar-scanner\
      -Dsonar.qualitygate.wait=true\
      -Dsonar.python.pylint.reportPath=$PATH_PWD/testing/pipeline/pylint-pipeline.txt\
      -Dsonar.projectKey=tfplenum-test\
      -Dsonar.sources=testing/pipeline/> >(tee $PATH_PWD/testing/pipeline/sonar-report.txt) 2> >(tee $PATH_PWD/testing/pipeline/sonar-report.txt >&2)
    echo "TASK [sonar-scanner: Exporting results to Confluence] **************************"
    cat $PATH_PWD/testing/pipeline/sonar-report.txt | grep QUALITY >> $PATH_PWD/testing/pipeline/sonarlink.txt
    cat $PATH_PWD/testing/pipeline/sonar-report.txt | grep -i "total time" >> $PATH_PWD/testing/pipeline/scantime.txt
    export TFPLENUM_SONAR_SCAN_LINK="$(cut -d' ' -f10 $PATH_PWD/testing/pipeline/sonarlink.txt)"
    export TFPLENUM_QUALITY_GATE_STATUS="$(cut -d' ' -f5 $PATH_PWD/testing/pipeline/sonarlink.txt)"
    export TFPLENUM_TOTAL_SCAN_TIME="$(cut -d' ' -f5 $PATH_PWD/testing/pipeline/scantime.txt)"
    python3 $PATH_PWD/testing/confluence-update-scripts/sonar-confluence.py -u $CONFLUENCE_USERNAME \
    -pw $CONFLUENCE_PASSWORD -b $CI_COMMIT_REF_NAME -l $TFPLENUM_SONAR_SCAN_LINK -gs $TFPLENUM_QUALITY_GATE_STATUS \
    -tt $TFPLENUM_TOTAL_SCAN_TIME -pk "tfplenum-test"
  only:
    variables:
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "static_analysis_only"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-dip"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-mip"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-all"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-dip-mip"

