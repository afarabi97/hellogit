analyze ansible test playbooks:
  tags:
    - tfplenum-buildv2
  stage: code-analysis
  script: |
    echo "IP of runner is $(hostname -I)"
    echo "Current working directory is $(pwd)"
    ansible-lint testing/playbooks/site.yml
  allow_failure: true
  only:
    variables:
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-dip"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "static_analysis_only"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-all"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-dip-mip"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-mip"

analyze ansible bootstrap playbooks:
  tags:
    - tfplenum-buildv2
  stage: code-analysis
  script: |
    echo "IP of runner is $(hostname -I)"
    echo "Current working directory is $(pwd)"
    ansible-lint bootstrap/playbooks/site.yml
  allow_failure: true
  only:
    variables:
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-dip"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "static_analysis_only"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-all"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-dip-mip"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-mip"

analyze ansible core playbooks:
  tags:
    - tfplenum-buildv2
  stage: code-analysis
  script: |
    echo "IP of runner is $(hostname -I)"
    echo "Current working directory is $(pwd)"
    ansible-lint core/playbooks/site.yml
    ansible-lint core/playbooks/remove-node.yml
  allow_failure: true
  only:
    variables:
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-dip"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "static_analysis_only"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-all"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-dip-mip"

analyze ansible deployer playbooks:
  tags:
    - tfplenum-buildv2
  stage: code-analysis
  script: |
    echo "IP of runner is $(hostname -I)"
    echo "Current working directory is $(pwd)"
    ansible-lint deployer/playbooks/site.yml
  allow_failure: true
  only:
    variables:
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-dip"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "static_analysis_only"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-all"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-dip-mip"

analyze ansible stigs playbooks:
  tags:
    - tfplenum-buildv2
  stage: code-analysis
  script: |
    echo "IP of runner is $(hostname -I)"
    echo "Current working directory is $(pwd)"
    ansible-lint stigs/playbooks/site.yml
  allow_failure: true
  only:
    variables:
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-dip"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "static_analysis_only"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-all"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-dip-mip"

analyze ansible mip playbooks:
  tags:
    - tfplenum-buildv2
  stage: code-analysis
  script: |
    echo "IP of runner is $(hostname -I)"
    echo "Current working directory is $(pwd)"
    ansible-lint mip/mip-core/site.yml
    ansible-lint mip/mip-deployer/site.yml
  allow_failure: true
  only:
    variables:
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "static_analysis_only"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-mip"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-all"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-dip-mip"

compile front-end:
  tags:
    - tfplenum-buildv2
  stage: code-analysis
  script: |
    echo "IP of runner is $(hostname -I)"
    echo "Current working directory is $(pwd)"
    docker run --rm -v $(pwd):/opt/tfplenum tfplenum/code-checker:1.1 /opt/tfplenum/web/setup/compile_frontend.sh
  only:
    variables:
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "static_analysis_only"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-dip"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-mip"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-all"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-dip-mip"

environment setup backend:
  tags:
    - tfplenum-buildv2
  stage: code-analysis
  script: |
    echo "IP of runner is $(hostname -I)"
    echo "Current working directory is $(pwd)"
    docker run --rm -v $(pwd):/opt/tfplenum tfplenum/code-checker:1.1 /opt/tfplenum/web/setup/setup_backend.sh
  only:
    variables:
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "static_analysis_only"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-dip"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-mip"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-all"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-dip-mip"

sonarqube analyze production code:
  tags:
    - tfplenum-buildv2
  stage: code-analysis
  script: |
    echo "IP of runner is $(hostname -I)"
    echo "Current working directory is $(pwd)"
    PATH_PWD=$(pwd)
    echo "TASK [setup: front-end] ********************************************************"
    ./web/setup/setup_frontend.sh
    echo "TASK [unit-test / coverage: front-end] *****************************************"
    docker run --rm --mount type=bind,source="$(pwd)",target=/opt/tfplenum tfplenum/code-checker:1.1 /opt/tfplenum/web/setup/test_coverage_frontend.sh
    sed -i "s#/opt/tfplenum#$PATH_PWD#g" $PATH_PWD/web/frontend/test-coverage/lcov.info
    echo "TASK [pylint / pytest-cov: back-end] *******************************************"
    docker run --rm --mount type=bind,source="$(pwd)",target=/opt/tfplenum tfplenum/code-checker:1.1 /opt/tfplenum/web/setup/pylint_pytest_backend.sh
    sed -i "s#backend/#$PATH_PWD/web/backend/#g" $PATH_PWD/web/setup/pylint-backend.txt
    echo "TASK [sonar-scanner: code-base ingestion] **************************************"
    sonar-scanner\
      -Dsonar.qualitygate.wait=true\
      -Dsonar.python.pylint.reportPath=$PATH_PWD/web/setup/pylint-backend.txt\
      -Dsonar.exclusions=**/test-coverage/**\
      -Dsonar.coverage.exclusions=**/test-coverage/**,$PATH_PWD/web/setup/\
      -Dsonar.javascript.lcov.reportPaths=$PATH_PWD/web/frontend/test-coverage/lcov.info\
      -Dsonar.typescript.tsconfigPath=$PATH_PWD/web/frontend/src/tsconfig.app.json\
      -Dsonar.projectKey=tfplenum\
      -Dsonar.sources=web/
  only:
    variables:
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "static_analysis_only"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-dip"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-mip"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-all"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-dip-mip"

sonarqube analyze test code:
  tags:
    - tfplenum-buildv2
  stage: code-analysis
  script: |
    echo "IP of runner is $(hostname -I)"
    echo "Current working directory is $(pwd)"
    PATH_PWD=$(pwd)
    echo "TASK [pylint: pipeline] ********************************************************"
    docker run --rm --mount type=bind,source="$(pwd)",target=/opt/tfplenum tfplenum/code-checker:1.1 /opt/tfplenum/testing/pipeline/pylint_pipeline.sh
    sed -i "s#jobs/#$PATH_PWD/testing/pipeline/jobs/#g" $PATH_PWD/testing/pipeline/pylint-pipeline.txt
    sed -i "s#models/#$PATH_PWD/testing/pipeline/models/#g" $PATH_PWD/testing/pipeline/pylint-pipeline.txt
    sed -i "s#playbooks/#$PATH_PWD/testing/pipeline/playbooks/#g" $PATH_PWD/testing/pipeline/pylint-pipeline.txt
    sed -i "s#templates/#$PATH_PWD/testing/pipeline/templates/#g" $PATH_PWD/testing/pipeline/pylint-pipeline.txt
    sed -i "s#util/#$PATH_PWD/testing/pipeline/util/#g" $PATH_PWD/testing/pipeline/pylint-pipeline.txt
    sed -i "s#baremetal_pipeline.py#$PATH_PWD/testing/pipeline/baremetal_pipeline.py#g" $PATH_PWD/testing/pipeline/pylint-pipeline.txt
    sed -i "/^pipeline.py/s#pipeline.py#$PATH_PWD/testing/pipeline/pipeline.py#g" $PATH_PWD/testing/pipeline/pylint-pipeline.txt
    echo "TASK [sonar-scanner: pipeline ingestion] ***************************************"
    sonar-scanner\
      -Dsonar.qualitygate.wait=true\
      -Dsonar.python.pylint.reportPath=$PATH_PWD/testing/pipeline/pylint-pipeline.txt\
      -Dsonar.projectKey=tfplenum-test\
      -Dsonar.sources=testing/
  allow_failure: true
  only:
    variables:
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "static_analysis_only"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-dip"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-mip"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-all"
      - $RUN_CODE_CHECKS == "yes" && $PIPELINE == "developer-dip-mip"

# include:
  # - template: Container-Scanning.gitlab-ci.yml

# container_scanning:
#   image:
#     name: gitlab.sil.lab:5050/tfplenum/tfplenum/klair:2
#     entrypoint: []
#   variables:
#     GIT_STRATEGY: clone
#     CI_APPLICATION_REPOSITORY: gitlab.sil.lab:5050/tfplenum/tfplenum/zeek
#     CI_APPLICATION_TAG: 3.0.0
#   artifacts:
#     paths:
#       - gl-container-scanning-report.json
#     reports:
#       container_scanning: gl-container-scanning-report.json
#   tags:
#     - tfplenum-docker
#   only:
#     variables:
#       - $PIPELINE == "code_quality"
