Create a Kali OVA:
  stage: build
  tags:
    - tfplenum-buildv2
  script: |
    args=(
      setup-kali
      --commit-hash "$CI_COMMIT_SHORT_SHA"
      --cpu "0"
      --disk-size "0"
      --dns-servers $DNS_SERVERS
      --domain "lan"
      --export-password "$OVA_EXPORT_PASSWORD"
      --gateway "$VM_GATEWAY"
      --hostname "Kali"
      --memory "0"
      --network-block-index 0
      --network-id "$NETWORK_ID"
      --pipeline "$PIPELINE"
      --portgroup "$VCENTER_PORTGROUP"
      --storage-disk-size "0"
      --vcenter-cluster "$VCENTER_CLUSTER"
      --vcenter-datacenter "$VCENTER_DATACENTER"
      --vcenter-ipaddress "$VCENTER_IPADDRESS"
      --vcenter-password "$VCENTER_PASSWORD"
      --vcenter-username "$VCENTER_USERNAME"
      --vm-datastore "$VCENTER_DATASTORE"
      --vm-folder "$VMWARE_FOLDER"
      --vm-name "Kali"
      --vm-password "$DEFAULT_TEMPLATE_PASSWORD"
      --vm-template "$KALI_TEMPLATE_TO_CLONE"
    )
    echo "${args[@]}"
    python3 testing/pipeline/pipeline.py "${args[@]}"
  only:
    variables:
      - $PIPELINE == "export-kali"
  artifacts:
    untracked: true

Create a REMnux OVA:
  stage: build
  tags:
    - tfplenum-buildv2
  script: |
    args=(
      setup-remnux
      --commit-hash "$CI_COMMIT_SHORT_SHA"
      --cpu "0"
      --disk-size "0"
      --dns-servers $DNS_SERVERS
      --domain "lan"
      --export-password "$OVA_EXPORT_PASSWORD"
      --gateway "$VM_GATEWAY"
      --hostname "remnux"
      --memory "0"
      --network-block-index 0
      --network-id "$NETWORK_ID"
      --pipeline "$PIPELINE"
      --portgroup "$VCENTER_PORTGROUP"
      --storage-disk-size "0"
      --vcenter-cluster "$VCENTER_CLUSTER"
      --vcenter-datacenter "$VCENTER_DATACENTER"
      --vcenter-ipaddress "$VCENTER_IPADDRESS"
      --vcenter-password "$VCENTER_PASSWORD"
      --vcenter-username "$VCENTER_USERNAME"
      --vm-datastore "$VCENTER_DATASTORE"
      --vm-folder "$VMWARE_FOLDER"
      --vm-name "REMnux"
      --vm-password "$DEFAULT_TEMPLATE_PASSWORD"
      --vm-template "$REMNUX_TEMPLATE_TO_CLONE"
    )
    echo "${args[@]}"
    python3 testing/pipeline/pipeline.py "${args[@]}"
  only:
    variables:
      - $PIPELINE == "export-remnux"
  artifacts:
    untracked: true
