Setup DIP Controller:
  stage: build
  tags:
    - tfplenum-buildv2
  script: |
    echo "IP of runner is $(hostname -I | cut -d " " -f1)"
    echo "Current working directory is $(pwd)"
    echo "tfplenum-dip-cache-${CI_PIPELINE_ID}"

    echo "VM_PREFIX is $VM_PREFIX"
    echo "TEMPLATE TO CLONE IS $DIP_TEMPLATE_TO_CLONE"
    python3 testing/pipeline/pipeline.py           \
    --system-name         "DIP"                    \
    setup-controller                               \
    --vcenter-ipaddress   "$VCENTER_IPADDRESS"     \
    --vcenter-username    "$VCENTER_USERNAME"      \
    --vcenter-password    "$VCENTER_PASSWORD"      \
    --vcenter-datacenter  "$VCENTER_DATACENTER"    \
    --repo-username       "$REPO_USERNAME"         \
    --repo-password       "$REPO_PASSWORD"         \
    --repo-url            "$REPO_URL"              \
    --portgroup           "$VCENTER_PORTGROUP"     \
    --network-id          "$NETWORK_ID"            \
    --network-block-index $DIP_NETWORK_BLOCK_INDEX \
    --dns-servers         $DNS_SERVERS             \
    --vm-folder           "$VMWARE_FOLDER"         \
    --vm-template         "$DIP_TEMPLATE_TO_CLONE" \
    --gateway             "$VM_GATEWAY"            \
    --vm-prefix           "$VM_PREFIX-dip"         \
    --domain              "$KIT_DOMAIN"            \
    --branch-name         "$CI_COMMIT_REF_NAME"    \
    --run-type            "$BUILD_TYPE"            \
    --vm-datastore        "$VCENTER_DATASTORE"     \
    --update-code         "$UPDATE_CODE"
  artifacts:
    untracked: true
  only:
    variables:
      - $PIPELINE == "nightly_build"
      - $PIPELINE == "export-all"
      - $PIPELINE == "developer-dip"
      - $PIPELINE == "developer-all"
      - $PIPELINE == "developer-dip-mip"

Create a standalone MinIO server:
  stage: build
  tags:
    - tfplenum-buildv2
  script: |
    args=(
      --system-name "DIP"
      gip-setup minio
      create
      --vcenter-ipaddress "$VCENTER_IPADDRESS"
      --vcenter-username "$VCENTER_USERNAME"
      --vcenter-password "$VCENTER_PASSWORD"
      --vcenter-datacenter "$VCENTER_DATACENTER"
      --portgroup "$VCENTER_PORTGROUP"
      --network-id "$NETWORK_ID"
      --network-block-index "$DIP_NETWORK_BLOCK_INDEX"
      --dns-servers $DNS_SERVERS
      --vm-folder "$VMWARE_FOLDER"
      --vm-template "$MINIO_TEMPLATE_TO_CLONE"
      --gateway "$VM_GATEWAY"
      --vm-prefix "$VM_PREFIX-dip"
      --vm-datastore "$VCENTER_DATASTORE"
      --disk-size $MINIO_DISK_SIZE
      --cpu $MINIO_CPU
      --memory $MINIO_MEMORY
      --extra-disk $MINIO_STORAGE_SIZE
    )

    echo "${args[@]}"
    python3 testing/pipeline/pipeline.py "${args[@]}"
  only:
    variables:
      - $PIPELINE == "export-minio"
      - $PIPELINE == "export-all"
      - $MINIO_VM == "yes" && $PIPELINE == "developer-dip"
      - $MINIO_VM == "yes" && $PIPELINE == "developer-all"
  artifacts:
    paths:
      - vcentersettings_minio.yml
      - nodesettings_minio.yml


DIP Kickstart:
  needs: ["Setup DIP Controller"]
  stage: kickstart
  tags:
    - tfplenum-buildv2
  script: |
    echo "IP of runner is $(hostname -I | cut -d " " -f1)"
    echo "Current working directory is $(pwd)"
    echo "VM_PREFIX is $VM_PREFIX"
    python3 testing/pipeline/pipeline.py \
    --system-name "DIP" \
    run-kickstart \
    --vcenter-ipaddress "$VCENTER_IPADDRESS" \
    --vcenter-username "$VCENTER_USERNAME" \
    --vcenter-password "$VCENTER_PASSWORD" \
    --vcenter-datacenter "$VCENTER_DATACENTER" \
    --portgroup "$VCENTER_PORTGROUP" \
    --network-id "$NETWORK_ID" \
    --network-block-index $DIP_NETWORK_BLOCK_INDEX \
    --dns-servers $DNS_SERVERS \
    --vm-folder "$VMWARE_FOLDER" \
    --vm-prefix "$VM_PREFIX" \
    --domain "$KIT_DOMAIN" \
    --gateway "$VM_GATEWAY" \
    --num-servers $NUM_SERVERS \
    --num-sensors $NUM_SENSORS \
    --server-cpu $SERVER_CPU \
    --server-mem $SERVER_MEM \
    --sensor-cpu $SENSOR_CPU \
    --sensor-mem $SENSOR_MEM \
    --vm-datastore "$VCENTER_DATASTORE" \
    --os-raid "$VM_RAID" \
    --upstream-dns "$UPSTREAM_DNS" \
    --upstream-ntp "$UPSTREAM_NTP"
  artifacts:
    untracked: true
  retry: 2
  only:
    variables:
      - $PIPELINE == "developer-dip"
      - $PIPELINE == "developer-all"
      - $PIPELINE == "developer-dip-mip"

DIP Kit:
  needs: ["DIP Kickstart", "Setup DIP Controller"]
  stage: kit
  tags:
    - tfplenum-buildv2
  script: |
    echo "IP of runner is $(hostname -I | cut -d " " -f1)"
    echo "Current working directory is $(pwd)"
    python3 testing/pipeline/pipeline.py --system-name "DIP" run-kit
  artifacts:
    untracked: true
  only:
    variables:
      - $PIPELINE == "developer-dip"
      - $PIPELINE == "developer-all"
      - $PIPELINE == "developer-dip-mip"

Secure MinIO with a TLS certificate:
  stage: configure:minio
  tags:
    - tfplenum-buildv2
  script: |
    args=(
      --system-name "DIP"
      gip-setup minio
      create-certificate
    )

    echo "${args[@]}"
    python3 testing/pipeline/pipeline.py "${args[@]}"
  only:
    variables: # The TLS certificate should not be exported.
      - $MINIO_VM == "yes" && $PIPELINE == "developer-dip" && $MINIO_USE_TLS == "yes"
      - $MINIO_VM == "yes" && $PIPELINE == "developer-all" && $MINIO_USE_TLS == "yes"

Perform DIP STIGs:
  stage: stig-kit
  tags:
    - tfplenum-buildv2
  script: |
    echo "IP of runner is $(hostname -I | cut -d " " -f1)"
    echo "Current working directory is $(pwd)"
    python3 testing/pipeline/pipeline.py --system-name "DIP" run-stigs
  only:
    variables:
      - $RUN_DIP_STIGS == "yes" && $PIPELINE == "developer-dip"
      - $RUN_DIP_STIGS == "yes" && $PIPELINE == "developer-all"
      - $RUN_DIP_STIGS == "yes" && $PIPELINE == "developer-dip-mip"

Perform DIP Security Scans:
  stage: security_scans
  tags:
    - tfplenum-buildv2
  script: |
    echo "IP of runner is $(hostname -I | cut -d " " -f1)"
    echo "Current working directory is $(pwd)"
    python3 testing/pipeline/run_acas.py \
    --ipaddress "$ACAS_IPADDRESS" \
    --username "$ACAS_USERNAME" \
    --password "$ACAS_PASSWORD" \
    --scan_name "$DIP_ACAS_SCAN_TO_RUN" \
    --report-name "DIP_ACAS_Report.pdf" \
    --nodes-to-scan $(cat dipnodestoscan.txt)
  only:
    variables:
      - $RUN_ACAS == "yes" && $PIPELINE == "developer-dip"
      - $RUN_ACAS == "yes" && $PIPELINE == "developer-all"
      - $RUN_ACAS == "yes" && $PIPELINE == "developer-dip-mip"
  artifacts:
    untracked: true

CVAH Catalog:
  stage: catalog
  tags:
    - tfplenum-buildv2
  script: |
    echo "IP of runner is $(hostname -I | cut -d " " -f1)"
    echo "Current working directory is $(pwd)"
    python3 testing/pipeline/pipeline.py --system-name "DIP" run-catalog suricata
    python3 testing/pipeline/pipeline.py --system-name "DIP" run-catalog moloch-viewer
    python3 testing/pipeline/pipeline.py --system-name "DIP" run-catalog moloch-capture
    python3 testing/pipeline/pipeline.py --system-name "DIP" run-catalog zeek
    python3 testing/pipeline/pipeline.py --system-name "DIP" run-catalog logstash
    python3 testing/pipeline/pipeline.py --system-name "DIP" run-catalog wikijs
    python3 testing/pipeline/pipeline.py --system-name "DIP" run-catalog cortex
    python3 testing/pipeline/pipeline.py --system-name "DIP" run-catalog misp
    python3 testing/pipeline/pipeline.py --system-name "DIP" run-catalog hive
    python3 testing/pipeline/pipeline.py --system-name "DIP" run-catalog mongodb
    python3 testing/pipeline/pipeline.py --system-name "DIP" run-catalog rocketchat
    # python3 testing/pipeline/pipeline.py --system-name "DIP" run-catalog --process reinstall wikijs
    # python3 testing/pipeline/pipeline.py --system-name "DIP" run-catalog --process reinstall suricata
  only:
    variables:
      - $RUN_INTEGRATION == "yes" && $PIPELINE == "developer-dip"
      - $RUN_INTEGRATION == "yes" && $PIPELINE == "developer-all"
      - $RUN_INTEGRATION == "yes" && $PIPELINE == "developer-dip-mip"

DIP Run Python Unit Tests:
  tags:
    - tfplenum-buildv2
  stage: unit-test
  script: |
    echo "IP of runner is $(hostname -I | cut -d " " -f1)"
    echo "Current working directory is $(pwd)"
    python3 testing/pipeline/pipeline.py --system-name "DIP" run-unit-tests
  only:
    variables:
      - $PIPELINE == "developer-dip"
      - $PIPELINE == "developer-all"
      - $PIPELINE == "developer-dip-mip"

System Function Testing:
  stage: integration-test
  tags:
    - tfplenum-buildv2
  script: |
    echo "IP of runner is $(hostname -I | cut -d " " -f1)"
    echo "Current working directory is $(pwd)"
    python3 testing/pipeline/pipeline.py --system-name "DIP" run-integration-tests
  only:
    variables:
      - $RUN_INTEGRATION == "yes" && $PIPELINE == "developer-dip"
      - $RUN_INTEGRATION == "yes" && $PIPELINE == "developer-all"
      - $RUN_INTEGRATION == "yes" && $PIPELINE == "developer-dip-mip"
  artifacts:
    paths:
      - "./*.xml"
    reports:
      junit: "./*.xml"

Simulate Power Failure:
  stage: test-powerfailure
  tags:
    - tfplenum-buildv2
  script: |
    echo "IP of runner is $(hostname -I | cut -d " " -f1)"
    echo "Current working directory is $(pwd)"
    python3 testing/pipeline/pipeline.py --system-name "DIP" simulate-power-failure
  only:
    variables:
      - $RUN_INTEGRATION == "yes" && $PIPELINE == "developer-dip"
      - $RUN_INTEGRATION == "yes" && $PIPELINE == "developer-all"
      - $RUN_INTEGRATION == "yes" && $PIPELINE == "developer-dip-mip"

System Function Testing2:
  stage: rerun-integration-test
  tags:
    - tfplenum-buildv2
  script: |
    echo "IP of runner is $(hostname -I | cut -d " " -f1)"
    echo "Current working directory is $(pwd)"
    python3 testing/pipeline/pipeline.py --system-name "DIP" run-integration-tests
  only:
    variables:
      - $RUN_INTEGRATION == "yes" && $PIPELINE == "developer-dip"
      - $RUN_INTEGRATION == "yes" && $PIPELINE == "developer-all"
      - $RUN_INTEGRATION == "yes" && $PIPELINE == "developer-dip-mip"
  artifacts:
    paths:
      - "./*.xml"
    reports:
      junit: "./*.xml"

DIP Cleanup:
  stage: cleanup
  tags:
    - tfplenum-buildv2
  script: |
    echo "IP of runner is $(hostname -I | cut -d " " -f1)"
    echo "Current working directory is $(pwd)"
    python3 testing/pipeline/pipeline.py --system-name "DIP" run-cleanup \
    --create-nightly "$CREATE_NIGHTLY"
  only:
    variables:
      - $IS_CLEANUP == "yes" && $PIPELINE == "developer-dip"
      - $IS_CLEANUP == "yes" && $PIPELINE == "developer-all"
      - $IS_CLEANUP == "yes" && $PIPELINE == "developer-dip-mip"
