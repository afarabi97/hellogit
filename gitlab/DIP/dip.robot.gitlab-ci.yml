robot:sso_login:
  stage: robot-test-sso
  tags:
    - docker-runner
  image: $LATEST_ROBOT_AUTOMATOR_IMAGE
  extends: .setup-robot-script
  script: |
    python3 -m run.runner -c regression/00__installation \
      -t 00__dipInitialSSOLogin \
      -r $ROBOT_ZEPHYR_CYCLE \
      -p $ROBOT_ZEPHYR_PROJECT_VERSION \
      -b $ROBOT_BROWSER -h \
      -v HOST:$controller_ip \
      -v HOST_USERNAME:root \
      -v HOST_PASSWORD:$password \
      -v PIPELINE:$PIPELINE || exit_code=$?; [ $? -ge 0 ] && /bin/cp -rf /usr/src/robot/output $build_path/; exit $exit_code
  artifacts:
    untracked: true
    when: always
  allow_failure: false
  rules:
    - if: ($RUN_ROBOT_INTEGRATION == "yes" || $RUN_ROBOT_REGRESSION == "yes") && $PIPELINE == "controller-only"
    - if: ($RUN_ROBOT_INTEGRATION == "yes" || $RUN_ROBOT_REGRESSION == "yes") && $PIPELINE == "developer-all"
    - if: ($RUN_ROBOT_INTEGRATION == "yes" || $RUN_ROBOT_REGRESSION == "yes") && $PIPELINE == "hw-developer-all"
  retry: 2

robot:deploy_kit:
  stage: robot-test-deploy
  tags:
    - docker-runner
  image: $LATEST_ROBOT_AUTOMATOR_IMAGE
  extends: .setup-robot-script
  script: |
    vcenter_password=`echo "$VCENTER_PASSWORD" | base64 -d`
    python3 -m run.runner -c regression/00__installation \
      -t 01__dipDeployKit \
      -r $ROBOT_ZEPHYR_CYCLE \
      -p $ROBOT_ZEPHYR_PROJECT_VERSION \
      -b $ROBOT_BROWSER -h \
      -v HOST:$controller_ip \
      -v HOST_USERNAME:root \
      -v HOST_PASSWORD:$password \
      -v DOMAIN:$KIT_DOMAIN \
      -v VCENTER_IPADDRESS:$VCENTER_IPADDRESS \
      -v VCENTER_USERNAME:$VCENTER_USERNAME \
      -v VCENTER_PASSWORD:$vcenter_password \
      -v VCENTER_PORTGROUP:$VCENTER_PORTGROUP \
      -v VCENTER_FOLDER:$VMWARE_FOLDER \
      -v VM_PREFIX:$VM_PREFIX \
      -v PIPELINE:$PIPELINE || exit_code=$?; [ $? -ge 0 ] && /bin/cp -rf /usr/src/robot/output $build_path/; exit $exit_code
  artifacts:
    untracked: true
    when: always
  allow_failure: false
  rules:
    - if: ($RUN_ROBOT_REGRESSION == "yes" || $RUN_ROBOT_INTEGRATION == "yes") && $PIPELINE == "controller-only"

robot:catalog:
  stage: robot-test-install
  tags:
    - docker-runner
  image: $LATEST_ROBOT_AUTOMATOR_IMAGE
  extends: .setup-robot-script
  script: |
    python3 -m run.runner -c regression/01__catalog \
      -r $ROBOT_ZEPHYR_CYCLE \
      -p $ROBOT_ZEPHYR_PROJECT_VERSION \
      -b $ROBOT_BROWSER -h -pb \
      -v HOST:$controller_ip \
      -v HOST_USERNAME:root \
      -v HOST_PASSWORD:$password \
      -v PIPELINE:$PIPELINE || exit_code=$?; [ $? -ge 0 ] && /bin/cp -rf /usr/src/robot/output $build_path/; exit $exit_code
  artifacts:
    untracked: true
    when: always
  allow_failure: false
  needs:
    - job: "Sensor Setup"
      optional: true
    - job: "Hardware Sensor Setup"
      optional: true
    - job: "Service Setup"
      optional: true
    - job: robot:deploy_kit
      optional: true
  rules:
    - if: $RUN_ROBOT_REGRESSION == "yes" && $PIPELINE == "controller-only"
    - if: $RUN_ROBOT_REGRESSION == "yes" && $PIPELINE == "developer-all"
    - if: $RUN_ROBOT_REGRESSION == "yes" && $PIPELINE == "hw-developer-all"
    - if: $RUN_ROBOT_REGRESSION == "yes" && $PIPELINE == "robot-tests-only"
  retry: 2

robot:add_virtual_nodes:
  stage: robot-test-install
  tags:
    - docker-runner
  image: $LATEST_ROBOT_AUTOMATOR_IMAGE
  extends: .setup-robot-script
  script: |
    python3 -m run.runner -c regression/02__nodes \
      -t 00__addVirtualNodes \
      -r $ROBOT_ZEPHYR_CYCLE \
      -p $ROBOT_ZEPHYR_PROJECT_VERSION \
      -b $ROBOT_BROWSER -h -pb \
      -v HOST:$controller_ip \
      -v HOST_USERNAME:root \
      -v HOST_PASSWORD:$password \
      -v PIPELINE:$PIPELINE || exit_code=$?; [ $? -ge 0 ] && /bin/cp -rf /usr/src/robot/output $build_path/; exit $exit_code
  artifacts:
    untracked: true
    when: always
  allow_failure: true
  needs:
    - job: robot:catalog
  rules:
    - if: $RUN_ROBOT_REGRESSION == "yes" && $PIPELINE == "controller-only"
    - if: $RUN_ROBOT_REGRESSION == "yes" && $PIPELINE == "developer-all"
    - if: $RUN_ROBOT_REGRESSION == "yes" && $PIPELINE == "hw-developer-all"
    - if: $RUN_ROBOT_REGRESSION == "yes" && $PIPELINE == "robot-tests-only"
  retry: 2

robot:operations:
  stage: robot-test-operations
  tags:
    - docker-runner
  image: $LATEST_ROBOT_AUTOMATOR_IMAGE
  extends: .setup-robot-script
  script: |
    curl -k -o /usr/src/robot/elastic_license_exp_11_29_2023_robot.json  https://nexus.sil.lab/repository/tfplenum-repo/testfiles/elastic/elastic_license_exp_11_29_2023_robot.json
    curl -k -o /usr/src/robot/data-with-image_robot.pcap  https://nexus.sil.lab/repository/tfplenum-repo/testfiles/pcap/data-with-image_robot.pcap
    curl -k -o /usr/src/robot/mal_md5_robot.txt  https://nexus.sil.lab/repository/tfplenum-repo/testfiles/zeek/intel/mal_md5_robot.txt
    python3 -m run.runner -c "regression/03__operations" \
      -r $ROBOT_ZEPHYR_CYCLE \
      -p $ROBOT_ZEPHYR_PROJECT_VERSION \
      -b $ROBOT_BROWSER -h \
      -v HOST:$controller_ip \
      -v HOST_USERNAME:root \
      -v HOST_PASSWORD:$password \
      -v DOMAIN:$KIT_DOMAIN \
      -v KIT_VERSION:$TFPLENUM_EXPORT_VERSION \
      -v PIPELINE:$PIPELINE || exit_code=$?; [ $? -ge 0 ] && /bin/cp -rf /usr/src/robot/output $build_path/; exit $exit_code
  artifacts:
    untracked: true
    when: always
  allow_failure: false
  rules:
    - if: $RUN_ROBOT_REGRESSION == "yes" && $PIPELINE == "controller-only"
    - if: $RUN_ROBOT_REGRESSION == "yes" && $PIPELINE == "developer-all"
    - if: $RUN_ROBOT_REGRESSION == "yes" && $PIPELINE == "hw-developer-all"
    - if: $RUN_ROBOT_REGRESSION == "yes" && $PIPELINE == "robot-tests-only"
  retry: 2

robot:cleanup:
  stage: robot-test-cleanup
  tags:
    - docker-runner
  image: $LATEST_ROBOT_AUTOMATOR_IMAGE
  extends: .setup-robot-script
  script: |
    python3 -m run.runner -c regression/04__cleanup \
      -t 00__dipCleanup \
      -r $ROBOT_ZEPHYR_CYCLE \
      -p $ROBOT_ZEPHYR_PROJECT_VERSION \
      -b $ROBOT_BROWSER -h -pb \
      -v HOST:$controller_ip \
      -v HOST_USERNAME:root \
      -v HOST_PASSWORD:$password \
      -v PIPELINE:$PIPELINE || exit_code=$?; [ $? -ge 0 ] && /bin/cp -rf /usr/src/robot/output $build_path/; exit $exit_code
  artifacts:
    untracked: true
    when: always
  allow_failure: true
  rules:
    - if: $RUN_ROBOT_REGRESSION == "yes" && $PIPELINE == "controller-only"
    - if: $RUN_ROBOT_REGRESSION == "yes" && $PIPELINE == "developer-all"
    - if: $RUN_ROBOT_REGRESSION == "yes" && $PIPELINE == "hw-developer-all"
    - if: $RUN_ROBOT_REGRESSION == "yes" && $PIPELINE == "robot-tests-only"
  retry: 2

robot:integration:
  stage: robot-test-integration
  tags:
    - docker-runner
  image: $LATEST_ROBOT_AUTOMATOR_IMAGE
  extends: .setup-robot-script
  script: |
    python3 -m run.runner -c integration \
      -t dipNewTests \
      -r $ROBOT_ZEPHYR_CYCLE \
      -p $ROBOT_ZEPHYR_PROJECT_VERSION \
      -b $ROBOT_BROWSER -h \
      -v HOST:$controller_ip \
      -v HOST_USERNAME:root \
      -v HOST_PASSWORD:$password \
      -v PIPELINE:$PIPELINE || exit_code=$?; [ $? -ge 0 ] && /bin/cp -rf /usr/src/robot/output $build_path/; exit $exit_code
  artifacts:
    untracked: true
    when: always
  allow_failure: false
  rules:
    - if: $RUN_ROBOT_INTEGRATION == "yes" && $PIPELINE == "controller-only"
    - if: $RUN_ROBOT_INTEGRATION == "yes" && $PIPELINE == "developer-all"
    - if: $RUN_ROBOT_INTEGRATION == "yes" && $PIPELINE == "hw-developer-all"
    - if: $RUN_ROBOT_REGRESSION == "yes" && $PIPELINE == "robot-tests-only"
