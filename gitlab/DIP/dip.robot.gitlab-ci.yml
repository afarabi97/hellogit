robot:sso_login:
  stage: robot-test-sso
  tags:
    - docker-runner
  image: $LATEST_ROBOT_AUTOMATOR_IMAGE
  extends: .setup-robot-script
  script: |
    python3 -m run.runner -c integration \
      -t "000_initial_login/00_dipInitialSSOLogin" \
      -r $ROBOT_REGRESSION_ZEPHYR_CYCLE \
      -p $ROBOT_REGRESSION_ZEPHYR_PROJECT_VERSION -h -b $ROBOT_BROWSER \
      -v HOST:$controller_ip \
      -v HOST_USERNAME:root \
      -v HOST_PASSWORD:$password \
      -v PIPELINE:$PIPELINE || exit_code=$?; [ $? -ge 0 ] && /bin/cp -rf /usr/src/robot/output $build_path/; exit $exit_code
  artifacts:
    untracked: true
    when: always
  allow_failure: false
  only:
    variables:
      - ($RUN_INTEGRATION == "yes" || $RUN_REGRESSION == "yes") && $PIPELINE == "developer-all"
      - ($RUN_INTEGRATION == "yes" || $RUN_REGRESSION == "yes") && $PIPELINE == "hw-developer-all"
  retry: 2

robot:catalog:independents:
  stage: robot-test-setup
  tags:
    - docker-runner
  image: $LATEST_ROBOT_AUTOMATOR_IMAGE
  extends: .setup-robot-script
  script: |
    python3 -m run.runner -c integration \
      -t "010_install_catalog_apps/00_installPMOApps" \
      -r INTEGRATION \
      -p $ROBOT_REGRESSION_ZEPHYR_PROJECT_VERSION -h -b $ROBOT_BROWSER \
      -v HOST:$controller_ip \
      -v HOST_USERNAME:root \
      -v HOST_PASSWORD:$password \
      -v PIPELINE:$PIPELINE || exit_code=$?; [ $? -ge 0 ] && /bin/cp -rf /usr/src/robot/output $build_path/; exit $exit_code
  artifacts:
    untracked: true
    when: always
  allow_failure: false
  needs:
    - job: "Sensor Setup"
      optional: true
    - job: "Hardware Sensor Setup"
      optional: true
    - job: "robot:regression_testing"
      optional: true
    - job: "Service Setup"
  only:
    variables:
      - $RUN_INTEGRATION == "yes" && $PIPELINE == "developer-all"
      - $RUN_INTEGRATION == "yes" && $PIPELINE == "hw-developer-all"
  retry: 2

robot:catalog:community:
  stage: robot-test-setup
  tags:
    - docker-runner
  image: $LATEST_ROBOT_AUTOMATOR_IMAGE
  extends: .setup-robot-script
  script: |
    python3 -m run.runner -c integration \
      -t "010_install_catalog_apps/00_installCommunityApps" \
      -r INTEGRATION \
      -p $ROBOT_REGRESSION_ZEPHYR_PROJECT_VERSION -h -b $ROBOT_BROWSER \
      -v HOST:$controller_ip \
      -v HOST_USERNAME:root \
      -v HOST_PASSWORD:$password \
      -v PIPELINE:$PIPELINE || exit_code=$?; [ $? -ge 0 ] && /bin/cp -rf /usr/src/robot/output $build_path/; exit $exit_code
  artifacts:
    untracked: true
    when: always
  allow_failure: false
  needs:
    - job: "Sensor Setup"
      optional: true
    - job: "Hardware Sensor Setup"
      optional: true
    - job: "robot:regression_testing"
      optional: true
    - job: "Service Setup"
  only:
    variables:
      - $RUN_INTEGRATION == "yes" && $PIPELINE == "developer-all"
      - $RUN_INTEGRATION == "yes" && $PIPELINE == "hw-developer-all"
  retry: 2

robot:catalog:arkime:
  stage: robot-test-setup
  tags:
    - docker-runner
  image: $LATEST_ROBOT_AUTOMATOR_IMAGE
  extends: .setup-robot-script
  script: |
    python3 -m run.runner -c integration \
      -t "010_install_catalog_apps/00_installArkime" \
      -r INTEGRATION \
      -p $ROBOT_REGRESSION_ZEPHYR_PROJECT_VERSION -h -b $ROBOT_BROWSER \
      -v HOST:$controller_ip \
      -v HOST_USERNAME:root \
      -v HOST_PASSWORD:$password \
      -v PIPELINE:$PIPELINE || exit_code=$?; [ $? -ge 0 ] && /bin/cp -rf /usr/src/robot/output $build_path/; exit $exit_code
  artifacts:
    untracked: true
    when: always
  allow_failure: false
  needs:
    - job: "Sensor Setup"
      optional: true
    - job: "Hardware Sensor Setup"
      optional: true
    - job: "robot:regression_testing"
      optional: true
    - job: "Service Setup"
  only:
    variables:
      - $RUN_INTEGRATION == "yes" && $PIPELINE == "developer-all"
      - $RUN_INTEGRATION == "yes" && $PIPELINE == "hw-developer-all"
  retry: 2

robot:catalog:CHM:
  stage: robot-test-setup
  tags:
    - docker-runner
  image: $LATEST_ROBOT_AUTOMATOR_IMAGE
  extends: .setup-robot-script
  script: |
    python3 -m run.runner -c integration \
      -t "010_install_catalog_apps/00_installCortexMispHive" \
      -r INTEGRATION \
      -p $ROBOT_REGRESSION_ZEPHYR_PROJECT_VERSION -h -b $ROBOT_BROWSER \
      -v HOST:$controller_ip \
      -v HOST_USERNAME:root \
      -v HOST_PASSWORD:$password \
      -v PIPELINE:$PIPELINE || exit_code=$?; [ $? -ge 0 ] && /bin/cp -rf /usr/src/robot/output $build_path/; exit $exit_code
  artifacts:
    untracked: true
    when: always
  allow_failure: false
  needs:
    - job: "Sensor Setup"
      optional: true
    - job: "Hardware Sensor Setup"
      optional: true
    - job: "robot:regression_testing"
      optional: true
    - job: "Service Setup"
  only:
    variables:
      - $RUN_INTEGRATION == "yes" && $PIPELINE == "developer-all"
      - $RUN_INTEGRATION == "yes" && $PIPELINE == "hw-developer-all"
  retry: 2

robot:rulesets:sync:
  stage: robot-test-setup
  tags:
    - docker-runner
  image: $LATEST_ROBOT_AUTOMATOR_IMAGE
  extends: .setup-robot-script
  script: |
    curl -k -o /usr/src/robot/mal_md5_robot.txt  https://nexus.sil.lab/repository/tfplenum-repo/testfiles/zeek/intel/mal_md5_robot.txt
    python3 -m run.runner -c integration \
      -t "011_rulesets/01_dipSyncRulesets" \
      -r INTEGRATION \
      -p $ROBOT_REGRESSION_ZEPHYR_PROJECT_VERSION -h -b $ROBOT_BROWSER \
      -v HOST:$controller_ip \
      -v HOST_USERNAME:root \
      -v HOST_PASSWORD:$password \
      -v PIPELINE:$PIPELINE || exit_code=$?; [ $? -ge 0 ] && /bin/cp -rf /usr/src/robot/output $build_path/; exit $exit_code
  artifacts:
    untracked: true
    when: always
  allow_failure: false
  needs:
    - job: "Sensor Setup"
      optional: true
    - job: "Hardware Sensor Setup"
      optional: true
    - job: "Service Setup"
    - job: robot:catalog:independents
      optional: true
    - job: "robot:regression_testing"
      optional: true
  only:
    variables:
      - $RUN_INTEGRATION == "yes" && $PIPELINE == "developer-all"
      - $RUN_INTEGRATION == "yes" && $PIPELINE == "hw-developer-all"
  retry: 2

robot:elastic:minio:
  stage: robot-test-elastic
  tags:
    - docker-runner
  image: $LATEST_ROBOT_AUTOMATOR_IMAGE
  extends: .setup-robot-script
  script: |
    python3 -m run.runner -c integration \
      -t "012_elastic/00_dipElastic" \
      -r INTEGRATION \
      -p $ROBOT_REGRESSION_ZEPHYR_PROJECT_VERSION -h -b $ROBOT_BROWSER \
      -v HOST:$controller_ip \
      -v HOST_USERNAME:root \
      -v HOST_PASSWORD:$password \
      -v PIPELINE:$PIPELINE || exit_code=$?; [ $? -ge 0 ] && /bin/cp -rf /usr/src/robot/output $build_path/; exit $exit_code
  artifacts:
    untracked: true
    when: always
  allow_failure: true
  only:
    variables:
      - $RUN_INTEGRATION == "yes" && $PIPELINE == "developer-all"
      - $RUN_INTEGRATION == "yes" && $PIPELINE == "hw-developer-all"
  retry: 2

robot:elastic:alerts:
  stage: robot-test-elastic
  tags:
    - docker-runner
  image: $LATEST_ROBOT_AUTOMATOR_IMAGE
  extends: .setup-robot-script
  script: |
    python3 -m run.runner -c integration \
      -t "012_elastic/00_dipAlerts" \
      -r INTEGRATION \
      -p $ROBOT_REGRESSION_ZEPHYR_PROJECT_VERSION -h -b $ROBOT_BROWSER \
      -v HOST:$controller_ip \
      -v HOST_USERNAME:root \
      -v HOST_PASSWORD:$password \
      -v PIPELINE:$PIPELINE || exit_code=$?; [ $? -ge 0 ] && /bin/cp -rf /usr/src/robot/output $build_path/; exit $exit_code
  artifacts:
    untracked: true
    when: always
  allow_failure: false
  only:
    variables:
      - $RUN_INTEGRATION == "yes" && $PIPELINE == "developer-all"
      - $RUN_INTEGRATION == "yes" && $PIPELINE == "hw-developer-all"
  retry: 2

robot:add_virtual_sensor:
  stage: robot-test-setup
  tags:
    - docker-runner
  image: $LATEST_ROBOT_AUTOMATOR_IMAGE
  extends: .setup-robot-script
  script: |
    python3 -m run.runner -c integration \
      -t "013_sensors/00_addVirtualSensor" \
      -r INTEGRATION \
      -p $ROBOT_REGRESSION_ZEPHYR_PROJECT_VERSION -h -b $ROBOT_BROWSER \
      -v HOST:$controller_ip \
      -v HOST_USERNAME:root \
      -v HOST_PASSWORD:$password \
      -v PIPELINE:$PIPELINE || exit_code=$?; [ $? -ge 0 ] && /bin/cp -rf /usr/src/robot/output $build_path/; exit $exit_code
  artifacts:
    untracked: true
    when: always
  allow_failure: true
  needs:
    - job: robot:rulesets:sync
  only:
    variables:
      - $RUN_INTEGRATION == "yes" && $PIPELINE == "hw-developer-all"

robot:cleanup:virtual_sensor:
  stage: robot-test-cleanup
  tags:
    - docker-runner
  image: $LATEST_ROBOT_AUTOMATOR_IMAGE
  extends: .setup-robot-script
  script: |
    python3 -m run.runner -c integration \
      -t "cleanup/01_dipRemoveSensor" \
      -r INTEGRATION \
      -p $ROBOT_REGRESSION_ZEPHYR_PROJECT_VERSION -h -b $ROBOT_BROWSER \
      -v HOST:$controller_ip \
      -v HOST_USERNAME:root \
      -v HOST_PASSWORD:$password \
      -v PIPELINE:$PIPELINE || exit_code=$?; [ $? -ge 0 ] && /bin/cp -rf /usr/src/robot/output $build_path/; exit $exit_code
  artifacts:
    untracked: true
    when: always
  allow_failure: true
  needs:
    - job: robot:add_virtual_sensor
      optional: true
  only:
    variables:
      - $RUN_INTEGRATION == "yes" && $PIPELINE == "hw-developer-all"
  retry: 2

robot:regression_testing:
  stage: robot-test-regression
  tags:
    - docker-runner
  image: docker.nexus.sil.lab/tfplenum/robot-automator:1.5.6
  extends: .setup-robot-script
  script: |
    curl -k -o /usr/src/robot/mal_md5_robot.txt  https://nexus.sil.lab/repository/tfplenum-repo/testfiles/zeek/intel/mal_md5_robot.txt
    curl -k -o /usr/src/robot/data-with-image_robot.pcap  https://nexus.sil.lab/repository/tfplenum-repo/testfiles/pcap/data-with-image_robot.pcap
    python3 -m run.runner -c regression \
      -r $ROBOT_REGRESSION_ZEPHYR_CYCLE \
      -p $ROBOT_REGRESSION_ZEPHYR_PROJECT_VERSION -h -b $ROBOT_BROWSER \
      -v HOST:$controller_ip \
      -v HOST_USERNAME:root \
      -v HOST_PASSWORD:$password \
      -v KIT_VERSION:$TFPLENUM_EXPORT_VERSION \
      -v PIPELINE:$PIPELINE \
      -v CATEGORY:regression || exit_code=$?; [ $? -ge 0 ] && /bin/cp -rf /usr/src/robot/output $build_path/; exit $exit_code
  artifacts:
    untracked: true
    when: always
  allow_failure: true
  only:
    variables:
      - $RUN_REGRESSION == "yes" && $PIPELINE == "developer-all"
      - $RUN_REGRESSION == "yes" && $PIPELINE == "hw-developer-all"
  retry: 2
