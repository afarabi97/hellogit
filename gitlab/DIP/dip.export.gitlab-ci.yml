Ship Phyical Stack Build:
  stage: build
  tags:
    - tfplenum-buildv2
  script: |
    echo "IP of runner is $(hostname -I | cut -d " " -f1)"
    echo "Current working directory is $(pwd)"
    echo "Zipping PSB infrastructure"
    zip -r physical-stack-build-$TFPLENUM_EXPORT_VERSION-$TFPLENUM_EXPORT_HASH.zip \
           infrastructure/

    rm -rf "$SOFTWARE_CPT_EXPORT_LOC/$STACK_SOFTWARE_FOLDER"
    rm -rf "$SOFTWARE_MDT_EXPORT_LOC/$STACK_SOFTWARE_FOLDER"
    mkdir -p "$SOFTWARE_CPT_EXPORT_LOC/$STACK_SOFTWARE_FOLDER"
    mkdir -p "$SOFTWARE_MDT_EXPORT_LOC/$STACK_SOFTWARE_FOLDER"
    cp physical-stack-build-$TFPLENUM_EXPORT_VERSION-$TFPLENUM_EXPORT_HASH.zip \
         "$SOFTWARE_CPT_EXPORT_LOC/$STACK_SOFTWARE_FOLDER"
    cp physical-stack-build-$TFPLENUM_EXPORT_VERSION-$TFPLENUM_EXPORT_HASH.zip \
         "$SOFTWARE_MDT_EXPORT_LOC/$STACK_SOFTWARE_FOLDER"
    echo "Unzipping PSB infrastructure"
    unzip -q "$SOFTWARE_CPT_EXPORT_LOC/$STACK_SOFTWARE_FOLDER/physical-stack-build-$TFPLENUM_EXPORT_VERSION-$TFPLENUM_EXPORT_HASH.zip" \
          -d "$SOFTWARE_CPT_EXPORT_LOC/$STACK_SOFTWARE_FOLDER/"
    unzip -q "$SOFTWARE_MDT_EXPORT_LOC/$STACK_SOFTWARE_FOLDER/physical-stack-build-$TFPLENUM_EXPORT_VERSION-$TFPLENUM_EXPORT_HASH.zip" \
          -d "$SOFTWARE_MDT_EXPORT_LOC/$STACK_SOFTWARE_FOLDER/"
  only:
    variables:
      - $PIPELINE == "export-all"


Add Docs to DIP Controller:
  stage: docs
  needs: ["Build DIP Offline Documentation", "Setup DIP Controller"]
  tags:
    - tfplenum-buildv2
  script: |
    echo "IP of runner is $(hostname -I | cut -d " " -f1)"
    echo "Current working directory is $(pwd)"
    python3 testing/pipeline/pipeline.py \
    --system-name "DIP" \
    run-export add-docs-to-controller \
    --username "$CONFLUENCE_USERNAME" \
    --password "$CONFLUENCE_PASSWORD" \
    --cpt-export-path "$DIP_CPT_DOC_EXPORT_LOC" \
    --mdt-export-path "$DIP_MDT_DOC_EXPORT_LOC" \
    --staging-export-path "$DRIVE_STAGING_FOLDER" \
    --export-version "$TFPLENUM_EXPORT_VERSION" \
    --page-title "$TFPLENUM_CONFLUENCE_PAGE"
  only:
    variables:
      - $PIPELINE == "export-all"
  retry: 2
  artifacts:
    untracked: true


Export DIP Controller:
  stage: export
  needs: ["Add Docs to DIP Controller", "Setup DIP Controller"]
  tags:
    - tfplenum-buildv2
  script: |
    echo "IP of runner is $(hostname -I | cut -d " " -f1)"
    echo "Current working directory is $(pwd)"
    python3 testing/pipeline/pipeline.py \
    --system-name "DIP" \
    run-export export-ctrl \
    --cpt-export-path "$SOFTWARE_CPT_EXPORT_LOC/$DIP_SOFTWARE_FOLDER" \
    --mdt-export-path "$SOFTWARE_MDT_EXPORT_LOC/$DIP_SOFTWARE_FOLDER" \
    --staging-export-path "$DRIVE_STAGING_FOLDER" \
    --export-version "$TFPLENUM_EXPORT_VERSION" 
  only:
    variables:
      - $PIPELINE == "export-all"


Export DIP MinIO:
  stage: export
  needs: ["Create a standalone MinIO server"]
  tags:
    - tfplenum-buildv2
  script: |
    echo "IP of runner is $(hostname -I | cut -d " " -f1)"
    echo "Current working directory is $(pwd)"
    python3 testing/pipeline/pipeline.py \
    --system-name "DIP" \
    run-export minio \
    --cpt-export-path "$SOFTWARE_CPT_EXPORT_LOC/$DIP_SOFTWARE_FOLDER" \
    --mdt-export-path "$SOFTWARE_MDT_EXPORT_LOC/$DIP_SOFTWARE_FOLDER" \
    --staging-export-path "$DRIVE_STAGING_FOLDER" \
    --export-version "$TFPLENUM_EXPORT_VERSION" 
  only:
    variables:
      - $PIPELINE == "export-minio"
      - $PIPELINE == "export-all"
