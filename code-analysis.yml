sonarqube analyze production code:
  tags:
    - tfplenum-buildv2
  stage: code-analysis
  script: |
    echo "IP of runner is $(hostname -I)"
    echo "Current working directory is $(pwd)"
    ./web/setup/setup_angular_only.sh
    sonar-scanner -Dsonar.qualitygate.wait=true -Dsonar.projectKey=tfplenum -Dsonar.sources=web/
  only:
    variables:
      - $PIPELINE == "developer-dip"
      - $PIPELINE == "static_analysis_only"
      - $PIPELINE == "developer-mip"
      - $PIPELINE == "developer-all"
      - $PIPELINE == "developer-dip-mip"

sonarqube analyze test code:
  tags:
    - tfplenum-buildv2
  stage: code-analysis
  script: |
    echo "IP of runner is $(hostname -I)"
    echo "Current working directory is $(pwd)"
    sonar-scanner -Dsonar.qualitygate.wait=true -Dsonar.projectKey=tfplenum-test -Dsonar.sources=testing/
  allow_failure: true
  only:
    variables:
      - $PIPELINE == "developer-dip"
      - $PIPELINE == "static_analysis_only"
      - $PIPELINE == "developer-mip"
      - $PIPELINE == "developer-all"
      - $PIPELINE == "developer-dip-mip"

analyze ansible bootstrap playbooks:
  tags:
    - tfplenum-buildv2
  stage: code-analysis
  script: |
    echo "IP of runner is $(hostname -I)"
    echo "Current working directory is $(pwd)"
    ansible-lint bootstrap/playbooks/site.yml
  allow_failure: true
  only:
    variables:
      - $PIPELINE == "developer-dip"
      - $PIPELINE == "static_analysis_only"
      - $PIPELINE == "developer-all"
      - $PIPELINE == "developer-dip-mip"
      - $PIPELINE == "developer-mip"

analyze ansible core playbooks:
  tags:
    - tfplenum-buildv2
  stage: code-analysis
  script: |
    echo "IP of runner is $(hostname -I)"
    echo "Current working directory is $(pwd)"
    ansible-lint core/playbooks/site.yml
    ansible-lint core/playbooks/remove-node.yml
  allow_failure: true
  only:
    variables:
      - $PIPELINE == "developer-dip"
      - $PIPELINE == "static_analysis_only"
      - $PIPELINE == "developer-all"
      - $PIPELINE == "developer-dip-mip"

analyze ansible deployer playbooks:
  tags:
    - tfplenum-buildv2
  stage: code-analysis
  script: |
    echo "IP of runner is $(hostname -I)"
    echo "Current working directory is $(pwd)"
    ansible-lint deployer/playbooks/site.yml
  allow_failure: true
  only:
    variables:
      - $PIPELINE == "developer-dip"
      - $PIPELINE == "static_analysis_only"
      - $PIPELINE == "developer-all"
      - $PIPELINE == "developer-dip-mip"

analyze ansible stigs playbooks:
  tags:
    - tfplenum-buildv2
  stage: code-analysis
  script: |
    echo "IP of runner is $(hostname -I)"
    echo "Current working directory is $(pwd)"
    ansible-lint stigs/playbooks/site.yml
  allow_failure: true
  only:
    variables:
      - $PIPELINE == "developer-dip"
      - $PIPELINE == "static_analysis_only"
      - $PIPELINE == "developer-all"
      - $PIPELINE == "developer-dip-mip"

analyze ansible mip playbooks:
  tags:
    - tfplenum-buildv2
  stage: code-analysis
  script: |
    echo "IP of runner is $(hostname -I)"
    echo "Current working directory is $(pwd)"
    ansible-lint mip/mip-core/site.yml
    ansible-lint mip/mip-deployer/site.yml
  allow_failure: true
  only:
    variables:
      - $PIPELINE == "static_analysis_only"
      - $PIPELINE == "developer-mip"
      - $PIPELINE == "developer-all"
      - $PIPELINE == "developer-dip-mip"


# include:
  # - template: Container-Scanning.gitlab-ci.yml

# container_scanning:
#   image:
#     name: gitlab.sil.lab:5050/tfplenum/tfplenum/klair:2
#     entrypoint: []
#   variables:
#     GIT_STRATEGY: clone
#     CI_APPLICATION_REPOSITORY: gitlab.sil.lab:5050/tfplenum/tfplenum/zeek
#     CI_APPLICATION_TAG: 3.0.0
#   artifacts:
#     paths:
#       - gl-container-scanning-report.json
#     reports:
#       container_scanning: gl-container-scanning-report.json
#   tags:
#     - tfplenum-docker
#   only:
#     variables:
#       - $PIPELINE == "code_quality"
