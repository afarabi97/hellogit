# Determine what drives to use based on inventory file
{% if item is defined %}
{% set boot_drive = hostvars[item].boot_drive %}
{% set data_drive = hostvars[item].data_drive %}
{% set os_raid = hostvars[item].os_raid %}
{% else %}
{% set boot_drive = default_boot_drive %}
{% set data_drive = default_data_drive %}
{% set os_raid = False %}
{% endif %}

{% set raid_drives = [] %}
{% set raid_vol_list_0 = [] %}
{% set raid_vol_list_1 = [] %}
{% set raid_vol_list_2 = [] %}

{% if item is defined %}
{% if os_raid %}
{% set raid_drives = hostvars[item].raid_drives %}
{% set root_size = hostvars[item].os_raid_root_size * 1024 %}
{% for drive in raid_drives %}
{% set _ = raid_vol_list_0.append('raid.0_' + drive) %}
{% set _ = raid_vol_list_1.append('raid.1_' + drive) %}
{% set _ = raid_vol_list_2.append('raid.2_' + drive) %}
{% endfor %}
{% else %}
{% for drive in boot_drive %}
{% set _ = raid_vol_list_0.append('raid.0_' + drive) %}
{% set _ = raid_vol_list_1.append('raid.1_' + drive) %}
{% endfor %}
{% for drive in data_drive %}
{% set _ = raid_vol_list_2.append('raid.1_' + drive) %}
{% endfor %}
{% endif %}
{% endif %}

#version=DEVEL
# System authorization information
auth --enableshadow --passalgo=sha512
# Use CDROM installation media
url --url http://{{ server_ip }}/offlinerepo/tfplenum
text
# Run the Setup Agent on first boot
firstboot --disable
# Keyboard layouts
keyboard --vckeymap=us --xlayouts='us'
# System language
lang en_US.UTF-8
# Disable Firewalld
firewall --enabled
eula --agreed
#Reboot when its all over
reboot
# Network information
{% if item is defined %}
network --device={{ hostvars[item].mac | lower }} --bootproto=static --ip={{ hostvars[item].ip }} --netmask={{ netmask }} --gateway={{ gateway }} --nameserver={{ dns }} --noipv6 --activate
network --hostname={{ item }}
{% else %}
network  --bootproto=dhcp --device=eth0 --noipv6 --activate
network  --hostname=localhost.localdomain
{% endif %}
# Root password
rootpw --iscrypted {{ rootpw.stdout }}
# System services
services --disabled="chronyd"
# System timezone
timezone {{ timezone }} --isUtc --ntpservers={{ ansible_controller_hostname }}

%pre
is_physical=true
system_name="{{ system_name }}"
manufacturer=$(dmidecode --string system-manufacturer)

if [ "$manufacturer" == "VMware, Inc." ]; then
is_physical=false
fi

cat <<EOF > /tmp/partition_layout
# Partition clearing information
zerombr
{% if not os_raid %}
{% if boot_drive|length > 1 %}
bootloader --append="rhgb quiet crashkernel=auto" --location=mbr --driveorder={{ boot_drive|join(',') }}
clearpart --all --disklabel gpt --initlabel
{% for drive in boot_drive %}
part raid.0_{{ drive }} --fstype="raid" --size=512 --asprimary --ondrive={{ drive }} # Boot Partition
{% if not uefi %}
part biosboot --fstype=biosboot --size=1 --ondisk={{ drive }}
{% endif %}
part raid.1_{{ drive }} --fstype="raid" --size=1 --grow --asprimary --ondrive={{ drive }} # OS Partition
{% endfor %}
{% if uefi %}
part /boot/efi --fstype=efi --grow --maxsize=200 --size=20
#raid /boot/efi --fstype="xfs" --label="rhel7-efiboot" --level=0 {{ raid_vol_list_0|join(' ') }}
{% endif %}
raid /boot --device="boot" --fstype="xfs" --label="rhel7-boot" --level=0 {{ raid_vol_list_0|join(' ') }}
raid pv.01 --fstype="lvmpv" --device="pv.01" --label="lvmpv-pv01" --level=0 {{ raid_vol_list_1|join(' ') }}
volgroup vg_root pv.01
logvol / --fstype="xfs" --name=root --vgname=vg_root --grow --percent=20
logvol /tmp --fstype="xfs" --name=tmp --vgname=vg_root --grow --percent=5
logvol /home --fstype="xfs" --name=home --vgname=vg_root --grow --percent=10
logvol /var --fstype="xfs" --name=var --vgname=vg_root --grow --percent=35
logvol /var/log --fstype="xfs" --name=log --vgname=vg_root --grow --percent=20
logvol /var/log/audit --fstype="xfs" --name=audit --vgname=vg_root --grow --percent=3
{% else %}
# Partitioning scheme
bootloader --append="rhgb quiet crashkernel=auto" --location=mbr --boot-drive={{ boot_drive[0] }}
clearpart --all
{% if uefi %}
part /boot/efi --fstype=efi --grow --maxsize=200 --size=20 --ondrive={{ boot_drive[0] }}
{% endif %}
part /boot --fstype="xfs" --size=500 --ondrive={{ boot_drive[0] }}
{% if data_drive == boot_drive %}
part pv.01 --fstype="lvmpv" --size=1 --maxsize=50000 --grow --ondisk={{ boot_drive[0] }}
{% else %}
part pv.01 --fstype="lvmpv" --size=1 --grow --ondisk={{ boot_drive[0] }}
{% endif %}
volgroup vg_root pv.01
logvol / --fstype="xfs" --name=root --vgname=vg_root --grow --percent=20
logvol /tmp --fstype="xfs" --name=tmp --vgname=vg_root --grow --percent=5
logvol /home --fstype="xfs" --name=home --vgname=vg_root --grow --percent=10
logvol /var --fstype="xfs" --name=var --vgname=vg_root --grow --percent=35
logvol /var/log --fstype="xfs" --name=log --vgname=vg_root --grow --percent=20
logvol /var/log/audit --fstype="xfs" --name=audit --vgname=vg_root --grow --percent=3
{% endif %}
{% if data_drive|length > 1 %}

{% for drive in data_drive %}
part raid.2_{{ drive }} --fstype="raid" --size=1 --grow --ondrive={{ drive }} # Data Partition
{% endfor %}
raid pv.02 --fstype="lvmpv" --device="pv.02" --label="lvmpv-pv02" --level=0 {{ raid_vol_list_2|join(' ') }}
volgroup vg_data pv.02
logvol /data --fstype="xfs" --name=data --size=1 --vgname=vg_data --grow
{% else %}

part pv.02 --fstype="lvmpv" --size=1 --grow --ondisk={{ data_drive[0] }}
volgroup vg_data pv.02
logvol /data --fstype="xfs" --size=1 --name=data --vgname=vg_data --grow
{% endif %}
{%- endif %}

{% if os_raid %}
bootloader --append="rhgb quiet crashkernel=auto" --location=mbr --driveorder={{ raid_drives|join(',') }}
clearpart --all --disklabel gpt --initlabel

{% for drive in raid_drives %}
part raid.0_{{ drive }} --fstype="raid" --size=512 --asprimary --ondrive={{ drive }} # Boot Partition
{% if not uefi %}
part biosboot --fstype=biosboot --size=1 --ondisk={{ drive }}
{% endif %}
part raid.1_{{ drive }} --fstype="raid" --size={{ (root_size / raid_drives|length) | round(0,'floor') | int }} --asprimary --ondrive={{ drive }} # OS Partition
part raid.2_{{ drive }} --fstype="raid" --size=1 --grow --ondrive={{ drive }} # Data Partition
{% endfor %}

{% if uefi %}
part /boot/efi --fstype=efi --grow --maxsize=200 --size=20
#raid /boot/efi --fstype="xfs" --label="rhel7-efiboot" --level=0 {{ raid_vol_list_0|join(' ') }}
{% endif %}
raid /boot --device="boot" --fstype="xfs" --label="rhel7-boot" --level=0 {{ raid_vol_list_0|join(' ') }}
raid pv.01 --fstype="lvmpv" --device="pv.01" --label="lvmpv-pv01" --level=0 {{ raid_vol_list_1|join(' ') }}
volgroup vg_root pv.01
logvol / --fstype="xfs" --name=root --vgname=vg_root --grow --percent=20
logvol /tmp --fstype="xfs" --name=tmp --vgname=vg_root --grow --percent=5
logvol /home --fstype="xfs" --name=home --vgname=vg_root --grow --percent=10
logvol /var --fstype="xfs" --name=var --vgname=vg_root --grow --percent=35
logvol /var/log --fstype="xfs" --name=log --vgname=vg_root --grow --percent=20
logvol /var/log/audit --fstype="xfs" --name=audit --vgname=vg_root --grow --percent=3

raid pv.02 --fstype="lvmpv" --device="pv.02" --label="lvmpv-pv02" --level=0 {{ raid_vol_list_2|join(' ') }}
volgroup vg_data pv.02
logvol /data --fstype="xfs" --name=data --size=1 --vgname=vg_data --grow
{% endif %}

EOF

%end

%include /tmp/partition_layout

%packages
@^minimal-environment
chrony
network-scripts
%end

%post --log=/root/ks-post.log
/usr/sbin/grubby --update-kernel=ALL --args=console=ttyS0

{% if item is defined %}
ip addr | grep -i broadcast | awk '{ print $2 }' > /tmp/interfaces
sed -i 's/:/\ /g' /tmp/interfaces
interfaces=`cat /tmp/interfaces`
for i in $interfaces;
do
mac=`ethtool -P $i | awk '{ print $3 }'`
if [[ $mac != '{{ hostvars[item].mac | lower }}' ]]; then
# This updates the non management interfaces to remove any DNS entries
sed -i '/^DNS/ d' /etc/sysconfig/network-scripts/ifcfg-$i
# This updates the non management interfaces to remove the NETBOOT line
sed -i '/^NETBOOT/ d' /etc/sysconfig/network-scripts/ifcfg-$i
# This updates the non management interfaces to manual
sed -i 's/^\(BOOTPROTO=\).*/\1none/g' /etc/sysconfig/network-scripts/ifcfg-$i
# This updates the non management interfaces to ignore ipv6 by default
sed -i 's/^\(IPV6INIT=\).*/\1no/g' /etc/sysconfig/network-scripts/ifcfg-$i
# Remove ONBOOT line from non management interface
sed -i '/^ONBOOT/ d' /etc/sysconfig/network-scripts/ifcfg-$i
# Append ONBOOT option based on link status of yes or no
echo 'ONBOOT=no' >> /etc/sysconfig/network-scripts/ifcfg-$i
sed -i '/^NETMASK/ d' /etc/sysconfig/network-scripts/ifcfg-$i
sed -i '/^IPADDR/ d' /etc/sysconfig/network-scripts/ifcfg-$i
fi
done
{% endif %}

# SELinux for data dir
chcon -R -t container_file_t /data

# Disable SSHD DNS lookups
echo "UseDNS no" >> /etc/ssh/sshd_config

# Add DNS search domain
{% if item is defined -%}
echo "DOMAIN={{ kit_domain }}" >> `grep -r '{{ hostvars[item].ip }}' /etc/sysconfig/ -l`
{%- endif %}

systemctl enable chronyd
sed -i 's/^pool.*/server {{ ansible_controller_hostname }} iburst/g' /etc/chrony.conf

%end
