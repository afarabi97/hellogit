# site.yml is the overall playbook, but all it does is include the other playbooks that are part of the site. For more
# information about the structure see:
# http://docs.ansible.com/ansible/latest/playbooks_best_practices.html
# http://docs.ansible.com/ansible/latest/intro_inventory.html
# We follow the guidance to include naming conventions there.

---

- name: Preflight for adding new node
  hosts: master-server
  any_errors_fatal: true
  gather_facts: no
  tasks:
    - name: Check if node_to_add is defined
      fail:
        msg: "Missing node_to_add variable or NODE option.  To run add-node using make use the following: make add-node NODE=<node fqdn>"
      when: node_to_add is defined and node_to_add == 'NONE'

    - name: Check nodes to add
      fail:
        msg: "{{ node_to_add }} is not defined in inventory.  Add {{ node_to_add }} to inventory."
      when: node_to_add is defined and node_to_add not in groups['nodes']

    - name: check if kubelet installed
      stat:
        path: "/usr/bin/kubelet"
      register: kubelet_stat_result
      when: node_to_add is defined

    - name: Fail if kubelet doesnt exists
      fail:
        msg: "Cannot find a k8s cluster.  Run make to deploy system."
      when: node_to_add is defined
        and kubelet_stat_result.stat.exists == false

    - name: Get current node list
      shell: kubectl get nodes --no-headers=true | awk '{ print $1 }'
      when: node_to_add is defined
        and kubelet_stat_result.stat.exists
      register: node_list

    - name: Check if nodes in nodes to remove is in node_list
      fail:
        msg: "{{ node_to_add }} node is already joined to k8s cluster.  To re-add {{ node_to_add }} you will need to remove the node first by adding to nodes_to_remove group."
      when: node_to_add is defined
        and node_list is defined
        and node_to_add in node_list.stdout
  tags: preflight-add-node

- name: Disable firewalld
  hosts:
    - master-server
    - servers
    - sensors
    - remote-sensors
  tasks:
  - systemd:
      service: firewalld
      state: stopped
      enabled: no
  tags: disable-firewall

- name: Check for offline variable
  hosts: localhost
  gather_facts: no
  tasks:
    - name: Check if offline is defined
      fail:
        msg: 'Verify you have the offline group in your inventory file. It must be defined. See sample inventory.'
      when: offline is not defined or offline is none

- name: Setup Repos
  hosts:
    - master-server
    - servers
    - sensors
    - remote-sensors
  gather_facts: no
  any_errors_fatal: true
  pre_tasks:
    - setup:
  roles:
    - repos
  tags: repos

- name: Install Controller Dependancies
  hosts: localhost
  tasks:
  - name: Install python-netaddr
    yum:
      name: "python-netaddr"
      state: installed

- name: Install Controller Dependancies
  hosts:
    - master-server
    - servers
    - sensors
    - remote-sensors
  tasks:
  - name: Install NetworkManager packages
    yum:
      name: "NetworkManager-glib"
      state: installed
    register: network_manager_result
  # TODO: This should be removed after updates have been out for a bit
  - name: 'Bump the NetworkManager service in case of https://access.redhat.com/solutions/3416301'
    systemd:
      name: NetworkManager
      state: restarted
    when: network_manager_result.changed
  tags:
    - dnsmasq
    - update-networkmanager

- name: Verify Ansible meets version requirements
  hosts: localhost
  any_errors_fatal: true
  tasks:
  - fail:
      msg: "You must update Ansible to at least 2.5.0 to use this code. Verify you have the EPEL repository enabled and then update Ansible."
    when: "ansible_version.full is version('2.5', '<=')"
  tags: preflight

- name: Create Error Logging Directory
  hosts:
    - master-server
    - servers
    - sensors
    - remote-sensors
  tasks:
  - name: Create directories on nodes
    file:
      path: "{{ log_dir }}"
      owner: root
      group: root
      mode: 0644
      state: directory

  - name: Create directory on controller
    local_action:
      module: file
      path: "{{ log_dir }}"
      owner: root
      group: root
      mode: 0644
      state: directory

- name: dnsmasq
  hosts:
    - master-server
    - servers
    - sensors
    - remote-sensors
  gather_facts: yes
  any_errors_fatal: true
  pre_tasks:
    - setup:
    # TODO: This should removed when firewalld needs to be enabled
    - name: Disable firewall for now
      systemd:
        name: firewalld
        enabled: no
        state: stopped
  roles:
    - dnsmasq
  tags: dnsmasq

#- name: Update all hosts to most recent packages
  #hosts: all
#  tasks:
#  - name: Update all packages
#    yum:
#      name: '*'
#      state: latest
#      exclude: ceph-deploy,cockpit*,kube*
#    register: system_updated
#  - name: Reboot system to finish installing updates
#    command: "/sbin/shutdown -r +1 --no-wall"
#    async: 0
#    poll: 0
#    ignore_errors: yes
#    when: system_updated is defined and system_updated.changed
#  - name: Wait for reboot to complete
#    wait_for:
#      host: "{{ inventory_hostname }}"
#      port: 22
#      delay: 120
#      timeout: 300
#    delegate_to: localhost
#    when: system_updated is defined and system_updated.changed

- name: Generate SSH keys
  hosts:
    - localhost
    - master-server
    - servers
    - sensors
    - remote-sensors
  connection: ssh
  any_errors_fatal: true
  vars:
    ssh_known_hosts_command: "ssh-keyscan -T 10"
    ssh_known_hosts_file: "{{ lookup('env','HOME') + '/.ssh/known_hosts' }}"
    ssh_known_hosts: "{{ groups['master-server'] }} + {{ groups['servers'] }} + {{ groups['sensors'] }} + {{ groups['remote-sensors'] }}"

    # This takes each group list, which is every host (do not use groups['all'] this will pick up nodes in nodes_to_remove group which will break stuff),
    # feeds it into map, which then
    # performs a regex_replace on each element. The regex_replace replaces .lan in each
    # element to nothing or ''. Finally, we feed that back into list because Ansible
    # expects the final product to be a list.
    ssh_short_known_hosts: "{{ ssh_known_hosts | map('regex_replace','(.lan)','' ) | list }}"
  tasks:
    - import_tasks: generate_ssh_keys.yml
  tags: genkeys

- name: Perform preflight checks
  any_errors_fatal: true
  hosts:
    - master-server
    - servers
    - sensors
    - remote-sensors
  roles:
    - preflight_checks
  tags: preflight

- name: Common Setup
  hosts:
    - master-server
    - servers
    - sensors
    - remote-sensors
  gather_facts: no
  any_errors_fatal: true
  pre_tasks:
    - setup:
  roles:
    - common
    - chrony
  tags:
    - common

- name: Docker Images
  hosts:
    - master-server
    - servers
    - sensors
    - remote-sensors
  gather_facts: no
  any_errors_fatal: true
  pre_tasks:
    - setup:
  roles:
    - docker
  tags:
    - docker

- name: Configure kube master
  hosts: master-server
  gather_facts: no
  any_errors_fatal: true
  pre_tasks:
    - setup:
  roles:
    - kubernetes/common
    - kubernetes/master
  tags:
    - kube-master

- name: Configure kube nodes
  hosts:
    - remote-sensors
    - sensors
    - servers
  gather_facts: no
  any_errors_fatal: true
  pre_tasks:
    - setup:
  roles:
    - kubernetes/common
    - kubernetes/node
  tags:
    - kube-node

- name: Setup Ceph
  hosts:
    - master-server
    - servers
    - sensors
    - remote-sensors
  gather_facts: no
  any_errors_fatal: true
  pre_tasks:
    - setup:
  roles:
    - ceph
  tags:
    - ceph

- name: Setup Storage
  hosts: master-server
  gather_facts: no
  any_errors_fatal: true
  pre_tasks:
    - setup:
  roles:
    - storage
  tags:
    - storage

- name: Deploy Elasticsearch
  hosts: master-server
  gather_facts: no
  any_errors_fatal: true
  pre_tasks:
    - setup:
  roles:
    - elasticsearch
  tags:
    - elasticsearch

- name: Deploy Logstash
  hosts: master-server
  gather_facts: no
  any_errors_fatal: true
  pre_tasks:
    - setup:
  roles:
    - logstash
  tags:
    - logstash

- name: Deploy Kibana
  hosts: master-server
  gather_facts: no
  any_errors_fatal: true
  pre_tasks:
    - setup:
  roles:
    - kibana
  tags:
    - kibana

- name: Deploy metricbeats
  hosts: master-server
  gather_facts: no
  any_errors_fatal: true
  pre_tasks:
    - setup:
  roles:
    - metricbeat
  tags:
    - metricbeat

- name: Deploy Kafka
  hosts: master-server
  gather_facts: no
  any_errors_fatal: true
  pre_tasks:
    - setup:
  roles:
    - { role: kafka }
  tags:
    - kafka

- name: Deploy Bro
  hosts: master-server
  gather_facts: no
  any_errors_fatal: true
  pre_tasks:
    - setup:
  roles:
    - bro
  tags:
  - bro

- name: Deploy Moloch
  hosts:
    - master-server
    - servers
    - sensors
    - remote-sensors
  gather_facts: no
  any_errors_fatal: true
  pre_tasks:
    - setup:
  roles:
    - moloch
  tags:
    - moloch

- name: Deploy Suricata
  hosts: master-server
  gather_facts: no
  any_errors_fatal: true
  pre_tasks:
    - setup:
  roles:
    - suricata
  tags:
    - suricata

#- name: Deploy Stenographer
#  hosts:
#    - sensors
#    - remote-sensors
#  gather_facts: no
#  any_errors_fatal: true
#  pre_tasks:
#    - setup:
#  roles:
#    - stenographer
#  tags:
#    - stenographer

#- name: Deploy Docket
#  hosts: all
#  gather_facts: no
#  any_errors_fatal: true
#  pre_tasks:
#    - setup:
#  roles:
#    - docket
#  tags:
#    - docket

- name: Enable sensor_monitor_interface
  hosts:
    - sensors
    - remote-sensors
  gather_facts: no
  any_errors_fatal: true
  pre_tasks:
    - setup:
  tasks:
    - name: Set on boot to yes
      replace:
        path: "/etc/sysconfig/network-scripts/ifcfg-{{ item }}"
        regexp: "ONBOOT=no"
        replace: "ONBOOT=yes"
      with_items: "{{ sensor_monitor_interface }}"
    - name: Set bootproto to link-local
      replace:
        path: "/etc/sysconfig/network-scripts/ifcfg-{{ item }}"
        regexp: "BOOTPROTO=none"
        replace: "BOOTPROTO=autoip"
      with_items: "{{ sensor_monitor_interface }}"
    - name: Set interface to promiscuous mode
      shell: "ip link set {{ item }} promisc on"
      with_items: "{{ sensor_monitor_interface }}"            
  tags:
    - enable-sensor-monitor-interface
...
