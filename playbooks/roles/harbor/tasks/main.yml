#######################################################
###################  Harbor Install ###################
#######################################################
---
- name: Import tfplenum variables
  include_vars:
    file: "{{ tfplenum_vars }}"

- name: "Create directory for harbor"
  file:
    path: "{{ harbor_dir }}"
    state: directory
    mode: 0740

- name: "Install Docker"
  yum:
    name: "{{item}}"
    state: installed
  with_items:
    - docker
    - python-pip

- name: Ensure Pip Version is 8.1.2
  shell: |
    pip install pip==8.1.2

- name: install docker-py pip module 
  pip:  
    name: "{{ item }}" 
    state: forcereinstall 
  with_items: 
  - "requests"  
  - "urllib3" 
  - "docker-py"

- name: 'docker daemon conf'
  template:
    backup: yes
    src: 'daemon.json.j2'
    dest: '/etc/docker/daemon.json'
    owner: root
    group: root
    mode: 0644
  register: docker_config_result

- name: "Download docker-compose 1.21.0"
  get_url:
    url: "http://{{ server_ip }}/offlinerepo/docker-compose-Linux-x86_64"
    dest: "/usr/bin/docker-compose"
    mode: 0740

- name: "Open up port {{ harbor_firewall_port }} to allow access for harbor"
  firewalld: 
    port: "{{ harbor_firewall_port }}/tcp"
    permanent: true
    immediate: true
    state: enabled
  notify: "Restart Docker"

- meta: flush_handlers

- name: Stop harbor
  systemd:
    name: harbor
    enabled: yes
    state: stopped
  ignore_errors: yes

- name: "Restart Docker"
  systemd:
    name: docker
    enabled: yes
    state: restarted

- name: "Download Harbor {{ harbor_version }} build"
  unarchive:
    src: "http://{{ server_ip }}/offlinerepo/harbor-online-installer-v{{ harbor_version }}.tgz"
    dest: "/opt" # tar root dir is harbor so lets just put it in /opt to match the harbor_dir /opt/harbor
    mode: 0740
    remote_src: true

- name: harbor config
  template:
    backup: yes
    src: 'harbor.cfg.j2'
    dest: '/opt/harbor/harbor.cfg'
    owner: root
    group: root
    mode: 0644
  register: harbor_config_result

- name: 'Fix Harbor docker-compose file'
  replace:
    # Replace 80:80 with 81:80 for the port in docker-compose.yml
    path: "{{ harbor_dir }}/docker-compose.yml"
    regexp: '80:80'
    replace: '{{ harbor_firewall_port }}:{{ harbor_port }}'

# Depending on the OS there may already be a httpd running
- name: 'Check if pre-existing httpd service exists'
  stat: 
    path: /etc/init.d/httpd
  register: 'service_status'

- name: 'Install Harbor'
  shell: "sh {{ harbor_dir }}/install.sh"
  register: harbor_install_result

- name: 'Install Harbor service file'
  template:
    backup: yes
    src: 'harbor.service.j2'
    dest: '/etc/systemd/system/harbor.service'
    owner: root
    group: root
    mode: 0644

- name: 'Enable harbor service'
  systemd:
    name: harbor
    enabled: yes
    state: started
    daemon_reload: yes

- name: 'Wait for harbor to come up'
  uri:
    url: http://{{ server_ip }}:{{ harbor_firewall_port }}
  register: harborwebresult
  until: harborwebresult.status == 200
  retries: 15
  delay: 1

- name: 'Login to harbor'
  docker_login:
    username: admin
    password: password
    registry_url: http://{{ server_ip }}:{{ harbor_firewall_port }}
    timeout: 20

- name: Get docker images from online
  block:    
    - name: 'Download docker container images'
      docker_image:
        name: "{{item}}"
      with_items:
        - "{{ kube_images }}"

    - name: 'Tag local images for upload to harbor'
      shell: "docker tag {{ item }} {{ server_ip }}:{{ harbor_firewall_port }}/library/{{ item[item.rfind('/')+1:] }}"
      with_items:
        - "{{ kube_images }}"

    - name: 'Upload local images to harbor'
      docker_image:
        name: "{{ server_ip }}:{{ harbor_firewall_port }}/library/{{ item[item.rfind('/')+1:] }}"
        push: yes
        pull: no
      with_items:
        - "{{ kube_images }}"
  when: offline is defined and offline == false

...
