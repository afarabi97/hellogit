# include:
  # - template: Container-Scanning.gitlab-ci.yml

variables:
  LABREPO_USER: root
  LABREPO_PASS: "we.are.tfplenum"
  TFPLENUM_EXPORT_LOC: "./"
  TFPLENUM_EXPORT_VERSION: RC
  PDF_SINGLE_PAGES: "6.8.1.2 DIP System Setup,6.8.1.1 MIP System Setup,6.8.2.1 DIP System Operation,6.8.2.2 MIP System Operation,6.8.9.4 Windows Agent Plugin Guide,6.8.9.5 Helm Integration,6.8.9.2 Setup Controller"
  TFPLENUM_CONFLUENCE_PAGE: "6.8 CVAH 3.3"
  TFPLENUM_COMMIT_HASH: $CI_COMMIT_REF_NAME
  PIPELINE: "developer"
  KIT: "test3.yml"
  BUILD_TYPE: "clone_from_nightly"
  IS_CLEANUP: "false"
  VMWARE_FOLDER: "Testing"
  PORT_GROUP: "82 Portgroup"
  NETWORK_ID: "172.16.82."
  VMWARE_DATASTORE: "NVMe Storage 2"
  DNS_SERVERS: ""
  # Commercial version SONAR_TOKEN: "88288e09065a3d865d20a10c05563b3225566490"
  SONAR_TOKEN: "d188aacd2a807af75d9fec7cdda7921247fd3d84"
  SONAR_HOST_URL: "http://sonarqube.sil.lab:9000/"
  GIT_DEPTH: 0
  ACAS_IPADDRESS: "172.16.82.15"
  ACAS_USERNAME: "acas"
  ACAS_PASSWORD: "we.are.tfplenum"
  ACAS_SCAN_TO_RUN: "Scan test Kit1"
  RUN_ACAS: "false"

stages:
  - pre-build
  - build
  - docs
  - kickstart
  - kit
  - security_scans
  - catalog
  - test
  - test-powerfailure
  - re-test
  - cleanup
  - export
  - hashfiles
  - publish

sonarqube-check:
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  tags:
    - tfplenum-docker
  stage: test
  script: |
    sonar-scanner -Dsonar.qualitygate.wait=true -Dsonar.projectKey=tfplenum -Dsonar.sources=web/
  allow_failure: true
  only:
    variables:
      - $PIPELINE == "developer"

# container_scanning:
#   image:
#     name: gitlab.sil.lab:5050/tfplenum/tfplenum/klair:2
#     entrypoint: []
#   variables:
#     GIT_STRATEGY: clone
#     CI_APPLICATION_REPOSITORY: gitlab.sil.lab:5050/tfplenum/tfplenum/zeek
#     CI_APPLICATION_TAG: 3.0.0
#   artifacts:
#     paths:
#       - gl-container-scanning-report.json
#     reports:
#       container_scanning: gl-container-scanning-report.json
#   tags:
#     - tfplenum-docker
#   only:
#     variables:
#       - $PIPELINE == "code_quality"

Create artifacts folder:
  stage: pre-build
  tags:
    - tfplenum-build
  script: |
    echo "IP of runner is $(hostname -i | awk '{print $2}')"
    echo "Current working directory is $(pwd)"
    rm -rf $TFPLENUM_EXPORT_LOC/$TFPLENUM_EXPORT_VERSION
    mkdir -p $TFPLENUM_EXPORT_LOC/$TFPLENUM_EXPORT_VERSION
  cache:
    paths:
      - $TFPLENUM_EXPORT_LOC/$TFPLENUM_EXPORT_VERSION
  only:
    variables:
      - $PIPELINE == "export"

Setup Nightly Controller:
  stage: build
  tags:
    - tfplenum-build
  script: |
    echo "IP of runner is $(hostname -i | awk '{print $2}')"
    echo "Current working directory is $(pwd)"
    python3 testing/testy-tester/main.py \
    --path testing/testy-tester/testcases/nightly-controller.yml \
    --tfplenum-commit-hash $TFPLENUM_COMMIT_HASH \
    --setup-controller build_from_scratch
  only:
    variables:
      - $PIPELINE == "daily_build"

Build Offline Documentation:
  stage: build
  tags:
    - tfplenum-build
  script: |
    echo "IP of runner is $(hostname -i | awk '{print $2}')"
    echo "Current working directory is $(pwd)"
    python3 testing/testy-tester/main.py --export-html-docs "$TFPLENUM_CONFLUENCE_PAGE" \
    --export-location $TFPLENUM_EXPORT_LOC \
    --path testing/testy-tester/testcases/$KIT \
    --export-version $TFPLENUM_EXPORT_VERSION

    python3 testing/testy-tester/main.py --export-single-page-pdf "$PDF_SINGLE_PAGES" \
    --export-location $TFPLENUM_EXPORT_LOC \
    --export-version $TFPLENUM_EXPORT_VERSION \
    --path testing/testy-tester/testcases/$KIT
  cache:
    paths:
      - $TFPLENUM_EXPORT_LOC/$TFPLENUM_EXPORT_VERSION
  only:
    variables:
      - $PIPELINE == "export"

Ship Phyical Stack Build:
  stage: build
  tags:
    - tfplenum-build
  script: |
    echo "IP of runner is $(hostname -i | awk '{print $2}')"
    echo "Current working directory is $(pwd)"
    zip -r physical-stack-build-$TFPLENUM_EXPORT_VERSION.zip infrastucture/
    cp physical-stack-build-$TFPLENUM_EXPORT_VERSION.zip $TFPLENUM_EXPORT_LOC/$TFPLENUM_EXPORT_VERSION
  cache:
    paths:
      - $TFPLENUM_EXPORT_LOC/$TFPLENUM_EXPORT_VERSION
  only:
    variables:
      - $PIPELINE == "export"

Setup Controller:
  stage: build
  tags:
    - tfplenum-build
  script: |
    echo "IP of runner is $(hostname -i | awk '{print $2}')"
    echo "Current working directory is $(pwd)"
    python3 testing/testy-tester/main.py \
    --path testing/testy-tester/testcases/$KIT \
    --tfplenum-commit-hash $TFPLENUM_COMMIT_HASH \
    --vmware-folder "$VMWARE_FOLDER" \
    --port-group "$PORT_GROUP" \
    --network-id "$NETWORK_ID" \
    --vmware-datastore "$VMWARE_DATASTORE" \
    --dns-servers "$DNS_SERVERS" \
    --setup-controller $BUILD_TYPE
  only:
    variables:
      - $PIPELINE == "virtual_build_and_test"
      - $PIPELINE == "export"
      - $PIPELINE == "developer"

Run Python Unit Tests:
  tags:
    - tfplenum-build
  stage: test
  script: |
    echo "IP of runner is $(hostname -i | awk '{print $2}')"
    echo "Current working directory is $(pwd)"
    python3 testing/testy-tester/main.py \
    --path testing/testy-tester/testcases/$KIT \
    --tfplenum-commit-hash $TFPLENUM_COMMIT_HASH \
    --port-group "$PORT_GROUP" \
    --network-id "$NETWORK_ID" \
    --run-unit-tests
  allow_failure: true
  only:
    variables:
      - $PIPELINE == "developer"

Add Docs to Controller:
  stage: docs
  tags:
    - tfplenum-build
  script: |
    echo "IP of runner is $(hostname -i | awk '{print $2}')"
    echo "Current working directory is $(pwd)"
    python3 testing/testy-tester/main.py \
    --add-docs-to-controller "$TFPLENUM_CONFLUENCE_PAGE" \
    --export-location $TFPLENUM_EXPORT_LOC \
    --export-version $TFPLENUM_EXPORT_VERSION \
    --path testing/testy-tester/testcases/$KIT
  cache:
    paths:
      - $TFPLENUM_EXPORT_LOC/$TFPLENUM_EXPORT_VERSION
  only:
    variables:
      - $PIPELINE == "export"
  artifacts:
    paths:
      - "htmlcov.zip"

Kickstart:
  stage: kickstart
  tags:
    - tfplenum-build
  script: |
    echo "IP of runner is $(hostname -i | awk '{print $2}')"
    echo "Current working directory is $(pwd)"
    python3 testing/testy-tester/main.py \
    --path testing/testy-tester/testcases/$KIT \
    --tfplenum-commit-hash $TFPLENUM_COMMIT_HASH \
    --vmware-folder "$VMWARE_FOLDER" \
    --port-group "$PORT_GROUP" \
    --network-id "$NETWORK_ID" \
    --vmware-datastore "$VMWARE_DATASTORE" \
    --dns-servers "$DNS_SERVERS" \
    --run-kickstart
  only:
    variables:
      - $PIPELINE == "virtual_build_and_test"
      - $PIPELINE == "developer"

Deploy Kit:
  stage: kit
  tags:
    - tfplenum-build
  script: |
    echo "IP of runner is $(hostname -i | awk '{print $2}')"
    echo "Current working directory is $(pwd)"
    python3 testing/testy-tester/main.py \
    --path testing/testy-tester/testcases/$KIT \
    --tfplenum-commit-hash $TFPLENUM_COMMIT_HASH \
    --vmware-folder "$VMWARE_FOLDER" \
    --port-group "$PORT_GROUP" \
    --network-id "$NETWORK_ID" \
    --vmware-datastore "$VMWARE_DATASTORE" \
    --run-kit
  only:
    variables:
      - $PIPELINE == "virtual_build_and_test"
      - $PIPELINE == "developer"

Perform Security Scans:
  stage: security_scans
  tags:
    - tfplenum-build
  script: |
    echo "IP of runner is $(hostname -i | awk '{print $2}')"
    echo "Current working directory is $(pwd)"
    python3 testing/testy-tester/run_acas.py \
    --ipaddress "$ACAS_IPADDRESS" \
    --username "$ACAS_USERNAME" \
    --password "$ACAS_PASSWORD" \
    --scan_name "$ACAS_SCAN_TO_RUN"
  only:
    variables:
      - $PIPELINE == "virtual_build_and_test" && $RUN_ACAS == "true"
  artifacts:
    paths:
      - "TFPlenum_ACAS_Report.pdf"

CVAH Catalog:
  stage: catalog
  tags:
    - tfplenum-build
  script: |
    echo "IP of runner is $(hostname -i | awk '{print $2}')"
    echo "Current working directory is $(pwd)"
    python3 testing/testy-tester/main.py \
    --path testing/testy-tester/testcases/$KIT \
    --tfplenum-commit-hash $TFPLENUM_COMMIT_HASH \
    --vmware-folder "$VMWARE_FOLDER" \
    --port-group "$PORT_GROUP" \
    --network-id "$NETWORK_ID" \
    --run-catalog
  only:
    variables:
      - $PIPELINE == "virtual_build_and_test"

System Function Testing:
  stage: test
  tags:
    - tfplenum-build
  script: |
    echo "IP of runner is $(hostname -i | awk '{print $2}')"
    echo "Current working directory is $(pwd)"
    python3 testing/testy-tester/main.py \
    --path testing/testy-tester/testcases/$KIT \
    --tfplenum-commit-hash $TFPLENUM_COMMIT_HASH \
    --vmware-folder "$VMWARE_FOLDER" \
    --port-group "$PORT_GROUP" \
    --network-id "$NETWORK_ID" \
    --run-integration-tests
  only:
    variables:
      - $PIPELINE == "virtual_build_and_test"
  artifacts:
    paths:
      - "./*.xml"
    reports:
      junit: "./*.xml"

Simulate Power Failure:
  stage: test-powerfailure
  tags:
    - tfplenum-build
  script: |
    echo "IP of runner is $(hostname -i | awk '{print $2}')"
    echo "Current working directory is $(pwd)"
    python3 testing/testy-tester/main.py \
    --path testing/testy-tester/testcases/$KIT \
    --tfplenum-commit-hash $TFPLENUM_COMMIT_HASH \
    --vmware-folder "$VMWARE_FOLDER" \
    --port-group "$PORT_GROUP" \
    --network-id "$NETWORK_ID" \
    --simulate-powerfailure
  only:
    variables:
      - $PIPELINE == "virtual_build_and_test"

System Function Testing2:
  stage: re-test
  tags:
    - tfplenum-build
  script: |
    echo "IP of runner is $(hostname -i | awk '{print $2}')"
    echo "Current working directory is $(pwd)"
    python3 testing/testy-tester/main.py \
    --path testing/testy-tester/testcases/$KIT \
    --tfplenum-commit-hash $TFPLENUM_COMMIT_HASH \
    --vmware-folder "$VMWARE_FOLDER" \
    --port-group "$PORT_GROUP" \
    --network-id "$NETWORK_ID" \
    --run-integration-tests
  only:
    variables:
      - $PIPELINE == "virtual_build_and_test"
  artifacts:
    paths:
      - "./*.xml"
    reports:
      junit: "./*.xml"

Cleanup Job:
  stage: cleanup
  tags:
    - tfplenum-build
  script: |
    echo "IP of runner is $(hostname -i | awk '{print $2}')"
    echo "Current working directory is $(pwd)"
    python3 testing/testy-tester/main.py \
    --path testing/testy-tester/testcases/$KIT \
    --tfplenum-commit-hash $TFPLENUM_COMMIT_HASH \
    --cleanup
  only:
    variables:
      - $PIPELINE == "virtual_build_and_test" && $IS_CLEANUP == "true"

Export Controller:
  stage: export
  tags:
    - tfplenum-build
  script: |
    echo "IP of runner is $(hostname -i | awk '{print $2}')"
    echo "Current working directory is $(pwd)"
    python3 testing/testy-tester/main.py \
    --export-controller \
    --export-location $TFPLENUM_EXPORT_LOC \
    --export-version $TFPLENUM_EXPORT_VERSION \
    --path testing/testy-tester/testcases/$KIT
  cache:
    paths:
      - $TFPLENUM_EXPORT_LOC/$TFPLENUM_EXPORT_VERSION
  only:
    variables:
      - $PIPELINE == "export"

Generate Versions File:
  stage: hashfiles
  tags:
    - tfplenum-build
  script: |
    echo "IP of runner is $(hostname -i | awk '{print $2}')"
    echo "Current working directory is $(pwd)"
    python3 testing/testy-tester/main.py \
    --generate-hash-file-for-exports \
    --export-location $TFPLENUM_EXPORT_LOC \
    --export-version $TFPLENUM_EXPORT_VERSION \
    --path testing/testy-tester/testcases/$KIT
  cache:
    paths:
      - $TFPLENUM_EXPORT_LOC/$TFPLENUM_EXPORT_VERSION
  only:
    variables:
      - $PIPELINE == "export"

Publish to Labrepo:
  stage: publish
  tags:
    - tfplenum-build
  script: |
    echo "IP of runner is $(hostname -i | awk '{print $2}')"
    echo "Current working directory is $(pwd)"
    python3 testing/testy-tester/main.py \
    --publish-to-labrepo labrepo.sil.lab $LABREPO_USER $LABREPO_PASS \
    --export-location $TFPLENUM_EXPORT_LOC \
    --export-version $TFPLENUM_EXPORT_VERSION \
    --path testing/testy-tester/testcases/$KIT
  cache:
    paths:
      - $TFPLENUM_EXPORT_LOC/$TFPLENUM_EXPORT_VERSION
  only:
    variables:
      - $PIPELINE == "export"
