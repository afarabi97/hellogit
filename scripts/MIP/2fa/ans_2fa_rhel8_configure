#!/bin/bash
#  ans_2fa_rhel8_configure - Builds 2FA configuration on RHEL8 systems
#
#		NOTES: This script must be run by the root user to provide required permissions for writing to
#			multiple files
#
#			This script is dependent on the presence of three scripts in the local directory:
#
#				ans_2fa_rhel8_mapper
#				ans_2fa_rhel8_install_certs
#				ans_2fa_rhel8_install_rpm
#
#			Created by Roy Presley, Applied Research Solutions, for CVA/H PMO; 7 Jan 2020
#			Added code to call ans_2fa_rhel8_install_rpm to install RPMs from local or remote source; 7 Feb 2020
#
#			Added "internal" card driver to /etc/opensc.conf to handle undetermined formats; 10 Jun 2020
#
#			Added code to modify /etc/pam.d/sudo configuration to prompt for PIN (vice password); 10 Jun 20
#
#			Renamed as part of Ansible "friendly" RHEL8 2FA configuration scripts; 28 Sep 2020
#

NMILROOTCERTS="NMIL_Cert_DoD_Root_CA_3.der.p7b"
SMILROOTCERTS="SMIL_checkedbase64.zip"
PKCS15TOOL=/usr/bin/pkcs15-tool
AUTHSELECT=/usr/bin/authselect
OPENSCCFG=/etc/opensc.conf
SUDOCFG=/etc/pam.d/sudo
INSTALLCERTS="./ans_2fa_rhel8_install_certs"

fatal_error(){
	printf "Error: %s\n"  "$*" >>/dev/stderr
	exit 1
}

# Run pre-checks
if [ -z "$1" ]
then
	fatal_error "Usage: $0 <cardtype>\n \
		cardtype  Set card type to reflect mission environment:  either NMIL or SMIL\n"
fi

# Check to see if the logged in user is root. If not, inform the user and exit.
if [ "$EUID" -ne 0 ]
then
	fatal_error "Script must be run as root or use sudo."
fi

CARDTYPE=$1
if [ "$CARDTYPE" != "NMIL" ] && [ "$CARDTYPE" != "SMIL" ]
then
	fatal_error "Incorrect cardtype selected. Please select 'NMIL' or 'SMIL'"
fi

# Check for required executables
if [ ! -x $PKCS15TOOL ]
then
	fatal_error "$PKCS15TOOL not found! Is opensc package missing or corrupted?\n"
fi

if [ ! -x $AUTHSELECT ]
then
	fatal_error "$AUTHSELECT not found! Is authselect package missing or corrupted?\n"
fi

if [ ! -e $INSTALLCERTS ]
then
	fatal_error "$INSTALLCERTS script is missing!\n"
fi

# Check for existence of configuration files
# NOTE:  This file isn't created until the opensc package is installed
if [ ! -e $OPENSCCFG ]
then
	fatal_error "$OPENSCCFG not found!\n"
fi

# Begin configuration

# Set SELinux mode to Permissive
printf "Setting SELinux mode to 'Permissive'\n"
setenforce Permissive

# Start the pcscd daemon, just to be safe
printf "Starting pcscd daemon...\n"
systemctl start pcscd

# Prompt user to insert the NEATS token
# Check for sssd daemon. If it isn't already running, start it.
printf "Checking for running sssd daemon...\n"
if ! pgrep sssd > /dev/null; then
	printf ""
	printf "Starting sssd...\n"
	systemctl start sssd
fi

# Extract the first section of the token user string. This substring will be used to build the certmap for SSSD.
# TOKENUSER=$($PKCS15TOOL --list-info |& grep '^PKCS#15 Card' | awk -F[ '{print $2}' | awk -F] '{print $1}')

# If CARDTYPE is hardcoded to "NMIL", install the DoD root cert chain by calling the ans_2fa_rhel7_install_certs script
# with DoD root certificate file as argument
if [ "$CARDTYPE" == "NMIL" ]
then
	printf "Calling '%s %s to install DoD root certificates for NMIL environment..." "$INSTALLCERTS" "$NMILROOTCERTS"
	$INSTALLCERTS $NMILROOTCERTS

# Else if CARDTYPE is hardcode to "SMIL," install the NSS root cert chain by calling the ans_2fa_rhel7_install_certs script
# with NSS root certificate file as argument
elif [ "$CARDTYPE" == "SMIL" ]
then
	printf "Calling '%s %s' to install NSS root certificates for SMIL environment..." "$INSTALLCERTS" "$SMILROOTCERTS"
	$INSTALLCERTS $SMILROOTCERTS
fi

# Display newly applied authselect settings
printf "Smartcard authentication settings:"
$AUTHSELECT current
printf ""

# Modify /etc/opensc.conf file to set precedence of smartcard drivers
if ! grep card_drivers $OPENSCCFG > /dev/null; then
	printf "Inserting 'card_drivers = PIV-II, cac, internal;' into %s...\n" "$OPENSCCFG"
	cp $OPENSCCFG $OPENSCCFG.bak
	sed '$i \\tcard_drivers = PIV-II, cac, internal;' $OPENSCCFG
fi

# Modify /etc/pam.d/sudo file to prompt for PIN with sudo
if ! grep 'auth[[:space:]]*sufficient[[:space:]]*pam_pkcs11.so' $SUDOCFG >& /dev/null; then
	printf "Configuring sudo for PIN prompt in %s...\n" "$SUDOCFG"
	cp $SUDOCFG $SUDOCFG.bak
	sed -i '1s/^/auth sufficient pam_pkcs11.so\n/' $SUDOCFG
fi

# Set SELinux mode to Enforcing
printf "Setting SELinux mode back to 'Enforcing'\n"
setenforce Enforcing

# Check for existing SELinux exception for p11_child module
# If p11_child module exception is not found, configure one for the /usr/libexec/sssd/p11_child executable
# to prevent SELinux errors in /var/log/messages
if ! semodule -l | grep my-p11child >& /dev/null; then
	printf "Configuring SELinux exception for sssd child process (p11_child)\n"
	ausearch -c 'p11_child' --raw | audit2allow -M my-p11child >& /dev/null
	semodule -i my-p11child.pp >& /dev/null
	printf ""
fi

printf "Done! Please reboot the system to test logging into user account with token.\n"
exit
