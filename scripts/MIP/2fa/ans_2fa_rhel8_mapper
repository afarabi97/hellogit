#!/bin/bash

#  ans_2fa_rhel8_mapper - maps a token username to a computer user account for 2FA login
#
#		NOTE: This script must be run by the root user to allow write access to the SSSD config file
#			(/etc/sssd/sssd.conf).
#			Before running this script, login with username/password (vice smart card) to allow
#			proper use of the smart card reader during the token "enrollment" process.
#
#			Created by Roy Presley, Applied Research Solutions, for CVA/H PMO; 10 Jan 2020
#			Modified to strip punctuation symbols from supplied 1st argument (username) before
#			  checking for username in /etc/passwd; 27 Jan 2020
#			Modified to check for existence of sssd.conf file; if one doesn't exist, this script
#			  creates one with new matchule containing token username; 31 Jan 2020
#			Switched to use of CN to build token user string (using "pkcs11-tool --list-objects";
#			   this change will work for both unclass and class alt tokens; 11 Sep 2020
#
#			Renamed as part of Ansible "friendly" RHEL8 2FA configuration scripts; 28 Sep 2020
# Set variables
PKCS15TOOL=/usr/bin/pkcs15-tool
PKCS11TOOL=/usr/bin/pkcs11-tool
SSSD_CONF_FILE=/etc/sssd/sssd.conf
NO_SSSD_CONF_FILE=0
NOT_MATCHRULE=0
MATCH_CHK=""

fatal_error(){
	printf "Error: %s\n"  "$*" >>/dev/stderr
	exit 1
}
# Check to see if the logged in user is root. If not, inform the user and exit.
if [ "$EUID" -ne 0 ]
then
	fatal_error "Script must be run as root or use sudo."
fi

# Check for required executables
if [ ! -x $PKCS15TOOL ]
then
	fatal_error "$PKCS15TOOL not found! Is opensc package missing or corrupted?"
fi

# The user must provide a valid computer username to associate with the token username.
if [ $# != 1 ]
then
	fatal_error "Usage:  ans_2fa_rhel8_mapper username"

# Check to see if the supplied argument is a valid computer username.
else
	USRNAME="$1"
	USRNAME=$(echo "$1" | tr -d '[:punct:]')

	if ! getent passwd "$USRNAME" > /dev/null;
	then
		fatal_error "User $USRNAME not found!"
		# Check the smart card for a token username.
	else
		printf "Checking smart card for token username...\n"
		if ! $PKCS15TOOL --list-info &> /dev/null
		then
			fatal_error "Please insert a smart card in the reader and try again."
			# Check whether the token username already exists in the sssd.conf matchrule entry.
			# If not, add the token username to the matchrule.
			# If the token username is already in the matchrule, inform the user and exit.
			# NOTE:  If no matchrule entry exists, the section below will create one.
			# Subsequent execution of this script with other tokens will append entries to the matchrule entry.
		else
			TOKENUSR=$($PKCS11TOOL --list-objects |& grep -v "^Using" | grep "^ *subject:" | awk -F= '{print $7}' | head -1)

# Check for existence of sssd.conf file
if [ -e $SSSD_CONF_FILE ]
then
	# If sssd.conf file exists, grep for token user name in matchrule entry
	# If the token user name is not found, check for the '||' operator and at least one other <SUBJECT> entry
	# in the matchrule
	if ! MATCH_CHK=$(grep "$TOKENUSR" "$SSSD_CONF_FILE")
	then
		# Make a backup copy of the sssd.conf file
		cp $SSSD_CONF_FILE $SSSD_CONF_FILE.bak

# If the pattern isn't found in the sssd.conf file, set the NOT_MATCHRULE flag to 1
if ! grep 'matchrule =||<SUBJECT>' $SSSD_CONF_FILE >& /dev/null;
then
	NOT_MATCHRULE=1
else
	NOT_MATCHRULE=0
fi

# Else if the token user name is already in the matchrule, do nothing
else
	printf "Token username is already listed in matchrule:  %s\n" "$MATCH_CHK"
	printf "Nothing more to do!\n"
	exit 2
	fi

# The sssd.conf file exists so set the NO_SSSD_CONF_FILE flag to 0
NO_SSSD_CONF_FILE=0
else
	NO_SSSD_CONF_FILE=1
fi

# If there's not a matchrule starting with '||<SUBJECT>' or there's no sssd.conf file, create an sssd.conf
# file with a matchrule for the token user name as the first <SUBJECT> entry
if [[ $NOT_MATCHRULE == 1 ]] || [[ $NO_SSSD_CONF_FILE == 1 ]]
then
	echo "Creating matchrule with token username ($TOKENUSR)..."

	echo -e "[sssd]\nservices = nss, pam\ndomains = files\n\ncertificate_verification = no_ocsp\n\n[nss]\n\n[pam]\npam_cert_auth = True\n\n[domain/files]\nid_provider = files\n\n[certmap/files/$USRNAME]\nmatchrule =||<SUBJECT>CN=$TOKENUSR\n" > $SSSD_CONF_FILE

	echo "Done!"
	echo ""
	# Else append the token username to the existing matchrule in the sssd.conf file
elif [ $NOT_MATCHRULE == 0 ]
then
	echo "Appending $TOKENUSR to matchrule..."
	sed "s/\(<SUBJECT>CN=.*$\)/\1<SUBJECT>CN=$TOKENUSR/" $SSSD_CONF_FILE.bak > $SSSD_CONF_FILE
	echo ""
fi

# Change permissions to RW for root only (per the SSSD documentation)
chmod 600 $SSSD_CONF_FILE > /dev/null

		fi
	fi
fi

exit
