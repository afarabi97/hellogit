#!/usr/bin/wish
#
#  2famapper8.wish - Tcl/Tk script that maps a token username to a computer user account for 2FA login on RHEL 8.x systems
#
#		NOTE:  This script is dependent on the installation of the following packages:
#			tcl-x.x.xx-x.el7.x86_64
#			tk-x.x.xx-x.el7.x86_64
#			openssh-askpass-x.x-x.el7.x86_64
#		
#  		Created by Roy Presley, Applied Research Solutions, for CVA/H PMO; 28 Feb 20
#  		
#  		Added code to catch password failure and cancellation for gnome-ssh-askpass dialog; 5 Mar 20
#  		Modified token parsing code to handle smart cards with embedded spaces in token user name (it can happen!); 10 Mar 20
#  		
#  		Modified token parsing code to retrieve token user name from CN field (vice token label) per pam_pkcs11
#  			documentation using "pkcs11-tool --list-objects" documentation; 26 Jun 2020
#  			NOTE:  This change works with both unclass and class alt tokens
#
#		Added code section for RHEL 8.x (uses /etc/sssd/sssd.conf vice /etc/pam_pkcs11/cn_map); 14 Sep 20
#
#		Removed legacy RHEL 7.x code sections; 16 Sep 20

# Create top level window 
wm title . "2FA Mapper"
wm geometry . 400x200

# Define global variables
set script [exec basename $argv0]
puts "script = $script"

set logfile "~/$script.log"
puts "logfile = $logfile"

set date_fmt "%d%b%Y %H:%M:%Sz"
set date [exec /usr/bin/date -u +$date_fmt]

set pkcs15tool /usr/bin/pkcs15-tool
set pkcs11tool /usr/bin/pkcs11-tool
set pam_pkcs11_dir /etc/pam_pkcs11
set computeruser assessor

# If SSH_ASKPASS environment variable does not exist, set SUDO_ASKPASS environment variable to full pathname
# of gnome-ssh-askpass (part of openssh-askpass package)
if { ![info exists env(SSH_ASKPASS)] } {
   set env(SUDO_ASKPASS) "/usr/libexec/openssh/gnome-ssh-askpass"
# Else set SUDO_ASKPASS to contents of SSH_ASKPASS environment variable
} else {
   set env(SUDO_ASKPASS) $env(SSH_ASKPASS)
}

## Define procedures
# Logging procedure for errors and status msgs
proc logger { logmsg } {
   global logfile
   exec echo $logmsg >> $logfile
}

# Check dependencies (files, directories, packages, computer user) 
proc check_deps { vernum } {
   global pkcs15tool pkcs11tool pam_pkcs11_dir computeruser env

# Check for computeruser in /etc/passwd file; if not found, flag error and exit
   set computeruser_chk [catch {exec /usr/bin/getent passwd $computeruser} msg]

   if { $computeruser_chk != 0 } {
      puts "User $computeruser not found!"
      set msgbox "User $computeruser not found!"
      tk_messageBox -message $msgbox -title "Error"
      logger "$date - Error: $computeruser not found!"
      exit 1
   }

# Check for executable gnome-ssh-askpass "helper" application; if not found, flag error and exit
   set askpass_exec [file executable $env(SUDO_ASKPASS)]

   if { ! $askpass_exec } {
      puts "$env(SUDO_ASKPASS) not found! Is openssh-askpass package missing or corrupted?"
      set msgbox "$env(SUDO_ASKPASS) not found! Is openssh-askpass package missing or corrupted?"
      tk_messageBox -message $msgbox -title "Error"
      logger "$date - Error: $env(SUDO_ASKPASS) not found! Is openssh-askpass package missing or corrupted?"
      exit 1
   }

# Check for executable pkcs15-tool; if not found, flag error and exit 
   set pkcs15tool_exec [file executable $pkcs15tool]

   if { ! $pkcs15tool_exec } {
      puts "$pkcs15tool not found! Is OpenSC package missing or corrupted?"
      set msgbox "$pkcs15tool not found! Is OpenSC package missing or corrupted?"
      tk_messageBox -message $msgbox -title "Error"
      logger "$date - Error: $pkcs15tool not found! Is OpenSC package missing or corrupted?"
      exit 1
   }

# Check for executable pkcs11-tool; if not found, flag error and exit 
   set pkcs11tool_exec [file executable $pkcs11tool]

   if { ! $pkcs11tool_exec } {
      puts "$pkcs11tool not found! Is OpenSC package missing or corrupted?"
      set msgbox "$pkcs11tool not found! Is OpenSC package missing or corrupted?"
      tk_messageBox -message $msgbox -title "Error"
      logger "$date - Error: $pkcs11tool not found! Is OpenSC package missing or corrupted?"
      exit 1
   }

   .prg configure -value 25.0
}

# Create Tk widgets
font create BoldItalic -family Arial -size 11 -weight bold -slant italic

grid [ttk::frame .a -padding "5 5 20 20"] -column 0 -row 0 -sticky nw
grid columnconfigure .a 0 -weight 1; grid rowconfigure . 0 -weight 1
grid [ttk::label .a.flbl -text "RHEL Version: "] -column 1 -row 0 -sticky w
grid [ttk::label .a.flbl2 -textvariable rhelver -font BoldItalic] -column 2 -row 0 -sticky w

# Get RHEL version number
set rhelver [exec grep VERSION_ID /etc/os-release | cut --delimiter=\" -f 2]
set rhelnum [exec echo $rhelver | head --bytes=1]

puts "RHEL Version is $rhelver"
puts "rhelnum = $rhelnum"

# Log RHEL version
logger "\n$date - RHEL Version: $rhelver"

grid [ttk::frame .c -padding "5 5 20 20"] -column 0 -row 0 -sticky ew
grid [ttk::label .c.flbl -text "Instructions:\n\n\t* Insert token in SC reader.\n\n\t* Enter \"sudo\" password when prompted."] -column 1 -row 3 -sticky e
grid columnconfigure .c 0 -weight 2 -minsize 20; grid rowconfigure . 0 -weight 1

grid [ttk::frame .d -padding "5 5 20 20"] -column 0 -row 0 -sticky sw
grid [ttk::label .d.flbl -text "Progress:"] -column 1 -row 25 -sticky sw

grid [ttk::progressbar .prg -orient horizontal -length 200 -mode determinate -maximum 100 -value 0]
grid .prg -sticky ew

.prg configure -value 5.0

set msgbox "You need a token and your \"sudo\" password."
tk_messageBox -message $msgbox -title "Required"

# Procedure to create a clean /etc/sssd/sssd.conf file with the suppled tokenuser in the matchrule line
proc build_sssd_conf { tokenuser tmpfile } {
   exec echo "\[sssd\]" > $tmpfile
   exec echo "services = nss, pam" >> $tmpfile
   exec echo "domains = files" >> $tmpfile
   exec echo "" >> $tmpfile
   exec echo "certificate_verification = no_ocsp" >> $tmpfile
   exec echo "" >> $tmpfile
   exec echo "\[nss\]" >> $tmpfile
   exec echo "" >> $tmpfile
   exec echo "\[pam\]" >> $tmpfile
   exec echo "pam_cert_auth = True" >> $tmpfile
   exec echo "" >> $tmpfile
   exec echo "\[domain\/files\]" >> $tmpfile
   exec echo "id_provider = files" >> $tmpfile
   exec echo "\[certmap\/files\/assessor\]" >> $tmpfile
   exec echo "matchrule =||<SUBJECT>CN=$tokenuser" >> $tmpfile
   exec echo "" >> $tmpfile

   puts "build_sssd_conf:  Creating $tmpfile..."
}

# Procedure to install the supplied tmpfile into /etc/sssd/sssd.conf
proc install_sssd_conf { tmpfile sssd_conf tokenuser date } {
# Move tmpfile to /etc/sssd/sssd.conf
# Run sudo with gnome-ssh-askpass; if incorrect password is provided three times, flag error and exit
   catch {exec sudo -A mv $tmpfile $sssd_conf} msg

   puts "install_sssd_conf:  Moving $tmpfile into $sssd_conf..."

# If incorrect password is provided three times, flag error and exit
   if [string match "*sudo: 3 incorrect password attempts*" "$msg"] {
# Remove tmpfile
      exec /bin/rm -f $tmpfile

      set msgbox "Error: 3 incorrect sudo passwords"
      tk_messageBox -message $msgbox -title "3 Strikes!"
      logger "$date - $msgbox"
      exit 1
# Else if user cancels gnome-ssh-askpass dialog, flag error and exit
   } elseif { [string match "*sudo: no password was provided*" "$msg"] } {
# Remove tmpfile
      exec /bin/rm -f $tmpfile

      set msgbox "Error: no sudo password provided"
      tk_messageBox -message $msgbox -title "Password Dialog Canceled"
      logger "$date - $msgbox"
      exit 1
   } elseif { [string match "*child process exited abnormally*" "$msg"] } {
# Remove tmpfile
      exec /bin/rm -f $tmpfile

      set msgbox "Error: Invalid user input"
      tk_messageBox -message $msgbox -title "Invalid Input"
      logger "$date - $msgbox"
      exit 1
   }

# Set the sssd.conf file's user and group ownership to root
   exec sudo -A chown root:root $sssd_conf

# Set the sssd.conf file's mode to "rw" by root only
   exec sudo -A chmod 600 $sssd_conf
 
   .prg configure -value 75.0

   puts "Added $tokenuser"
   set msgbox "Added $tokenuser"
   tk_messageBox -message $msgbox -title "Success"

   logger "$date - Added $tokenuser to matchrule in $sssd_conf"
}

# 2FA mapping procedure (main loop)
proc 2fa_map_proc { vernum } {
   global logfile date script pkcs11tool pkcs15tool pam_pkcs11_dir computeruser env errorInfo

#   set askpass_base [exec basename $askpass]
   set askpass_base [exec basename $env(SUDO_ASKPASS)]

# Call check_deps procedure to check dependencies
   check_deps vernum

# Set temporary file name
   set tmpfile "/tmp/$script.tmp"

   set sc_chk [ catch {exec $pkcs15tool --list-info &> /dev/null} msg]

   while { "$msg" == "Card not present." } {
      set msgbox "Please insert token in reader."
      tk_messageBox -message $msgbox -title "Attention"
      logger "$date - $msg"
      set sc_chk [ catch {exec $pkcs15tool --list-info &> /dev/null} msg]
   }

   .prg configure -value 50.0

# Set tokenuser variable from user name on smart card
   set tokenuser [exec $pkcs11tool --list-objects |& grep -v "^Using" | grep "^ *subject:" | awk -F= {{print $7}}]

# Build map in /etc/sssd/sssd.conf for RHEL8.x systems
      puts "vernum: $vernum"

      set sssd_conf /etc/sssd/sssd.conf
      set sssd_conf_tmp /tmp/sssd.conf

# Copy sssd.conf file to /tmp/sssd.conf so we can modify it more easily
# Run sudo with gnome-ssh-askpass; if incorrect password is provided three times, flag error and exit
      catch {exec sudo -A cp $sssd_conf $sssd_conf_tmp} msg

# If incorrect password is provided three times, flag error and exit
      if [string match "*sudo: 3 incorrect password attempts*" "$msg"] {
         set msgbox "Error: 3 incorrect sudo passwords"
	 tk_messageBox -message $msgbox -title "3 Strikes!"
	 logger "$date - $msgbox"
	 exit 1
# Else if user cancels gnome-ssh-askpass dialog, flag error and exit
      } elseif { [string match "*sudo: no password was provided*" "$msg"] } {
         set msgbox "Error: no sudo password provided"
	 tk_messageBox -message $msgbox -title "Password Dialog Canceled"
	 logger "$date - $msgbox"
	 exit 1
      } elseif { [string match "*child process exited abnormally*" "$msg"] } {
	 set msgbox "Error: Invalid user input"
	 tk_messageBox -message $msgbox -title "Invalid Input"
	 logger "$date - $msgbox"
	 exit 1
      }

# Backup existing sssd.conf
      catch {exec sudo -A cp $sssd_conf $sssd_conf.save} msg

# Change permissions to global read-write to allow modification
      exec sudo -A chmod 666 $sssd_conf_tmp 

# Confirm /tmp/sssd.conf exists. If it doesn't, we will need to create one.
      set sssd_conf_exists [file exists $sssd_conf_tmp]

# If no /etc/sssd/sssd.conf file exists, create one
      if { ! $sssd_conf_exists } {

	 build_sssd_conf $tokenuser $tmpfile

	 logger "$date - Calling $askpass_base to authorize installation of new $sssd_conf"

	 install_sssd_conf $tmpfile $sssd_conf $tokenuser $date

# Else if an sssd.conf file exists, append or skip the tokenuser to the file
      } else {

# Make a copy of the existing sssd.conf file
         catch {exec cp $sssd_conf_tmp $tmpfile} msg

# If incorrect password is provided three times, flag error and exit
	 if [string match "*sudo: 3 incorrect password attempts*" "$msg"] {
	    set msgbox "Error: 3 incorrect sudo passwords"
	    tk_messageBox -message $msgbox -title "3 Strikes!"
	    logger "$date - $msgbox"
	    exit 1
# Else if user cancels gnome-ssh-askpass dialog, flag error and exit
	 } elseif { [string match "*sudo: no password was provided*" "$msg"] } {
	    set msgbox "Error: no sudo password provided"
	    tk_messageBox -message $msgbox -title "Password Dialog Canceled"
	    logger "$date - $msgbox"
	    exit 1
	 } elseif { [string match "*child process exited abnormally*" "$msg"] } {
	    set msgbox "Error: Invalid user input"
	    tk_messageBox -message $msgbox -title "Invalid Input"
	    logger "$date - $msgbox"
	    exit 1
	 }

# Change permissions on tmpfile to allow unimpeded pattern checks
#	exec sudo -A chmod 666 $tmpfile 

# Check for "^matchrule *=||<SUBJECT>CN=" line
 	set matchrule_chk [ catch {exec grep "^matchrule *=||<SUBJECT>CN=" $tmpfile 2> /dev/null} msg]

	if {$matchrule_chk == 1 } {

# Call build_sssd_conf to create new sssd.conf file
	   build_sssd_conf $tokenuser $tmpfile

	   logger "$date - Calling $askpass_base to authorize installation of new $sssd_conf"

	   install_sssd_conf $tmpfile $sssd_conf $tokenuser $date

# Else if there is a matchrule line, check a tokenuser entry in the line
	} elseif { $matchrule_chk == 0 } {

# Check for "[certmap/files/assessor]" line
#	   set certmap_chk [catch {exec grep "\[certmap/files/assessor\]" $tmpfile 2> /dev/null} msg]
	   set certmap_chk [catch {exec grep "certmap/files/assessor" $tmpfile 2> /dev/null} msg]

	   puts "certmap_chk = $certmap_chk"

# If no certmap line is found, add one to the sssd.conf file
	   if { $certmap_chk == 1 } {

	      puts "No certmap line exists so I'm creating one with sed..."

# This sed command appends the tokenuser to the matchrule and stores the output in tmpfile.sed
	      exec sed -i "/^matchrule *=||<SUBJECT>CN=/s/^/\[certmap\\/files\\/assessor\]\\n/" $tmpfile
	   }
	
	   puts "matchrule line exists; checking for $tokenuser entry..."

           set tokenuser_chk [catch {exec grep $tokenuser $tmpfile 2> /dev/null} msg]

# If the tokenuser is not in the matchrule line, append it
	   if { $tokenuser_chk == 1 } {

	      puts "$tokenuser is NOT in matchrule; calling sed to append it..."

# This sed command appends the tokenuser to the matchrule and stores the output in tmpfile.sed
	      exec sed -i "/^matchrule *=||<SUBJECT>CN=/s/$/<SUBJECT>CN=$tokenuser/" $tmpfile 

	      .prg configure -value 75.0

	      install_sssd_conf $tmpfile $sssd_conf $tokenuser $date

# Else if the tokenuser is already in the matchrule line, display an informative msg and do nothing
           } else {
		    
# Remove tmpfile
               exec /bin/rm -f $tmpfile

	       .prg configure -value 75.0

               puts "$tokenuser already exists. Nothing to do!" 
               set msgbox "$tokenuser already exists.\n\nNothing to do!" 
               tk_messageBox -message $msgbox -title "Meh"

	       logger "$date - $tokenuser already exists in matchrule in $sssd_conf"
           }
       }
   }
# Remove temporary copy of sssd.conf from /tmp directory
   exec sudo -A /bin/rm -f $sssd_conf_tmp
}

# Call procedure to map token(s)
2fa_map_proc $rhelnum

# Prompt user to enroll another token or not
set msgbox "Enroll another token?"
set resp [tk_messageBox -type "yesno" -message $msgbox -icon question -title "Repeat?" -parent .]

#puts "resp = $resp"

# Repeat the enrollment process as long as the user continues to select "Yes"
# Drop out of loop if the response is "No"
while { $resp == yes } {
   2fa_map_proc $rhelnum
   set msgbox "Enroll another token?"
   set resp [tk_messageBox -type "yesno" -message $msgbox -icon question -title "Repeat?" -parent .]
   puts "resp = $resp"
}

.prg configure -value 100.0

# Inform user of completion and location of log file
set msgbox "2FA Mapper complete!\n\nLog file is $logfile."
tk_messageBox -message $msgbox -title "Finished"

logger "$date - 2FA Mapper processing complete"

exec sleep 1

exit
