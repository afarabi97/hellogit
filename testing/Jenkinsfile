/**
 * Send notifications based on build status string
 */
 def notifySlack(String buildStatus = 'STARTED') {
    // build status of null means successful
    buildStatus = buildStatus ?: 'SUCCESS'

    // Default values
    def colorName = 'RED'
    def colorCode = '#FF0000'
    def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
    def summary = "${subject} (${env.BUILD_URL})"
    def details = """<p>${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
        <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>"""

    // Override default values based on build status
    if (buildStatus == 'STARTED') {
        color = 'YELLOW'
        colorCode = '#FFFF00'
    } else if (buildStatus == 'SUCCESS') {
        color = 'GREEN'
        colorCode = '#00FF00'
    } else {
        color = 'RED'
        colorCode = '#FF0000'
    }

    // Send notifications
    slackSend (color: colorCode, message: summary)
}

pipeline {
    agent {
        label "tfplenum"
    }
    environment {
        REDFISH     =    credentials('REDFISH')
        ESXI        =    credentials('ESXI')
        DI2E        =    credentials('di2e-user-password')
        VCENTER     =    credentials('vcenter-user-password')
        RHEL_ORG    =    credentials('rhel-subscription-org')
        RHEL_KEY    =    credentials('rhel-subscription-key')
        IMAGE_PATH  =    '/var/lib/jenkins/images/rhel/'
    }
    stages {
        stage('checkout'){
            steps {
                script {
                    notifySlack('STARTED')
                }
                cleanWs()
                git branch: '${tfplenum_commit_hash}', credentialsId: 'di2e-user-password', url: 'https://bitbucket.di2e.net/scm/thisiscvah/tfplenum.git'
            }
        }
        stage('setup controller') {
            options {
                timeout(time: 60, unit: 'MINUTES')
            }
            steps {
                script {
                    notifySlack('Building controller')
                    def base = "python3.6 testing/testy-tester/main.py \
                                    --path testing/testy-tester/testcases/${kit} \
                                    -du $DI2E_USR -dp $DI2E_PSW \
                                    -vu $VCENTER_USR -vp $VCENTER_PSW \
                                    -eu $ESXI_USR -ep $ESXI_PSW \
                                    --tfplenum-commit-hash ${tfplenum_commit_hash}"

                    def command = "${base} --setup-controller"
                    println command
                    sh(command)
                }
            }
        }
        stage('kickstart kit') {
            options {
                timeout(time: 45, unit: 'MINUTES')
            }
            steps {
                script {
                    notifySlack('Run kickstart')
                    def base = "python3.6 testing/testy-tester/main.py \
                                    --path testing/testy-tester/testcases/${kit} \
                                    -du $DI2E_USR -dp $DI2E_PSW \
                                    -vu $VCENTER_USR -vp $VCENTER_PSW \
                                    -eu $ESXI_USR -ep $ESXI_PSW"

                    def command = "${base} --run-kickstart"
                    println command
                    sh(command)
                }
            }
        }
        stage('deploy kit') {
            options {
                timeout(time: 60, unit: 'MINUTES')
            }
            steps {
                script {
                    notifySlack('Run kit')
                    def base = "python3.6 testing/testy-tester/main.py \
                                    --path testing/testy-tester/testcases/${kit} \
                                    -du $DI2E_USR -dp $DI2E_PSW \
                                    -vu $VCENTER_USR -vp $VCENTER_PSW \
                                    -eu $ESXI_USR -ep $ESXI_PSW"

                    def command = "${base} --run-kit"
                    println command
                    sh(command)
                }
            }
        }
        stage('CVAH Catalog') {
            options {
                timeout(time: 60, unit: 'MINUTES')
            }
            steps {
                script {
                    notifySlack('Run catalog')
                    def base = "python3.6 testing/testy-tester/main.py \
                                    --path testing/testy-tester/testcases/${kit} \
                                    -du $DI2E_USR -dp $DI2E_PSW \
                                    -vu $VCENTER_USR -vp $VCENTER_PSW \
                                    -eu $ESXI_USR -ep $ESXI_PSW"

                    def command = "${base} --run-catalog"
                    println command
                    sh(command)
                }
            }
        }
        stage('system function testing') {
            options {
                timeout(time: 30, unit: 'MINUTES')
            }
            steps {
                script {
                    notifySlack('Run integration tests')
                    sh("mkdir -p $WORKSPACE/reports")
                    def base = "python3.6 testing/testy-tester/main.py \
                                    --path testing/testy-tester/testcases/${kit} \
                                    -du $DI2E_USR -dp $DI2E_PSW \
                                    -vu $VCENTER_USR -vp $VCENTER_PSW \
                                    -eu $ESXI_USR -ep $ESXI_PSW"

                    def command = "${base} --run-integration-tests"
                    println command
                    sh(command)
                }
                junit 'reports/*.xml'
            }
        }
        stage('simulate power failure') {
            options {
                timeout(time: 30, unit: 'MINUTES')
            }
            steps {
                script {
                    notifySlack('Simulate power failure')
                    def base = "python3.6 testing/testy-tester/main.py \
                                    --path testing/testy-tester/testcases/${kit} \
                                    -du $DI2E_USR -dp $DI2E_PSW \
                                    -vu $VCENTER_USR -vp $VCENTER_PSW \
                                    -eu $ESXI_USR -ep $ESXI_PSW"

                    def command = "${base} --simulate-powerfailure"
                    println command
                    sh(command)
                }
            }
        }
        stage('system function testing2') {
            options {
                timeout(time: 30, unit: 'MINUTES')
            }
            steps {
                script {
                    notifySlack('Run integration testing')
                    def base = "python3.6 testing/testy-tester/main.py \
                                    --path testing/testy-tester/testcases/${kit} \
                                    -du $DI2E_USR -dp $DI2E_PSW \
                                    -vu $VCENTER_USR -vp $VCENTER_PSW \
                                    -eu $ESXI_USR -ep $ESXI_PSW"

                    def command = "${base} --run-integration-tests"
                    println command
                    sh(command)
                }
                junit 'reports/*.xml'
            }
        }
        stage('clean up test kits') {
            steps {
                script {
                    currentBuild.result = currentBuild.result ?: 'SUCCESS'
                    if (currentBuild.result == 'SUCCESS' && params.cleanup_kit) {
                        def base = "python3.6 testing/testy-tester/main.py \
                                    --path testing/testy-tester/testcases/${kit} \
                                    -du $DI2E_USR -dp $DI2E_PSW \
                                    -vu $VCENTER_USR -vp $VCENTER_PSW \
                                    -eu $ESXI_USR -ep $ESXI_PSW"

                        def command = "${BASE_COMMAND} --cleanup"
                        println command
                        sh(command)
                    }
                }
            }
        }
    }
    post {
        always{
            script {
                currentBuild.result = currentBuild.result ?: 'SUCCESS'
                notifySlack(currentBuild.result)
            }
        }
    }
}
