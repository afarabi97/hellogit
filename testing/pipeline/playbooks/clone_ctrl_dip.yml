---
- name: Create a VM from a template
  hosts: localhost
  connection: local
  gather_facts: no
  vars:
    ansible_python_interpreter: "{{ python_executable }}"
  tasks:
    - name: "Power off the VM {{ node.hostname }}"
      ignore_errors: yes
      vmware_guest:
        datacenter: "{{ vcenter.datacenter }}"
        cluster: "{{ vcenter.cluster }}"
        hostname: "{{ vcenter.ipaddress }}"
        username: "{{ vcenter.username }}"
        password: "{{ vcenter.password }}"
        name: "{{ node.hostname }}"
        folder: "{{ node.folder }}"
        state: poweredoff
        validate_certs: False
      delegate_to: localhost

    - name: "Removing VM {{ node.hostname }}"
      ignore_errors: yes
      vmware_guest:
        datacenter: "{{ vcenter.datacenter }}"
        cluster: "{{ vcenter.cluster }}"
        hostname: "{{ vcenter.ipaddress }}"
        username: "{{ vcenter.username }}"
        password: "{{ vcenter.password }}"
        name: "{{ node.hostname }}"
        state: absent
        validate_certs: False
      delegate_to: localhost

    - name: "Cloning DIP ctrl {{ node.template }} to {{ node.hostname }}"
      vmware_guest:
        hostname: "{{ vcenter.ipaddress }}"
        username: "{{ vcenter.username }}"
        password: "{{ vcenter.password }}"
        validate_certs: False
        name: "{{ node.hostname }}"
        template: "{{ node.template }}"
        datacenter: "{{ vcenter.datacenter }}"
        cluster: "{{ vcenter.cluster }}"
        folder: "{{ node.folder }}"
        state: poweredon
        networks:
          - name: "{{ node.portgroup }}"
        customization:
          autologon: no
          password: "{{ node.password }}"
          hostname: "{{ node.hostname }}"
        hardware:
          memory_mb: "{{ node.memory }}"
          num_cpus: "{{ node.cpu }}"
      delegate_to: localhost

    - name: "Restart the VM {{ node.hostname }}"
      ignore_errors: yes
      vmware_guest:
        datacenter: "{{ vcenter.datacenter }}"
        cluster: "{{ vcenter.cluster }}"
        hostname: "{{ vcenter.ipaddress }}"
        username: "{{ vcenter.username }}"
        password: "{{ vcenter.password }}"
        name: "{{ node.hostname }}"
        folder: "{{ node.folder }}"
        state: restarted
        validate_certs: False
      delegate_to: localhost

    - name: Wait for VMware tools to become available by name
      vmware_guest_tools_wait:
        hostname: "{{ vcenter.ipaddress }}"
        username: "{{ vcenter.username }}"
        password: "{{ vcenter.password }}"
        validate_certs: no
        name: "{{ node.hostname }}"
        folder: "{{ node.folder }}"
      delegate_to: localhost
      register: facts

    # Pause for 20 seconds so that vmware can start up minutes to build app cache.
    - pause:
        seconds: 20

    - name: Rejigger the jacked up networking
      ignore_errors: yes
      vmware_vm_shell:
        hostname: "{{ vcenter.ipaddress }}"
        username: "{{ vcenter.username }}"
        password: "{{ vcenter.password }}"
        vm_id: "{{ node.hostname }}"
        vm_username: "{{ node.username }}"
        vm_password: "{{ node.password }}"
        vm_shell: /usr/bin/sudo
        vm_shell_args: "{{ item }}"
        vm_shell_cwd: "/usr/sbin"
        validate_certs: no
      delegate_to: localhost
      with_items:
        - "nmcli con del ens192"
        - "nmcli con del 'System ens192'"
        - "nmcli con add type ethernet con-name ens192 ifname ens192 master br0"
        - "nmcli con modify 'Bridge br0' ipv4.address '{{ node.ipaddress }}/24'"
        - "nmcli con modify 'Bridge br0' ipv4.gateway '{{ node.gateway }}'"
        - "nmcli conn modify 'Bridge br0' ipv4.dns '10.10.101.11'"
        - "nmcli con down 'Bridge br0'"
        - "nmcli con up 'Bridge br0'"

    - name: "Make sure network adapter is connected"
      vmware_guest_network:
        hostname: "{{ vcenter.ipaddress }}"
        username: "{{ vcenter.username }}"
        password: "{{ vcenter.password }}"
        datacenter: "{{ vcenter.datacenter }}"
        cluster: "{{ vcenter.cluster }}"
        validate_certs: False
        name: "{{ node.hostname }}"
        gather_network_info: False
        networks:
          - label: "Network adapter 1"
            state: present
            connected: True
            start_connected: True
      delegate_to: localhost

