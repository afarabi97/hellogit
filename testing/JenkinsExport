/**
 * Send notifications based on build status string
 */
 def notifySlack(String buildStatus = 'STARTED') {
    // build status of null means successful
    buildStatus = buildStatus ?: 'SUCCESS'

    // Default values
    def colorName = 'RED'
    def colorCode = '#FF0000'
    def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
    def summary = "${subject} (${env.BUILD_URL})"
    def details = """<p>${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
        <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>"""

    // Override default values based on build status
    if (buildStatus == 'STARTED') {
        color = 'YELLOW'
        colorCode = '#FFFF00'
    } else if (buildStatus == 'SUCCESS') {
        color = 'GREEN'
        colorCode = '#00FF00'
    } else {
        color = 'RED'
        colorCode = '#FF0000'
    }

    // Send notifications
    slackSend (color: colorCode, message: summary)
}

pipeline {
    agent {
        label "tfplenum"
    }

    stages {
        stage('checkout'){
            steps {
                script{
                    notifySlack('STARTED')
                }
                cleanWs()
                git branch: '${tfplenum_commit_hash}', credentialsId: 'di2e-user-password', url: 'https://bitbucket.di2e.net/scm/thisiscvah/tfplenum.git'
            }
        }
        stage('build offline documentation') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'di2e-user-password', passwordVariable: 'di2e_password', usernameVariable: 'di2e_username'),
                        usernamePassword(credentialsId: 'vcenter-user-password', passwordVariable: 'vcenter_password', usernameVariable: 'vcenter_username')]) {
                        def command = "sudo python3.6 testing/testy-tester/main.py --export-offline-docs \"${tfplenum_confluence_page}\" --export-location \"${tfplenum_export_loc}\" \
                        --export-version \"${tfplenum_export_version}\" --path testing/testy-tester/testcases/${kit} -du '${di2e_username}' -dp '${di2e_password}' -vu '${vcenter_username}' -vp '${vcenter_password}'"
                        println command
                        sh(command)
                    }
                }
            }
        }
        stage('ship phyical stack build') {
            steps {
                script {
                    sh('zip -r physical-stack-build-${tfplenum_export_version}.zip infrastucture/')
                    sh('sudo cp physical-stack-build-${tfplenum_export_version}.zip ${tfplenum_export_loc}/${tfplenum_export_version}')
                }
            }
        }
        stage('setup controller') {
            options {
                timeout(time: 120, unit: 'MINUTES')
            }
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'di2e-user-password', passwordVariable: 'di2e_password', usernameVariable: 'di2e_username'),
                        usernamePassword(credentialsId: 'vcenter-user-password', passwordVariable: 'vcenter_password', usernameVariable: 'vcenter_username')]) {
                        def command = "sudo python3.6 testing/testy-tester/main.py --setup-controller ${build_type} \
                        --path testing/testy-tester/testcases/${kit} -du '${di2e_username}' -dp '${di2e_password}' -vu '${vcenter_username}' -vp '${vcenter_password}' \
                        --tfplenum-commit-hash ${tfplenum_commit_hash}"
                        println command
                        sh(command)
                    }
                }
            }
        }
        stage('add docs to controller') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'di2e-user-password', passwordVariable: 'di2e_password', usernameVariable: 'di2e_username'),
                        usernamePassword(credentialsId: 'vcenter-user-password', passwordVariable: 'vcenter_password', usernameVariable: 'vcenter_username')]) {
                        def command = "sudo python3.6 testing/testy-tester/main.py --add-docs-to-controller \"${tfplenum_confluence_page}\" --export-location \"${tfplenum_export_loc}\" \
                        --export-version \"${tfplenum_export_version}\" --path testing/testy-tester/testcases/${kit} -du '${di2e_username}' -dp '${di2e_password}' -vu '${vcenter_username}' -vp '${vcenter_password}'"
                        println command
                        sh(command)
                    }
                }
            }
        }
        stage('export controller') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'di2e-user-password', passwordVariable: 'di2e_password', usernameVariable: 'di2e_username'),
                        usernamePassword(credentialsId: 'vcenter-user-password', passwordVariable: 'vcenter_password', usernameVariable: 'vcenter_username')]) {
                        def command = "sudo python3.6 testing/testy-tester/main.py --export-controller --export-location \"${tfplenum_export_loc}\" \
                        --export-version \"${tfplenum_export_version}\" --path testing/testy-tester/testcases/${kit} -du '${di2e_username}' -dp '${di2e_password}' -vu '${vcenter_username}' -vp '${vcenter_password}'"
                        println command
                        sh(command)
                    }
                }
            }
        }
        stage('Generate versions file') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'di2e-user-password', passwordVariable: 'di2e_password', usernameVariable: 'di2e_username'),
                        usernamePassword(credentialsId: 'vcenter-user-password', passwordVariable: 'vcenter_password', usernameVariable: 'vcenter_username')]) {
                        def command = "sudo python3.6 testing/testy-tester/main.py --generate-hash-file-for-exports --export-location \"${tfplenum_export_loc}\" \
                        --export-version \"${tfplenum_export_version}\" --path testing/testy-tester/testcases/${kit} -du '${di2e_username}' -dp '${di2e_password}' -vu '${vcenter_username}' -vp '${vcenter_password}'"
                        println command
                        sh(command)
                    }
                }
            }
        }
        stage('Publish to labrepo') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: '5c726aaa-66b1-430e-b595-8fc56a3f2350', passwordVariable: 'labrepo_pass', usernameVariable: 'labrepo_user')]) {
                        def command = "sudo python3.6 testing/testy-tester/main.py --publish-to-labrepo labrepo.lan \"${labrepo_user}\" \"${labrepo_pass}\" --export-location \"${tfplenum_export_loc}\" \
                        --export-version \"${tfplenum_export_version}\" --path testing/testy-tester/testcases/${kit}"
                        println command
                        sh(command)
                    }
                }
            }
        }
    }
    post {
        always{
            script {
                currentBuild.result = currentBuild.result ?: 'SUCCESS'
                notifySlack(currentBuild.result)
            }
        }
    }
}
