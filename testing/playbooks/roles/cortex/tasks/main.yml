---

- name: Set Initial Facts
  set_fact:
    app_deployed: false
    releases: ""

- name: check if cortex is installed
  command: helm list --filter 'cortex$' --output json
  register: app_installed
  changed_when: app_installed.rc != 0
  delegate_to: localhost

- name: update installed variable
  set_fact:
    releases: "{{ (app_installed.stdout | from_json) }}"
  when:
    - app_installed.stdout

- name: update installed variable
  set_fact:
    app_deployed: true
  when:
    - app_installed is defined
    - releases is defined and releases
    - "'deployed' in item.status"
  with_items: "{{ releases }}"

- name: Test | Check Cortex Helm Deployed
  assert:
    that: "'deployed' in item.status"
    msg: "Failed to determine if Cortex is installed"
  when: releases is defined and releases
  with_items:
    - "{{ releases }}"

- name: Check Cortex Pods
  block:
  - name: get cortex pods
    shell: |
      set -o pipefail && {{ kubectl_get_pods_cmd }} | grep 'cortex-'
    register: get_pods
    changed_when: get_pods.failed

  - name: Get pod status
    shell: |
      set -o pipefail && kubectl get pod {{ item }} --no-headers | awk '{ print $3 }'
    with_items: "{{ get_pods.stdout_lines }}"
    register: pod_status
    changed_when: pod_status.failed
    ignore_errors: yes

  - name: Test | Check Pod Status
    assert:
      that: item.stdout == 'Running' or item.stdout == 'Completed'
      msg: "Failed it appears cortex pod status is {{ item.stdout }}"
    with_items: "{{ pod_status.results }}"
  when: app_deployed

- name: Get MISP analyzer facts
  uri:
    url: "{{ cortex_uri }}/analyzer?range=all&sort=%2Bname"
    return_content: yes
    validate_certs: no
    user: "{{ cortex_username }}"
    password: "{{ cortex_password }}"
    force_basic_auth: yes
    status_code: 200
  register: misp_analyzer
  until: misp_analyzer.status == 200
  retries: 10
  delay: 5
  ignore_errors: yes

- name: Set MISP analyzer url
  set_fact:
    cortex_run_analyzer_url: "{{ cortex_uri }}/analyzer/{{ misp_analyzer.json[0].id }}/run"

- name: Run MISP analyzer
  uri:
    url: "{{ cortex_run_analyzer_url }}"
    return_content: yes
    validate_certs: no
    user: "{{ cortex_username }}"
    password: "{{ cortex_password }}"
    force_basic_auth: yes
    status_code: 200
    body: '{"data": "8.8.8.8", "attributes": {"dataType": "ip", "tlp": 2, "pap": 2 }}'
    method: POST
    body_format: json
  register: run_analyzer
  ignore_errors: yes

- name: Test | MISP analyzer
  assert:
    that: run_analyzer.status == 200
    msg: "MISP analyzer did not load properly"

- name: Check if MISP analyzer job was successful
  uri:
    url: "{{ cortex_uri }}/job/_search?range=0-50&sort=-createdAt"
    return_content: yes
    validate_certs: no
    user: "{{ cortex_username }}"
    password: "{{ cortex_password }}"
    force_basic_auth: yes
    status_code: 200
    body: '{ "query":{} }'
    method: POST
    body_format: json
  register: job
  until: job.json[0].status == "Success"
  retries: 10
  delay: 5
  ignore_errors: yes

...
