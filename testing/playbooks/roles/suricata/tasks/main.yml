---

- set_fact:
    app_deployed: false
    releases: ""

- name: Check if Suricata is installed
  shell: helm list suricata --output json
  register: app_installed
  changed_when: app_installed.rc != 0

- name: update installed variable
  set_fact:
    releases: "{{ (app_installed.stdout | from_json).Releases }}"
  when:
    - "'Releases' in app_installed.stdout"

- name: update installed variable
  set_fact:
    app_deployed: true
  when:
    - app_installed is defined
    - releases is defined and releases != ""
    - "'DEPLOYED' in item.Status"
  with_items: "{{ releases }}"

- name: Test | Check suricata Helm Deployed
  assert:
    that: "'DEPLOYED' in item.Status"
    msg: "Failed to determine if suricata is installed"
  when: releases is defined and releases != ""
  with_items:
    - "{{ releases }}"

- block:
  - set_fact:
          cmd: !unsafe kubectl get pods -o go-template --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'

  - name: get suricata pods
    shell: |
      {{ cmd }} | grep 'suricata-'
    register: get_pods
    changed_when: get_pods.failed

  - name: Get pod status
    shell: |
      kubectl get pod {{item}} --no-headers | awk '{ print $3 }'
    with_items: "{{ get_pods.stdout_lines }}"
    register: pod_status
    changed_when: pod_status.failed
    ignore_errors: yes

  - name: Test | Check Pod Status
    assert:
      that: item.stdout == 'Running'
      msg: "Failed it appears suricata pod status is {{ item.stdout }}"
    with_items: "{{ pod_status.results }}"

  - name: Check Suricata Indicies
    import_role:
      name: common
      tasks_from: check_indices
    vars:
      app_name: "suricata"
      index_regex: "^filebeat-*"

  - name: Check Suricata HTTP Data
    uri:
      url: "{{ elastic_uri }}/filebeat-*/_search?q=(suricata.eve.src_port:80+OR+suricata.eve.dest_port:80)+AND+@timestamp:[now-15m+TO+now]"
      return_content: yes
    register: results_sh
    until: results_sh.json.hits.total != 0
    retries: 60
    delay: 5
    ignore_errors: yes

  - name: Test | Check Suricata HTTP Results
    assert:
      that: results_sh.json.hits.total != 0
      msg: "Failed verifying Elasticsearch received HTTP logs from Suricata"

  - name: Check Suricata DNS Data
    uri:
      url: "{{ elastic_uri }}/filebeat-*/_search?q=(suricata.eve.src_port:53+OR+suricata.eve.dest_port:53)+AND+@timestamp:[now-15m+TO+now]"
      return_content: yes
    register: results_sd
    until: results_sd.json.hits.total != 0
    retries: 60
    delay: 5
    ignore_errors: yes

  - name: Test | Check Suricata DNS Results
    assert:
      that: results_sd.json.hits.total != 0
      msg: "Failed verifying Elasticsearch received DNS logs from Suricata"

  - name: Check Suricata SMB Data
    uri:
      url: "{{ elastic_uri }}/filebeat-*/_search?q=(suricata.eve.src_port:445+OR+suricata.eve.dest_port:445)+AND+@timestamp:[now-15m+TO+now]"
      return_content: yes
    register: results_ss
    until: results_ss.json.hits.total != 0
    retries: 60
    delay: 5
    ignore_errors: yes

  - name: Test | Check Suricata SMB Results
    assert:
      that: results_ss.json.hits.total != 0
      msg: "Failed verifying Elasticsearch received SMB logs from Suricata"
  when: (app_deployed|bool) and inventory_hostname in groups['master_server']

- name: Check Suricata PCAP Data
  find:
    paths: "/data/pcap"
    patterns: "suri*.pcap"
  register: results_sp
  until: results_sp.matched != 0
  retries: 60
  delay: 5
  ignore_errors: yes
  when: (app_deployed|bool) and inventory_hostname in groups['sensors']

- name: Test | Check Suricata PCAP Results
  assert:
    that: results_sp.matched != 0
    msg: "Failed verifying Suricata PCAP"
  when: (app_deployed|bool) and inventory_hostname in groups['sensors']

...
