{{- $d := dict "manager" (dict "type" "manager" "port" 47760) -}}
{{- $_ := set $d "proxy" (dict "type" "proxy" "port" 47762) -}}
{{- range $i, $e := until (.Values.zeek_loggers | int) -}}
{{- $_ := set $d (printf "logger-%d" $i) (dict "type" "logger" "logger_number" $i "port" (add 47761 $i)) -}}
{{- range $interface_idx, $interface := $.Values.interfaces -}}
{{- range $i, $e := until ($.Values.zeek_workers | int) -}}
{{- $_ := set $d (printf "%s-%d" $interface $i) (dict "type" "worker" "interface" (printf "af_packet::%s" $interface) "port" (add 47763 ($.Values.zeek_loggers | int) $i (mul ($.Values.zeek_workers | int) $interface_idx))) -}}
{{- end -}}
{{- end -}}
{{- end -}}
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
  labels:
    component: zeek
spec:
  replicas: 1
  selector:
    matchLabels:
      component: zeek
  template:
    metadata:
      labels:
        component: zeek
        deployment: {{ .Release.Name }}
    spec:
      # Due to a bug in the C++ Actor Framework (which powers Zeek's broker),
      # this is necessary to get Zeek nodes to talk to each other.
      shareProcessNamespace: true
      hostNetwork: true
      initContainers:
      - name: init-zeek
        image: "{{ .Values.image_name }}:{{ .Values.image_tag }}"
        imagePullPolicy: IfNotPresent
        command:
          - "/bin/sh"
          - "-c"
          - "/bin/touch -a /opt/zeek/share/zeek/site/custom/__load__.zeek"
        volumeMounts:
        - name: custom-scripts
          mountPath: /opt/zeek/share/zeek/site/custom
      containers:
{{- range $node, $config := $d }}
      - name: {{ $node }}
        image: "{{ $.Values.image_name }}:{{ $.Values.image_tag }}"
        imagePullPolicy: IfNotPresent
{{- /*
Liveness probes on the Zeek cluster have a high rate of false positives, which
causes a lot of unnecessary restarts. This is okay on everything but the manager
and proxy; these have a lot of open connections and the way Kubernetes restarts
it leaves a lot of dangling connections, leaving it in an error state when it
tries to restart.
*/}}
{{- if not (or (eq $config.type "manager") (eq $config.type "proxy")) }}
        livenessProbe:
            tcpSocket:
                port: {{ $config.port }}
            initialDelaySeconds: 30
            periodSeconds: 15
            failureThreshold: 6
{{- end }}
{{- if eq $config.type "worker" }}
        securityContext:
              capabilities:
                add:
                  - NET_ADMIN
                  - NET_RAW
                  - SYS_NICE
{{- else }}
        resources:
          requests:
            cpu: 200m
{{- end }}
        volumeMounts:
        - name: custom-scripts
          mountPath: /opt/zeek/share/zeek/site/custom
          readOnly: true
        - name: default-scripts
          subPath: cluster-layout.zeek
          mountPath: /opt/zeek/share/zeek/site/cluster-layout.zeek
          readOnly: true
        - name: default-scripts
          subPath: local.zeek
          mountPath: /opt/zeek/share/zeek/site/local.zeek
        - name: scripts
          mountPath: /opt/zeek/share/zeek/site/tfplenum
          readOnly: true
        - name: intel-dat
          mountPath: {{ $.Values.zeek_intel_dat }}
          readOnly: true
{{- if eq $config.type "logger" }}
        - name: logs
          mountPath: {{ $.Values.zeek_log_path }}
        workingDir: {{ $.Values.zeek_log_path }}
{{- end }}
        env:
        - name: CLUSTER_NODE
          value: {{ $node }}
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        args:
{{- if eq $config.type "worker" }}
        - "-i"
        - {{ $config.interface }}
{{- end }}
        - "-U"
        - ".status"
        - "frameworks/control/controllee"
        - "local.zeek"
        - "base/frameworks/cluster"
{{- end }}
      restartPolicy: Always
      volumes:
      - name: logs
        hostPath:
          path: {{ .Values.zeek_log_path }}
          type: DirectoryOrCreate
      - name: custom-scripts
        hostPath:
          path: {{ .Values.zeek_scripts }}
          type: DirectoryOrCreate
      - name: intel-dat
        hostPath:
          path: {{ .Values.zeek_intel_dat }}
          type: FileOrCreate
      - name: default-scripts
        configMap:
          name: {{ .Release.Name }}
      - name: scripts
        configMap:
          name: {{ .Release.Name }}-scripts
      - name: webca
        secret:
          defaultMode: 420
          optional: false
          secretName: webca-certificate
      affinity:
        nodeAffinity: # Only schedule on the intended host
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/hostname
                operator: In
                values:
                - "{{ .Values.affinity_hostname }}"
        podAntiAffinity: # Do not allow more than one per host
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: component
                operator: In
                values:
                - zeek
            topologyKey: "kubernetes.io/hostname"

...
