apiVersion: v1
kind: Service
metadata:
  name: kafka-headless
  labels:
    component: kafka
spec:
  ports:
  - port: 9092
    name: server
  clusterIP: None
  selector:
    component: kafka
---
apiVersion: v1
kind: Service
metadata:
  name: kafka
  labels:
    component: kafka
spec:
  ports:
  - port: 9092
    name: server
  selector:
    component: kafka
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ .Release.Name }}
  labels:
    component: kafka
spec:
  selector:
    matchLabels:
      component: kafka
  template:
    metadata:
      labels:
        component: kafka
    spec:
      initContainers:
      - name: init-kafka
        image: "{{ .Values.busybox_image_name  }}:{{ .Values.busybox_image_tag }}"
        imagePullPolicy: IfNotPresent
        command:
        - "/bin/sh"
        - "-c"
        - "until nc -zv zookeeper.default.svc.cluster.local 2181; do sleep 2; done"
      containers:
      - name: kafka
        imagePullPolicy: IfNotPresent
        image: "{{ .Values.kafka_image_name }}:{{ .Values.kafka_image_tag }}"
        securityContext:
          runAsUser: 0
          runAsGroup: 0
          fsGroup: 0
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
        ports:
        - containerPort: 9092
          name: server
        env:
        - name: ALLOW_PLAINTEXT_LISTENER
          value: "yes"
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: KAFKA_CFG_LISTENERS
          value: "PLAINTEXT://:9092"
        - name: KAFKA_CFG_ADVERTISED_LISTENERS
          value: "PLAINTEXT://$(POD_IP):9092"
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: "zookeeper.default.svc.cluster.local:2181"
        - name: KAFKA_CFG_LOG_RETENTION_HOURS
          value: {{ .Values.log_retention_hours | quote }}
        - name: KAFKA_CFG_NUM_PARTITIONS
          value: {{ .Values.num_partitions | quote }}
        - name: KAFKA_CFG_DEFAULT_REPLICATION_FACTOR
          value: {{ .Values.replication_factor | quote }}
        readinessProbe:
          tcpSocket:
            port: server
          initialDelaySeconds: 10
          timeoutSeconds: 5
        livenessProbe:
          tcpSocket:
            port: server
          initialDelaySeconds: 10
          timeoutSeconds: 5
        volumeMounts:
        - name: data
          mountPath: /bitnami/kafka
      restartPolicy: Always
      nodeSelector:
        role: "sensor"
      volumes:
      - name: data
        hostPath:
          path: {{ .Values.kafka_path }}
          type: DirectoryOrCreate
