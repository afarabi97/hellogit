alias docker_clear='sudo docker stop $(sudo docker ps -a -q);sudo docker rm $(sudo docker ps -a -q)'
alias git_graph='git log --pretty=oneline --graph --decorate --all'
alias run_backend_debug='fuser -k 5001/tcp; systemctl stop tfplenum-backend; cd /opt/tfplenum/web/backend/; source /opt/tfplenum/.venv/bin/activate; python wsgi.py --debug'
alias run_frontend_debug='fuser -k 4200/tcp; cd /opt/tfplenum/web/frontend; npm start'
alias open_mongo='mongo'
alias server_backup='/opt/tfplenum/web/setup/backup_tfplenum.sh'
alias server_restore='/opt/tfplenum/web/setup/restore_tfplenum.sh'
alias operator_token='/opt/tfplenum/.venv/bin/python3 /opt/sso-idp/gen_api_token.py --roles "operator"'
alias admin_token='/opt/tfplenum/.venv/bin/python3 /opt/sso-idp/gen_api_token.py --roles "controller-admin"'
alias maintainer_token='/opt/tfplenum/.venv/bin/python3 /opt/sso-idp/gen_api_token.py --roles "controller-maintainer"'
alias tail_tfplenum_logs='tail -f /var/log/tfplenum/*.log'
alias download_k9s='curl -O http://misc.labrepo.sil.lab/k9s_Linux_x86_64.tar.gz; tar xvf k9s_Linux_x86_64.tar.gz; mv k9s /usr/local/bin; chmod 755 /usr/local/bin/k9s'
alias k9s='k9s'
alias k='kubectl'
alias k8s_desc='kubectl describe po $1'
alias k8s_get='kubectl get po'
alias k8s_watch='watch kubectl get po'
alias k8s_exec='kubectl exec -it $@'
alias activate_pyenv='source /opt/tfplenum/.venv/bin/activate'
alias update_rebuild_frontend='cd /opt/tfplenum; git pull --rebase; /opt/tfplenum/web/setup/redeploy.sh'
alias run_angular_tests='/opt/tfplenum/web/frontend/run_angular_tests.sh'
alias parse_cold_logs='/opt/tfplenum/scripts/process_offline_logs.py'
alias run_flask_unit_tests='/opt/tfplenum/web/backend/run_unit_tests.sh'
alias run_flask_unit_tests_with_coverage='/opt/tfplenum/web/backend/run_unit_tests.sh coverage'
alias run_acceptance_tests='/opt/tfplenum/web/backend/run_acceptance_tests.sh'
alias run_backend_unit_tests='/bin/bash ./web/backend/run_backend_tests.sh -T unit --with-coverage'
function run_tfplenum_docker_test () {
    bname=$(basename "$PWD")
    TEST_TYPE="${unit:+"acceptance"}"
    TEST_SECTION="${backend:+frontend}"
    while [[ $# -gt 0 ]]; do
        key="$1"
        case $key in
            -S|--section)
                TEST_SECTION=${2}
                shift 2
            ;;

            -T|--type)
                TEST_TYPE=${2}
                shift 2
            ;;
        esac
    done
    if [[ "${bname}" == "tfplenum" ]]; then
        docker run --rm --volume="$PWD"/web/:/opt/tfplenum/web/ -it docker.nexus.sil.lab/tfplenum/code-checker:1.3 /bin/bash -c "pushd /opt/tfplenum/web/ && ./run_tfplenum_tests.sh -T $TEST_TYPE -S $TEST_SECTION --from-code-checker --with-coverage"
    else
        # This will try to switch to the root directory and run again. If the root directory doesn't exit it exits
        echo "Assuming we're on the controller, not a local development environment"
        echo "This is best ran from the root tfplenum directory"
        pushd /opt/tfplenum/ > /dev/null && docker run --rm --volume="$PWD"/web:/opt/tfplenum/web/ -it docker.nexus.sil.lab/tfplenum/code-checker:1.3 /bin/bash -c "pushd /opt/tfplenum/web/ && ./run_tfplenum_tests.sh -T $TEST_TYPE -S $TEST_SECTION --from-code-checker --with-coverage"
    fi
}
alias run_backend_docker_unit_tests='run_tfplenum_docker_test -S backend -T unit'
alias run_backend_docker_acceptance_tests='run_tfplenum_docker_test -S backend -T acceptance'
