# Create builder stage
FROM rockylinux:8 as builder

ARG ZEEK_VERSION={{ context["docker_versions"]["zeek_version"] }}
ARG BUILD_TYPE=Release

RUN mkdir /zeekbuild

WORKDIR /zeekbuild

# Install Required dev toolset
RUN dnf update -y && dnf clean all
RUN dnf -y install epel-release wget dnf-plugins-core
RUN dnf config-manager --set-enabled powertools

# Update repos and install required packages
RUN dnf install -y python3-pip
RUN dnf install -y jemalloc numactl libnl3 libdnet gdb python3
RUN dnf install -y libpcap-devel git cmake3 cmake make gcc gcc-c++ librdkafka-devel kernel-devel kernel-headers
RUN dnf install -y flex bison jemalloc-devel openssl-devel python3-devel swig zlib-devel git
RUN dnf group install -y "Development Tools"
RUN pip3 install GitPython semantic-version

RUN wget https://download.zeek.org/zeek-$ZEEK_VERSION.tar.gz && tar zxvf zeek-$ZEEK_VERSION.tar.gz
RUN cd zeek-$ZEEK_VERSION && \
    ./configure --prefix=/opt/zeek --enable-jemalloc --build-type=$BUILD_TYPE && \
    make -j8 && make install

RUN yes | /opt/zeek/bin/zkg install https://github.com/TOoSmOotH/zeek-af_packet-plugin --version=master
RUN yes | /opt/zeek/bin/zkg install zeek-community-id


# Create geogetter stage
FROM rockylinux:8 as geogetter
WORKDIR /usr/share/GeoIP
RUN dnf update -y
RUN dnf install -y findutils

# Download databases
RUN curl -L -o GeoLite2-City.tar.gz \
  "http://misc.labrepo.sil.lab/GeoLite2-City.tar.gz"
RUN tar -ztf /usr/share/GeoIP/GeoLite2-City.tar.gz | grep mmdb | xargs -I X tar -Ozxf /usr/share/GeoIP/GeoLite2-City.tar.gz X >> /usr/share/GeoIP/GeoLite2-City.mmdb
RUN curl -L -o GeoLite2-ASN.tar.gz \
  "http://misc.labrepo.sil.lab/GeoLite2-ASN.tar.gz"
RUN tar -ztf /usr/share/GeoIP/GeoLite2-ASN.tar.gz | grep mmdb | xargs -I X tar -Ozxf /usr/share/GeoIP/GeoLite2-ASN.tar.gz X >> /usr/share/GeoIP/GeoLite2-ASN.mmdb


# Build the final image
FROM rockylinux:8
WORKDIR /data

# Copy from previous stages
COPY --from=geogetter /usr/share/GeoIP/* /usr/share/GeoIP/
COPY --from=builder /opt/zeek /opt/zeek

# Install dependencies
RUN dnf install -y epel-release dnf-plugins-core
RUN dnf config-manager --set-enabled powertools
RUN dnf install -y python3 git libpkgconf pkgconf-m4 vi iproute libpcap jemalloc gdb findutils cronie procps which \
    make openssl-libs pkgconf pkgconfig libmaxminddb libmaxminddb-devel openssl librdkafka librdkafka-devel libpcap libpcap-devel \
    && dnf clean all && \
    mkdir -p /opt/zeek/site/scripts/plugins

WORKDIR /opt/zeek

# Copy over the entry script.
COPY zeek.sh /usr/local/sbin/zeek.sh
RUN chmod +x /usr/local/sbin/zeek.sh

ENTRYPOINT ["/usr/local/sbin/zeek.sh"]

