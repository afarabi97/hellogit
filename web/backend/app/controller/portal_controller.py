"""
Main module that controls the REST calls for the portal page.
"""
import re

from urllib import response
from app.common import cursor_to_json_response
from app.middleware import login_required_roles, operator_required
from app.service.portal_service import get_portal_links
from app.utils.collections import mongo_user_links
from app.utils.namespaces import PORTAL_NS
from bson import ObjectId
from flask import Response, request
from flask_restx import Resource


@PORTAL_NS.route("/links")
class PortalLinks(Resource):
    @PORTAL_NS.doc(description="Retrieves the portal links that were generated by the kit")
    @PORTAL_NS.response(200, "Success")
    @PORTAL_NS.response(500, "Internal Server Error")
    @login_required_roles()
    def get(self) -> Response:
        """
        Retrieves the portal links that were generated by the kit
        """
        return get_portal_links()



def get_user_links():
    user_links = mongo_user_links().find({})
    return cursor_to_json_response(
        user_links, fields=["name", "url", "description"], sort_field="name"
    )
@PORTAL_NS.route("/user/links")
class UserLinks(Resource):
    @PORTAL_NS.doc(description="Create and Retrieves user generated portal links")
    @login_required_roles()
    def get(self) -> Response:
        """
        Send all links in mongo_user_links().
        """
        return get_user_links()

    @operator_required
    def post(self) -> Response:
        """
        Add a new link to mongo_user_links().
        """
        link_data = request.get_json()
        if not re.match(r"^(http|https)://", link_data.get("url")):
            return Response(
                "URL must start with http:// or https://",
                status=400,
                mimetype="application/json",
            )
        matches = mongo_user_links().find({"name": link_data["name"]}).count()
        matches += mongo_user_links().find({"url": link_data["url"]}).count()
        if matches == 0:
            mongo_user_links().insert_one(link_data)
        return get_user_links()

@PORTAL_NS.route("/user/links/<link_id>")
class DelUserLinks(Resource):
    @PORTAL_NS.doc(description="Remove a user generated link from the portal.")
    @PORTAL_NS.response(200, "Success")
    @PORTAL_NS.response(500, "Internal Server Error")
    @operator_required
    def delete(self, link_id: str) -> Response:
        """
        Remove a user generated link from the portal.
        """
        mongo_user_links().delete_one({"_id": ObjectId(link_id)})
        return get_user_links()
