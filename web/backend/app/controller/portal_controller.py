"""
Main module that controls the REST calls for the portal page.
"""
from app.middleware import (handle_errors, login_required_roles,
                            operator_required)
from app.models.common import COMMON_ERROR_MESSAGE, COMMON_SUCCESS_MESSAGE
from app.models.portal_link import PortalLinkModel
from app.models.portal_link_user import UserPortalLinkModel
from app.service.portal_service import (delete_user_links, get_portal_links,
                                        get_user_links, post_user_links)
from app.utils.namespaces import PORTAL_NS
from flask import Response, request
from flask_restx import Resource


@PORTAL_NS.route("/links")
class PortalLinksCtrlApi(Resource):

    @PORTAL_NS.doc(description="Retrieves the portal links that were generated by the kit")
    @PORTAL_NS.response(200, "PortalLinkModel", PortalLinkModel.DTO)
    @PORTAL_NS.response(500, "InternalServerError", COMMON_ERROR_MESSAGE)
    @login_required_roles()
    @handle_errors
    def get(self) -> Response:
        return get_portal_links()


@PORTAL_NS.route("/user/links")
class UserLinksCtrlApi(Resource):

    @PORTAL_NS.doc(description="Retrieves user generated portal links")
    @PORTAL_NS.response(200, "UserPortalLinkModel", UserPortalLinkModel.DTO)
    @PORTAL_NS.response(500, "ErrorMessage: InternalServerError", COMMON_ERROR_MESSAGE)
    @login_required_roles()
    @handle_errors
    def get(self) -> Response:
        return get_user_links()


    @PORTAL_NS.doc(description="Creates user generated portal links")
    @PORTAL_NS.doc(payload=UserPortalLinkModel)
    @PORTAL_NS.response(200, "UserPortalLinkModel", UserPortalLinkModel.DTO)
    @PORTAL_NS.response(500, "ErrorMessage: InternalServerError", COMMON_ERROR_MESSAGE)
    @operator_required
    @handle_errors
    def post(self) -> Response:
        return post_user_links(PORTAL_NS.payload)


@PORTAL_NS.route("/user/links/<link_id>")
@PORTAL_NS.doc(params={"link_id": "A link id used for delete"})
class DelUserLinksCtrlApi(Resource):

    @PORTAL_NS.doc(description="Remove a user generated link from the portal.")
    @PORTAL_NS.response(200, "SuccessMessage", COMMON_SUCCESS_MESSAGE)
    @PORTAL_NS.response(404, "ErrorMessage: NotFoundError", COMMON_ERROR_MESSAGE)
    @PORTAL_NS.response(500, "ErrorMessage: InternalServerError", COMMON_ERROR_MESSAGE)
    @operator_required
    @handle_errors
    def delete(self, link_id: str) -> Response:
        return delete_user_links(link_id)
